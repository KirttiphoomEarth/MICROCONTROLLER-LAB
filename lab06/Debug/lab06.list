
lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005628  08005628  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  080056a0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08005740  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000750  200001b0  080057e0  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000900  080057e0  00020900  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018607  00000000  00000000  000201de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030dd  00000000  00000000  000387e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001340  00000000  00000000  0003b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011e8  00000000  00000000  0003cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a8a9  00000000  00000000  0003ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017ec5  00000000  00000000  00068699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104c2b  00000000  00000000  0008055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00185189  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000549c  00000000  00000000  001851dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	080055a8 	.word	0x080055a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	080055a8 	.word	0x080055a8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ETH_Init+0x84>)
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <MX_ETH_Init+0x88>)
 80005fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005fe:	4b20      	ldr	r3, [pc, #128]	; (8000680 <MX_ETH_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_ETH_Init+0x8c>)
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ETH_Init+0x8c>)
 800060c:	22e1      	movs	r2, #225	; 0xe1
 800060e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_ETH_Init+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ETH_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_ETH_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ETH_Init+0x84>)
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <MX_ETH_Init+0x8c>)
 8000626:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_ETH_Init+0x84>)
 800062a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800062e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_ETH_Init+0x84>)
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <MX_ETH_Init+0x90>)
 8000634:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_ETH_Init+0x84>)
 8000638:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_ETH_Init+0x94>)
 800063a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_ETH_Init+0x84>)
 800063e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000642:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_ETH_Init+0x84>)
 8000646:	f000 fecd 	bl	80013e4 <HAL_ETH_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000650:	f000 fa3a 	bl	8000ac8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000654:	2238      	movs	r2, #56	; 0x38
 8000656:	2100      	movs	r1, #0
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_ETH_Init+0x98>)
 800065a:	f004 fb2f 	bl	8004cbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_ETH_Init+0x98>)
 8000660:	2221      	movs	r2, #33	; 0x21
 8000662:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_ETH_Init+0x98>)
 8000666:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800066a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_ETH_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000204 	.word	0x20000204
 800067c:	40028000 	.word	0x40028000
 8000680:	200002b4 	.word	0x200002b4
 8000684:	20000110 	.word	0x20000110
 8000688:	20000070 	.word	0x20000070
 800068c:	200001cc 	.word	0x200001cc

08000690 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a4e      	ldr	r2, [pc, #312]	; (80007e8 <HAL_ETH_MspInit+0x158>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	f040 8096 	bne.w	80007e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006b4:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a4c      	ldr	r2, [pc, #304]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
 80006c0:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c8:	623b      	str	r3, [r7, #32]
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	4b47      	ldr	r3, [pc, #284]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a46      	ldr	r2, [pc, #280]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
 80006d8:	4b44      	ldr	r3, [pc, #272]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006e0:	61fb      	str	r3, [r7, #28]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	4a40      	ldr	r2, [pc, #256]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006ee:	6313      	str	r3, [r2, #48]	; 0x30
 80006f0:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a3a      	ldr	r2, [pc, #232]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a34      	ldr	r2, [pc, #208]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b32      	ldr	r3, [pc, #200]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
 8000738:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f003 0302 	and.w	r3, r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <HAL_ETH_MspInit+0x15c>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	481e      	ldr	r0, [pc, #120]	; (80007f0 <HAL_ETH_MspInit+0x160>)
 8000778:	f001 f95a 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800077c:	2386      	movs	r3, #134	; 0x86
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <HAL_ETH_MspInit+0x164>)
 8000798:	f001 f94a 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ae:	230b      	movs	r3, #11
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <HAL_ETH_MspInit+0x168>)
 80007ba:	f001 f939 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <HAL_ETH_MspInit+0x16c>)
 80007dc:	f001 f928 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40028000 	.word	0x40028000
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40021800 	.word	0x40021800

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a46      	ldr	r2, [pc, #280]	; (8000934 <MX_GPIO_Init+0x134>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a40      	ldr	r2, [pc, #256]	; (8000934 <MX_GPIO_Init+0x134>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a3a      	ldr	r2, [pc, #232]	; (8000934 <MX_GPIO_Init+0x134>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a34      	ldr	r2, [pc, #208]	; (8000934 <MX_GPIO_Init+0x134>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <MX_GPIO_Init+0x134>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_GPIO_Init+0x134>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ac:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_GPIO_Init+0x138>)
 80008ae:	f001 fa6b 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	4821      	ldr	r0, [pc, #132]	; (800093c <MX_GPIO_Init+0x13c>)
 80008b8:	f001 fa66 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	481b      	ldr	r0, [pc, #108]	; (8000940 <MX_GPIO_Init+0x140>)
 80008d4:	f001 f8ac 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_GPIO_Init+0x138>)
 80008f2:	f001 f89d 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <MX_GPIO_Init+0x13c>)
 800090e:	f001 f88f 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_GPIO_Init+0x13c>)
 8000926:	f001 f883 	bl	8001a30 <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40021800 	.word	0x40021800
 8000940:	40020800 	.word	0x40020800

08000944 <displayNumber>:

/* USER CODE BEGIN PV */
uint32_t count;
uint32_t count2;
extern void displayNumber(uint32_t c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09c      	sub	sp, #112	; 0x70
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	char buffer[100];
	int time = c/1000;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <displayNumber+0x48>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	099b      	lsrs	r3, r3, #6
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c

//	sprintf(buffer,"count time %02d:%02d\r", time/60,time%60  );
	sprintf(buffer,"count time :%2d\n\r", c );
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <displayNumber+0x4c>)
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f9b3 	bl	8004ccc <siprintf>
	HAL_UART_Transmit(&huart3, (uint32_t *) buffer, strlen(buffer), 1000);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc68 	bl	8000240 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <displayNumber+0x50>)
 800097e:	f003 f9e1 	bl	8003d44 <HAL_UART_Transmit>
}
 8000982:	bf00      	nop
 8000984:	3770      	adds	r7, #112	; 0x70
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	10624dd3 	.word	0x10624dd3
 8000990:	080055c0 	.word	0x080055c0
 8000994:	2000035c 	.word	0x2000035c

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 fb8f 	bl	80010be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f822 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f7ff ff2c 	bl	8000800 <MX_GPIO_Init>
  MX_ETH_Init();
 80009a8:	f7ff fe24 	bl	80005f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009ac:	f000 fa26 	bl	8000dfc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009b0:	f000 fab4 	bl	8000f1c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80009b4:	f000 f93e 	bl	8000c34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009b8:	f000 f990 	bl	8000cdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT (&htim1);
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <main+0x44>)
 80009be:	f002 fcf9 	bl	80033b4 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT (&htim2);
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <main+0x48>)
 80009c4:	f002 fcf6 	bl	80033b4 <HAL_TIM_Base_Start_IT>
//	  if (count2 % 400 == 0 )
//	  {
//		  displayNumber(count);
//	  }

	  displayNumber(count);
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <main+0x4c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ffb9 	bl	8000944 <displayNumber>
	  HAL_Delay(400);
 80009d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009d6:	f000 fbcf 	bl	8001178 <HAL_Delay>
	  displayNumber(count);
 80009da:	e7f5      	b.n	80009c8 <main+0x30>
 80009dc:	200002c4 	.word	0x200002c4
 80009e0:	20000310 	.word	0x20000310
 80009e4:	200002bc 	.word	0x200002bc

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2234      	movs	r2, #52	; 0x34
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 f960 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a0c:	f001 fb1e 	bl	800204c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <SystemClock_Config+0xd8>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <SystemClock_Config+0xd8>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <SystemClock_Config+0xd8>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <SystemClock_Config+0xdc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <SystemClock_Config+0xdc>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <SystemClock_Config+0xdc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a58:	23d8      	movs	r3, #216	; 0xd8
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a60:	2309      	movs	r3, #9
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fb4d 	bl	800210c <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a78:	f000 f826 	bl	8000ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a7c:	f001 faf6 	bl	800206c <HAL_PWREx_EnableOverDrive>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a86:	f000 f81f 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fddd 	bl	8002668 <HAL_RCC_ClockConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ab4:	f000 f808 	bl	8000ac8 <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3750      	adds	r7, #80	; 0x50
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f000 fc28 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 fae6 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000b7c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b80:	f002 fc90 	bl	80034a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002bc 	.word	0x200002bc
 8000b8c:	200002c4 	.word	0x200002c4

08000b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	count2++;
//	displayNumber(count);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM2_IRQHandler+0x10>)
 8000b96:	f002 fc85 	bl	80034a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  displayNumber(count);
  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000310 	.word	0x20000310

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f004 f848 	bl	8004c68 <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20080000 	.word	0x20080000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	200002c0 	.word	0x200002c0
 8000c0c:	20000900 	.word	0x20000900

08000c10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <MX_TIM1_Init+0xa4>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c5a:	22d7      	movs	r2, #215	; 0xd7
 8000c5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7e:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c80:	f002 fb40 	bl	8003304 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c8a:	f7ff ff1d 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000c9c:	f002 fd22 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ca6:	f7ff ff0f 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_TIM1_Init+0xa0>)
 8000cbc:	f002 ff48 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cc6:	f7ff feff 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200002c4 	.word	0x200002c4
 8000cd8:	40010000 	.word	0x40010000

08000cdc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 432-1;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d04:	f240 12af 	movw	r2, #431	; 0x1af
 8000d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d12:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <MX_TIM2_Init+0x9c>)
 8000d14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d22:	4814      	ldr	r0, [pc, #80]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d24:	f002 faee 	bl	8003304 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d2e:	f7ff fecb 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d40:	f002 fcd0 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d4a:	f7ff febd 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_TIM2_Init+0x98>)
 8000d5c:	f002 fef8 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d66:	f7ff feaf 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000310 	.word	0x20000310
 8000d78:	0001869f 	.word	0x0001869f

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_TIM_Base_MspInit+0x78>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d114      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_TIM_Base_MspInit+0x7c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_TIM_Base_MspInit+0x7c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_TIM_Base_MspInit+0x7c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	2019      	movs	r0, #25
 8000dac:	f000 fae3 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000db0:	2019      	movs	r0, #25
 8000db2:	f000 fafc 	bl	80013ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000db6:	e018      	b.n	8000dea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc0:	d113      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_Base_MspInit+0x7c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_TIM_Base_MspInit+0x7c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0x7c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2102      	movs	r1, #2
 8000dde:	201c      	movs	r0, #28
 8000de0:	f000 fac9 	bl	8001376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de4:	201c      	movs	r0, #28
 8000de6:	f000 fae2 	bl	80013ae <HAL_NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40023800 	.word	0x40023800

08000dfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_USART3_UART_Init+0x5c>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USART3_UART_Init+0x58>)
 8000e40:	f002 ff32 	bl	8003ca8 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f7ff fe3d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000035c 	.word	0x2000035c
 8000e58:	40004800 	.word	0x40004800

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ae      	sub	sp, #184	; 0xb8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2290      	movs	r2, #144	; 0x90
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 ff1d 	bl	8004cbc <memset>
  if(uartHandle->Instance==USART3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_UART_MspInit+0xb4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d13c      	bne.n	8000f06 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fe0a 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ea6:	f7ff fe0f 	bl	8000ac8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_UART_MspInit+0xb8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_UART_MspInit+0xbc>)
 8000f02:	f000 fd95 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f06:	bf00      	nop
 8000f08:	37b8      	adds	r7, #184	; 0xb8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40004800 	.word	0x40004800
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2a:	2206      	movs	r2, #6
 8000f2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f60:	f000 ff2b 	bl	8001dba <HAL_PCD_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f7ff fdad 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200003e4 	.word	0x200003e4

08000f78 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0ae      	sub	sp, #184	; 0xb8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2290      	movs	r2, #144	; 0x90
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fe8f 	bl	8004cbc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fa6:	d159      	bne.n	800105c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fd7b 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fc4:	f7ff fd80 	bl	8000ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <HAL_PCD_MspInit+0xec>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_PCD_MspInit+0xec>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_PCD_MspInit+0xec>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fe0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001004:	4619      	mov	r1, r3
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <HAL_PCD_MspInit+0xf0>)
 8001008:	f000 fd12 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800100c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001024:	4619      	mov	r1, r3
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <HAL_PCD_MspInit+0xf0>)
 8001028:	f000 fd02 	bl	8001a30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_PCD_MspInit+0xec>)
 800102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_PCD_MspInit+0xec>)
 8001032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001036:	6353      	str	r3, [r2, #52]	; 0x34
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_PCD_MspInit+0xec>)
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_PCD_MspInit+0xec>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_PCD_MspInit+0xec>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6453      	str	r3, [r2, #68]	; 0x44
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_PCD_MspInit+0xec>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800105c:	bf00      	nop
 800105e:	37b8      	adds	r7, #184	; 0xb8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001096:	f7ff fdbb 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 fdeb 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fc7b 	bl	8000998 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b0:	08005630 	.word	0x08005630
  ldr r2, =_sbss
 80010b4:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80010b8:	20000900 	.word	0x20000900

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>

080010be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 f94c 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f805 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ce:	f7ff fd01 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f967 	bl	80013ca <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f92f 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	200008ec 	.word	0x200008ec

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200008ec 	.word	0x200008ec

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff29 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff3e 	bl	8001208 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff8e 	bl	80012b4 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5d 	bl	8001260 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff31 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffa2 	bl	800131c <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e06a      	b.n	80014cc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2223      	movs	r2, #35	; 0x23
 8001404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff f941 	bl	8000690 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_ETH_Init+0xf0>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <HAL_ETH_Init+0xf0>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_ETH_Init+0xf0>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_ETH_Init+0xf4>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <HAL_ETH_Init+0xf4>)
 800142c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001430:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_ETH_Init+0xf4>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	4927      	ldr	r1, [pc, #156]	; (80014d8 <HAL_ETH_Init+0xf4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_ETH_Init+0xf4>)
 8001442:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800145a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800145c:	f7ff fe80 	bl	8001160 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001462:	e011      	b.n	8001488 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001464:	f7ff fe7c 	bl	8001160 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001472:	d909      	bls.n	8001488 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2204      	movs	r2, #4
 8001478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	22e0      	movs	r2, #224	; 0xe0
 8001480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e021      	b.n	80014cc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e4      	bne.n	8001464 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f958 	bl	8001750 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f9ff 	bl	80018a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fa55 	bl	8001956 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	461a      	mov	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f9bd 	bl	8001834 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2210      	movs	r2, #16
 80014c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800

080014dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4b51      	ldr	r3, [pc, #324]	; (8001638 <ETH_SetMACConfig+0x15c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	7c1b      	ldrb	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <ETH_SetMACConfig+0x28>
 80014fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001502:	e000      	b.n	8001506 <ETH_SetMACConfig+0x2a>
 8001504:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7c5b      	ldrb	r3, [r3, #17]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <ETH_SetMACConfig+0x38>
 800150e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001512:	e000      	b.n	8001516 <ETH_SetMACConfig+0x3a>
 8001514:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001516:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800151c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7fdb      	ldrb	r3, [r3, #31]
 8001522:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001524:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800152a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	7f92      	ldrb	r2, [r2, #30]
 8001530:	2a00      	cmp	r2, #0
 8001532:	d102      	bne.n	800153a <ETH_SetMACConfig+0x5e>
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	e000      	b.n	800153c <ETH_SetMACConfig+0x60>
 800153a:	2200      	movs	r2, #0
                        macconf->Speed |
 800153c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7f1b      	ldrb	r3, [r3, #28]
 8001542:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001544:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800154a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001552:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	f892 2020 	ldrb.w	r2, [r2, #32]
 800155a:	2a00      	cmp	r2, #0
 800155c:	d102      	bne.n	8001564 <ETH_SetMACConfig+0x88>
 800155e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001562:	e000      	b.n	8001566 <ETH_SetMACConfig+0x8a>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001566:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	7bdb      	ldrb	r3, [r3, #15]
 800156c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800156e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800157c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800157e:	4313      	orrs	r3, r2
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff fdee 	bl	8001178 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d101      	bne.n	80015ca <ETH_SetMACConfig+0xee>
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0xf0>
 80015ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d101      	bne.n	80015e2 <ETH_SetMACConfig+0x106>
 80015de:	2208      	movs	r2, #8
 80015e0:	e000      	b.n	80015e4 <ETH_SetMACConfig+0x108>
 80015e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015ec:	2a01      	cmp	r2, #1
 80015ee:	d101      	bne.n	80015f4 <ETH_SetMACConfig+0x118>
 80015f0:	2204      	movs	r2, #4
 80015f2:	e000      	b.n	80015f6 <ETH_SetMACConfig+0x11a>
 80015f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015fe:	2a01      	cmp	r2, #1
 8001600:	d101      	bne.n	8001606 <ETH_SetMACConfig+0x12a>
 8001602:	2202      	movs	r2, #2
 8001604:	e000      	b.n	8001608 <ETH_SetMACConfig+0x12c>
 8001606:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001608:	4313      	orrs	r3, r2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff fda9 	bl	8001178 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	ff20810f 	.word	0xff20810f

0800163c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4b3d      	ldr	r3, [pc, #244]	; (800174c <ETH_SetDMAConfig+0x110>)
 8001656:	4013      	ands	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	7b1b      	ldrb	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <ETH_SetDMAConfig+0x2c>
 8001662:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001666:	e000      	b.n	800166a <ETH_SetDMAConfig+0x2e>
 8001668:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	7b5b      	ldrb	r3, [r3, #13]
 800166e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001670:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	7f52      	ldrb	r2, [r2, #29]
 8001676:	2a00      	cmp	r2, #0
 8001678:	d102      	bne.n	8001680 <ETH_SetDMAConfig+0x44>
 800167a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800167e:	e000      	b.n	8001682 <ETH_SetDMAConfig+0x46>
 8001680:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001682:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	7b9b      	ldrb	r3, [r3, #14]
 8001688:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800168a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001690:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	7f1b      	ldrb	r3, [r3, #28]
 8001696:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001698:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	7f9b      	ldrb	r3, [r3, #30]
 800169e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016b0:	4313      	orrs	r3, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c0:	461a      	mov	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff fd50 	bl	8001178 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001704:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001706:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800170e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001714:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800171e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001722:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff fd21 	bl	8001178 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	f8de3f23 	.word	0xf8de3f23

08001750 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0a6      	sub	sp, #152	; 0x98
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001758:	2301      	movs	r3, #1
 800175a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800175e:	2301      	movs	r3, #1
 8001760:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800178c:	2300      	movs	r3, #0
 800178e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001796:	2300      	movs	r3, #0
 8001798:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fe86 	bl	80014dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001804:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800180a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001818:	2300      	movs	r3, #0
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff08 	bl	800163c <ETH_SetDMAConfig>
}
 800182c:	bf00      	nop
 800182e:	3798      	adds	r7, #152	; 0x98
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3305      	adds	r3, #5
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	3204      	adds	r2, #4
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <ETH_MACAddressConfig+0x68>)
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3303      	adds	r3, #3
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	061a      	lsls	r2, r3, #24
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3302      	adds	r3, #2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4313      	orrs	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <ETH_MACAddressConfig+0x6c>)
 8001886:	4413      	add	r3, r2
 8001888:	461a      	mov	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40028040 	.word	0x40028040
 80018a0:	40028044 	.word	0x40028044

080018a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e03e      	b.n	8001930 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	3206      	adds	r2, #6
 80018e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d80c      	bhi.n	8001914 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	e004      	b.n	800191e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d9bd      	bls.n	80018b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	611a      	str	r2, [r3, #16]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e046      	b.n	80019f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6919      	ldr	r1, [r3, #16]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2200      	movs	r2, #0
 8001980:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80019a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	3212      	adds	r2, #18
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d80c      	bhi.n	80019e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6919      	ldr	r1, [r3, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	e004      	b.n	80019ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d9b5      	bls.n	8001964 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	60da      	str	r2, [r3, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e175      	b.n	8001d3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8164 	bne.w	8001d36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d005      	beq.n	8001a86 <HAL_GPIO_Init+0x56>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80be 	beq.w	8001d36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a65      	ldr	r2, [pc, #404]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bd2:	4a61      	ldr	r2, [pc, #388]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d037      	beq.n	8001c6e <HAL_GPIO_Init+0x23e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_GPIO_Init+0x23a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_GPIO_Init+0x334>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x236>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a55      	ldr	r2, [pc, #340]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x232>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <HAL_GPIO_Init+0x33c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <HAL_GPIO_Init+0x340>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x22a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_GPIO_Init+0x344>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a51      	ldr	r2, [pc, #324]	; (8001d78 <HAL_GPIO_Init+0x348>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_GPIO_Init+0x34c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c46:	2309      	movs	r3, #9
 8001c48:	e012      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	e010      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e00e      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c80:	4935      	ldr	r1, [pc, #212]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb2:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f ae86 	bls.w	8001a50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40021800 	.word	0x40021800
 8001d78:	40021c00 	.word	0x40021c00
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40022400 	.word	0x40022400
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbc:	b08f      	sub	sp, #60	; 0x3c
 8001dbe:	af0a      	add	r7, sp, #40	; 0x28
 8001dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e116      	b.n	8001ffa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff f8c6 	bl	8000f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fc90 	bl	8004730 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	687e      	ldr	r6, [r7, #4]
 8001e18:	466d      	mov	r5, sp
 8001e1a:	f106 0410 	add.w	r4, r6, #16
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2e:	1d33      	adds	r3, r6, #4
 8001e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	f002 fc24 	bl	8004680 <USB_CoreInit>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0d7      	b.n	8001ffa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fc7e 	bl	8004752 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e04a      	b.n	8001ef2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	333d      	adds	r3, #61	; 0x3d
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	333c      	adds	r3, #60	; 0x3c
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b298      	uxth	r0, r3
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3344      	adds	r3, #68	; 0x44
 8001e98:	4602      	mov	r2, r0
 8001e9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3340      	adds	r3, #64	; 0x40
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3348      	adds	r3, #72	; 0x48
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	334c      	adds	r3, #76	; 0x4c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3354      	adds	r3, #84	; 0x54
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3af      	bcc.n	8001e5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e044      	b.n	8001f8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3b5      	bcc.n	8001f02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	687e      	ldr	r6, [r7, #4]
 8001f9e:	466d      	mov	r5, sp
 8001fa0:	f106 0410 	add.w	r4, r6, #16
 8001fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb4:	1d33      	adds	r3, r6, #4
 8001fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f002 fc17 	bl	80047ec <USB_DevInit>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e014      	b.n	8001ffa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f80b 	bl	8002004 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fdd5 	bl	8004ba2 <USB_DevDisconnect>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_PCDEx_ActivateLPM+0x44>)
 8002034:	4313      	orrs	r3, r2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	10000003 	.word	0x10000003

0800204c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40007000 	.word	0x40007000

0800206c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_PWREx_EnableOverDrive+0x98>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_PWREx_EnableOverDrive+0x98>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_PWREx_EnableOverDrive+0x98>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800209a:	f7ff f861 	bl	8001160 <HAL_GetTick>
 800209e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020a0:	e009      	b.n	80020b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a2:	f7ff f85d 	bl	8001160 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b0:	d901      	bls.n	80020b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e022      	b.n	80020fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d1ee      	bne.n	80020a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d0:	f7ff f846 	bl	8001160 <HAL_GetTick>
 80020d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020d6:	e009      	b.n	80020ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020d8:	f7ff f842 	bl	8001160 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e6:	d901      	bls.n	80020ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e007      	b.n	80020fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020f8:	d1ee      	bne.n	80020d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	40007000 	.word	0x40007000

0800210c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e29b      	b.n	800265a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002130:	4b96      	ldr	r3, [pc, #600]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b04      	cmp	r3, #4
 800213a:	d00c      	beq.n	8002156 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213c:	4b93      	ldr	r3, [pc, #588]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b08      	cmp	r3, #8
 8002146:	d112      	bne.n	800216e <HAL_RCC_OscConfig+0x62>
 8002148:	4b90      	ldr	r3, [pc, #576]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002154:	d10b      	bne.n	800216e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002156:	4b8d      	ldr	r3, [pc, #564]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06c      	beq.n	800223c <HAL_RCC_OscConfig+0x130>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d168      	bne.n	800223c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e275      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x7a>
 8002178:	4b84      	ldr	r3, [pc, #528]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a83      	ldr	r2, [pc, #524]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800217e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	e02e      	b.n	80021e4 <HAL_RCC_OscConfig+0xd8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x9c>
 800218e:	4b7f      	ldr	r3, [pc, #508]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a7e      	ldr	r2, [pc, #504]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b7c      	ldr	r3, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7b      	ldr	r2, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e01d      	b.n	80021e4 <HAL_RCC_OscConfig+0xd8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0xc0>
 80021b2:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a75      	ldr	r2, [pc, #468]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a72      	ldr	r2, [pc, #456]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0xd8>
 80021cc:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b6c      	ldr	r3, [pc, #432]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6b      	ldr	r2, [pc, #428]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe ffb8 	bl	8001160 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe ffb4 	bl	8001160 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e229      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0xe8>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe ffa4 	bl	8001160 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe ffa0 	bl	8001160 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e215      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x110>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d069      	beq.n	800231e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b08      	cmp	r3, #8
 8002260:	d11c      	bne.n	800229c <HAL_RCC_OscConfig+0x190>
 8002262:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d116      	bne.n	800229c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x17a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1e9      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	493d      	ldr	r1, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	e040      	b.n	800231e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a38      	ldr	r2, [pc, #224]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff56 	bl	8001160 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b8:	f7fe ff52 	bl	8001160 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1c7      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4929      	ldr	r1, [pc, #164]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
 80022ea:	e018      	b.n	800231e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x280>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe ff32 	bl	8001160 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7fe ff2e 	bl	8001160 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1a3      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d038      	beq.n	800239c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	4a15      	ldr	r2, [pc, #84]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe ff0f 	bl	8001160 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7fe ff0b 	bl	8001160 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e180      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x23a>
 8002364:	e01a      	b.n	800239c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_OscConfig+0x280>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_RCC_OscConfig+0x280>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe fef5 	bl	8001160 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237a:	f7fe fef1 	bl	8001160 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d903      	bls.n	8002390 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e166      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
 800238c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b92      	ldr	r3, [pc, #584]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a4 	beq.w	80024f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b89      	ldr	r3, [pc, #548]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a88      	ldr	r2, [pc, #544]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b86      	ldr	r3, [pc, #536]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	4b83      	ldr	r3, [pc, #524]	; (80025e0 <HAL_RCC_OscConfig+0x4d4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023de:	4b80      	ldr	r3, [pc, #512]	; (80025e0 <HAL_RCC_OscConfig+0x4d4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7f      	ldr	r2, [pc, #508]	; (80025e0 <HAL_RCC_OscConfig+0x4d4>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe feb9 	bl	8001160 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe feb5 	bl	8001160 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e12a      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002404:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x4d4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x31a>
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a6f      	ldr	r2, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
 8002424:	e02d      	b.n	8002482 <HAL_RCC_OscConfig+0x376>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x33c>
 800242e:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a6a      	ldr	r2, [pc, #424]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
 800243a:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a67      	ldr	r2, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x376>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x35e>
 8002450:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a61      	ldr	r2, [pc, #388]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a5e      	ldr	r2, [pc, #376]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x376>
 800246a:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a5b      	ldr	r2, [pc, #364]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7fe fe69 	bl	8001160 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe fe65 	bl	8001160 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0d8      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x386>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe fe53 	bl	8001160 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fe4f 	bl	8001160 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0c2      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80ae 	beq.w	8002658 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d06d      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d14b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a31      	ldr	r2, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800251a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fe20 	bl	8001160 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fe1c 	bl	8001160 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e091      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	071b      	lsls	r3, r3, #28
 800256e:	491b      	ldr	r1, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fdee 	bl	8001160 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fdea 	bl	8001160 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e05f      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x47c>
 80025a6:	e057      	b.n	8002658 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80025ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fdd4 	bl	8001160 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fdd0 	bl	8001160 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e045      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x4b0>
 80025da:	e03d      	b.n	8002658 <HAL_RCC_OscConfig+0x54c>
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x558>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d030      	beq.n	8002654 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d129      	bne.n	8002654 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d122      	bne.n	8002654 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800261c:	4293      	cmp	r3, r2
 800261e:	d119      	bne.n	8002654 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d10f      	bne.n	8002654 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0d0      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b6a      	ldr	r3, [pc, #424]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d910      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b67      	ldr	r3, [pc, #412]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	4965      	ldr	r1, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d040      	beq.n	800278c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d115      	bne.n	800274a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e073      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06b      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4936      	ldr	r1, [pc, #216]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fd00 	bl	8001160 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe fcfc 	bl	8001160 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e053      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d210      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	4922      	ldr	r1, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1cc>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1d0>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1d4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fc5c 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	080055d4 	.word	0x080055d4
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b094      	sub	sp, #80	; 0x50
 8002846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	2300      	movs	r3, #0
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002850:	2300      	movs	r3, #0
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002858:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d00d      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x40>
 8002864:	2b08      	cmp	r3, #8
 8002866:	f200 80e1 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 800286e:	2b04      	cmp	r3, #4
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3a>
 8002872:	e0db      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002878:	e0db      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287e:	e0d8      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	2200      	movs	r2, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4621      	mov	r1, r4
 80028cc:	1a51      	subs	r1, r2, r1
 80028ce:	6139      	str	r1, [r7, #16]
 80028d0:	4629      	mov	r1, r5
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e4:	4659      	mov	r1, fp
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ee:	4651      	mov	r1, sl
 80028f0:	018a      	lsls	r2, r1, #6
 80028f2:	4651      	mov	r1, sl
 80028f4:	ebb2 0801 	subs.w	r8, r2, r1
 80028f8:	4659      	mov	r1, fp
 80028fa:	eb63 0901 	sbc.w	r9, r3, r1
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800290e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002912:	4690      	mov	r8, r2
 8002914:	4699      	mov	r9, r3
 8002916:	4623      	mov	r3, r4
 8002918:	eb18 0303 	adds.w	r3, r8, r3
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	462b      	mov	r3, r5
 8002920:	eb49 0303 	adc.w	r3, r9, r3
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002932:	4629      	mov	r1, r5
 8002934:	024b      	lsls	r3, r1, #9
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800293c:	4621      	mov	r1, r4
 800293e:	024a      	lsls	r2, r1, #9
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	2200      	movs	r2, #0
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800294c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002950:	f7fd fcce 	bl	80002f0 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	e058      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	4618      	mov	r0, r3
 8002968:	4611      	mov	r1, r2
 800296a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	f04f 0000 	mov.w	r0, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	0159      	lsls	r1, r3, #5
 8002986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298a:	0150      	lsls	r0, r2, #5
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4641      	mov	r1, r8
 8002992:	ebb2 0a01 	subs.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb63 0b01 	sbc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b0:	ebb2 040a 	subs.w	r4, r2, sl
 80029b4:	eb63 050b 	sbc.w	r5, r3, fp
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	00eb      	lsls	r3, r5, #3
 80029c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c6:	00e2      	lsls	r2, r4, #3
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	18e3      	adds	r3, r4, r3
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	464b      	mov	r3, r9
 80029d4:	eb45 0303 	adc.w	r3, r5, r3
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e6:	4629      	mov	r1, r5
 80029e8:	028b      	lsls	r3, r1, #10
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f0:	4621      	mov	r1, r4
 80029f2:	028a      	lsls	r2, r1, #10
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	61fa      	str	r2, [r7, #28]
 8002a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a04:	f7fd fc74 	bl	80002f0 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3750      	adds	r7, #80	; 0x50
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a68:	f7ff fff0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	080055e4 	.word	0x080055e4

08002a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a90:	f7ff ffdc 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0b5b      	lsrs	r3, r3, #13
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	080055e4 	.word	0x080055e4

08002ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002adc:	4b69      	ldr	r3, [pc, #420]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a68      	ldr	r2, [pc, #416]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ae6:	6093      	str	r3, [r2, #8]
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	4964      	ldr	r1, [pc, #400]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d017      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	4959      	ldr	r1, [pc, #356]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d017      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	494a      	ldr	r1, [pc, #296]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b68:	d101      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 808b 	beq.w	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	4a39      	ldr	r2, [pc, #228]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fad0 	bl	8001160 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe facc 	bl	8001160 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e38f      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d035      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d02e      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c22:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d114      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fa94 	bl	8001160 <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fa90 	bl	8001160 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e351      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c7a:	400b      	ands	r3, r1
 8002c7c:	4901      	ldr	r1, [pc, #4]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	0ffffcff 	.word	0x0ffffcff
 8002c90:	4bac      	ldr	r3, [pc, #688]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4aab      	ldr	r2, [pc, #684]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	4ba9      	ldr	r3, [pc, #676]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	49a6      	ldr	r1, [pc, #664]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cba:	4ba2      	ldr	r3, [pc, #648]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc0:	4aa0      	ldr	r2, [pc, #640]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cca:	4b9e      	ldr	r3, [pc, #632]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ccc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	499b      	ldr	r1, [pc, #620]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce8:	4b96      	ldr	r3, [pc, #600]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf6:	4993      	ldr	r1, [pc, #588]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0a:	4b8e      	ldr	r3, [pc, #568]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d18:	498a      	ldr	r1, [pc, #552]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2c:	4b85      	ldr	r3, [pc, #532]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	4982      	ldr	r1, [pc, #520]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4979      	ldr	r1, [pc, #484]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d70:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4971      	ldr	r1, [pc, #452]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d92:	4b6c      	ldr	r3, [pc, #432]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f023 020c 	bic.w	r2, r3, #12
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	4968      	ldr	r1, [pc, #416]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db4:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	4960      	ldr	r1, [pc, #384]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	4957      	ldr	r1, [pc, #348]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002df8:	4b52      	ldr	r3, [pc, #328]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	494f      	ldr	r1, [pc, #316]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4946      	ldr	r1, [pc, #280]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e3c:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	493e      	ldr	r1, [pc, #248]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e5e:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6c:	4935      	ldr	r1, [pc, #212]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e80:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8e:	492d      	ldr	r1, [pc, #180]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d011      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb0:	4924      	ldr	r1, [pc, #144]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	4914      	ldr	r1, [pc, #80]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f14:	490b      	ldr	r1, [pc, #44]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00f      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f38:	4902      	ldr	r1, [pc, #8]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f40:	e002      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f54:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	4986      	ldr	r1, [pc, #536]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f78:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	497d      	ldr	r1, [pc, #500]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d006      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80d6 	beq.w	8003150 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fa4:	4b76      	ldr	r3, [pc, #472]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a75      	ldr	r2, [pc, #468]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb0:	f7fe f8d6 	bl	8001160 <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fb8:	f7fe f8d2 	bl	8001160 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e195      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fca:	4b6d      	ldr	r3, [pc, #436]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d021      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ff8:	4b61      	ldr	r3, [pc, #388]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffe:	0e1b      	lsrs	r3, r3, #24
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	019a      	lsls	r2, r3, #6
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	071b      	lsls	r3, r3, #28
 800301e:	4958      	ldr	r1, [pc, #352]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d004      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02e      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003050:	d129      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003052:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003060:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003066:	0f1b      	lsrs	r3, r3, #28
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	019a      	lsls	r2, r3, #6
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	493e      	ldr	r1, [pc, #248]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800308e:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003094:	f023 021f 	bic.w	r2, r3, #31
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	3b01      	subs	r3, #1
 800309e:	4938      	ldr	r1, [pc, #224]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01d      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030b2:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b8:	0e1b      	lsrs	r3, r3, #24
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c6:	0f1b      	lsrs	r3, r3, #28
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	019a      	lsls	r2, r3, #6
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	061b      	lsls	r3, r3, #24
 80030e0:	431a      	orrs	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	071b      	lsls	r3, r3, #28
 80030e6:	4926      	ldr	r1, [pc, #152]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	019a      	lsls	r2, r3, #6
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	491a      	ldr	r1, [pc, #104]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312a:	f7fe f819 	bl	8001160 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003132:	f7fe f815 	bl	8001160 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	; 0x64
 800313e:	d901      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e0d8      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b01      	cmp	r3, #1
 8003154:	f040 80ce 	bne.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a08      	ldr	r2, [pc, #32]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd fffc 	bl	8001160 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800316a:	e00b      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800316c:	f7fd fff8 	bl	8001160 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d904      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0bb      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003190:	d0ec      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d12a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ba:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	0f1b      	lsrs	r3, r3, #28
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	071b      	lsls	r3, r3, #28
 80031ee:	4944      	ldr	r1, [pc, #272]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031f6:	4b42      	ldr	r3, [pc, #264]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	493d      	ldr	r1, [pc, #244]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d022      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003224:	d11d      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003234:	4b32      	ldr	r3, [pc, #200]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4929      	ldr	r1, [pc, #164]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d028      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	019a      	lsls	r2, r3, #6
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	4917      	ldr	r1, [pc, #92]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	4911      	ldr	r1, [pc, #68]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd ff48 	bl	8001160 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032d4:	f7fd ff44 	bl	8001160 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e007      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f2:	d1ef      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e049      	b.n	80033aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fd26 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 faca 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e054      	b.n	8003476 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d022      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d01d      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_TIM_Base_Start_IT+0xd4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d018      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_TIM_Base_Start_IT+0xd8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_TIM_Base_Start_IT+0xdc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00e      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_TIM_Base_Start_IT+0xe0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d009      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_TIM_Base_Start_IT+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_TIM_Base_Start_IT+0xe8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d115      	bne.n	8003460 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_TIM_Base_Start_IT+0xec>)
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d015      	beq.n	8003472 <HAL_TIM_Base_Start_IT+0xbe>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d011      	beq.n	8003472 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e008      	b.n	8003472 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e000      	b.n	8003474 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40000c00 	.word	0x40000c00
 8003494:	40010400 	.word	0x40010400
 8003498:	40014000 	.word	0x40014000
 800349c:	40001800 	.word	0x40001800
 80034a0:	00010007 	.word	0x00010007

080034a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0202 	mvn.w	r2, #2
 80034d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9da 	bl	80038a0 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9cc 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9dd 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0204 	mvn.w	r2, #4
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9b0 	bl	80038a0 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9a2 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9b3 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b08      	cmp	r3, #8
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0208 	mvn.w	r2, #8
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f986 	bl	80038a0 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f978 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f989 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0210 	mvn.w	r2, #16
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2208      	movs	r2, #8
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f95c 	bl	80038a0 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f94e 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f95f 	bl	80038b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0201 	mvn.w	r2, #1
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f928 	bl	8003878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d10e      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d107      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fb16 	bl	8003c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fb09 	bl	8003c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d10e      	bne.n	80036ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d107      	bne.n	80036ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f90d 	bl	80038c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d10e      	bne.n	80036da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d107      	bne.n	80036da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0220 	mvn.w	r2, #32
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fac9 	bl	8003c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0b4      	b.n	800386a <HAL_TIM_ConfigClockSource+0x186>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4b56      	ldr	r3, [pc, #344]	; (8003874 <HAL_TIM_ConfigClockSource+0x190>)
 800371c:	4013      	ands	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d03e      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xd4>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	f200 8087 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	f000 8086 	beq.w	8003856 <HAL_TIM_ConfigClockSource+0x172>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d87f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d01a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xa6>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d87b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d050      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x11a>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d877      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d03c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xfa>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d873      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d058      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x13a>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d86f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d064      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d86b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d060      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d867      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d05a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	e062      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f000 f9b9 	bl	8003b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04f      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f000 f9a2 	bl	8003b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e03c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f916 	bl	8003a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f96f 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 80037fc:	e02c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f935 	bl	8003a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	; 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f95f 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 800381c:	e01c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 f8f6 	bl	8003a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f94f 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 800383c:	e00c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 f946 	bl	8003ada <TIM_ITRx_SetConfig>
      break;
 800384e:	e003      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e000      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	fffeff88 	.word	0xfffeff88

08003878 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a40      	ldr	r2, [pc, #256]	; (80039f0 <TIM_Base_SetConfig+0x114>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a3d      	ldr	r2, [pc, #244]	; (80039f4 <TIM_Base_SetConfig+0x118>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <TIM_Base_SetConfig+0x11c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3b      	ldr	r2, [pc, #236]	; (80039fc <TIM_Base_SetConfig+0x120>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <TIM_Base_SetConfig+0x124>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <TIM_Base_SetConfig+0x114>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d027      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <TIM_Base_SetConfig+0x118>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d023      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <TIM_Base_SetConfig+0x11c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <TIM_Base_SetConfig+0x120>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <TIM_Base_SetConfig+0x124>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d017      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a28      	ldr	r2, [pc, #160]	; (8003a04 <TIM_Base_SetConfig+0x128>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <TIM_Base_SetConfig+0x12c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <TIM_Base_SetConfig+0x130>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <TIM_Base_SetConfig+0x134>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <TIM_Base_SetConfig+0x138>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a23      	ldr	r2, [pc, #140]	; (8003a18 <TIM_Base_SetConfig+0x13c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <TIM_Base_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0xf8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <TIM_Base_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	615a      	str	r2, [r3, #20]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40000c00 	.word	0x40000c00
 8003a00:	40010400 	.word	0x40010400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800
 8003a10:	40001800 	.word	0x40001800
 8003a14:	40001c00 	.word	0x40001c00
 8003a18:	40002000 	.word	0x40002000

08003a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f023 030a 	bic.w	r3, r3, #10
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b087      	sub	sp, #28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0210 	bic.w	r2, r3, #16
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	031b      	lsls	r3, r3, #12
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f043 0307 	orr.w	r3, r3, #7
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e06d      	b.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a30      	ldr	r2, [pc, #192]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2f      	ldr	r2, [pc, #188]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ba2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a20      	ldr	r2, [pc, #128]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d022      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d01d      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d018      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00e      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10c      	bne.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40010400 	.word	0x40010400
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40001800 	.word	0x40001800

08003c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e040      	b.n	8003d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd f8c6 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8b0 	bl	8003e4c <UART_SetConfig>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e022      	b.n	8003d3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fb08 	bl	8004314 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb8f 	bl	8004458 <UART_CheckIdleState>
 8003d3a:	4603      	mov	r3, r0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d171      	bne.n	8003e40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_UART_Transmit+0x24>
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e06a      	b.n	8003e42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd f9f1 	bl	8001160 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	88fa      	ldrh	r2, [r7, #6]
 8003d84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d98:	d108      	bne.n	8003dac <HAL_UART_Transmit+0x68>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e003      	b.n	8003db4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003db4:	e02c      	b.n	8003e10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fb96 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e038      	b.n	8003e42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10b      	bne.n	8003dee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3302      	adds	r3, #2
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e007      	b.n	8003dfe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1cc      	bne.n	8003db6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fb63 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e005      	b.n	8003e42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4ba6      	ldr	r3, [pc, #664]	; (8004110 <UART_SetConfig+0x2c4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a94      	ldr	r2, [pc, #592]	; (8004114 <UART_SetConfig+0x2c8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d120      	bne.n	8003f0a <UART_SetConfig+0xbe>
 8003ec8:	4b93      	ldr	r3, [pc, #588]	; (8004118 <UART_SetConfig+0x2cc>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d816      	bhi.n	8003f04 <UART_SetConfig+0xb8>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <UART_SetConfig+0x90>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003ef9 	.word	0x08003ef9
 8003ee4:	08003ef3 	.word	0x08003ef3
 8003ee8:	08003eff 	.word	0x08003eff
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e150      	b.n	8004194 <UART_SetConfig+0x348>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e14d      	b.n	8004194 <UART_SetConfig+0x348>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e14a      	b.n	8004194 <UART_SetConfig+0x348>
 8003efe:	2308      	movs	r3, #8
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e147      	b.n	8004194 <UART_SetConfig+0x348>
 8003f04:	2310      	movs	r3, #16
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e144      	b.n	8004194 <UART_SetConfig+0x348>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a83      	ldr	r2, [pc, #524]	; (800411c <UART_SetConfig+0x2d0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d132      	bne.n	8003f7a <UART_SetConfig+0x12e>
 8003f14:	4b80      	ldr	r3, [pc, #512]	; (8004118 <UART_SetConfig+0x2cc>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d828      	bhi.n	8003f74 <UART_SetConfig+0x128>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0xdc>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f75 	.word	0x08003f75
 8003f30:	08003f75 	.word	0x08003f75
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f69 	.word	0x08003f69
 8003f3c:	08003f75 	.word	0x08003f75
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f75 	.word	0x08003f75
 8003f48:	08003f63 	.word	0x08003f63
 8003f4c:	08003f75 	.word	0x08003f75
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f75 	.word	0x08003f75
 8003f58:	08003f6f 	.word	0x08003f6f
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e118      	b.n	8004194 <UART_SetConfig+0x348>
 8003f62:	2302      	movs	r3, #2
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e115      	b.n	8004194 <UART_SetConfig+0x348>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e112      	b.n	8004194 <UART_SetConfig+0x348>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e10f      	b.n	8004194 <UART_SetConfig+0x348>
 8003f74:	2310      	movs	r3, #16
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e10c      	b.n	8004194 <UART_SetConfig+0x348>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a68      	ldr	r2, [pc, #416]	; (8004120 <UART_SetConfig+0x2d4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d120      	bne.n	8003fc6 <UART_SetConfig+0x17a>
 8003f84:	4b64      	ldr	r3, [pc, #400]	; (8004118 <UART_SetConfig+0x2cc>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f8e:	2b30      	cmp	r3, #48	; 0x30
 8003f90:	d013      	beq.n	8003fba <UART_SetConfig+0x16e>
 8003f92:	2b30      	cmp	r3, #48	; 0x30
 8003f94:	d814      	bhi.n	8003fc0 <UART_SetConfig+0x174>
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d009      	beq.n	8003fae <UART_SetConfig+0x162>
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d810      	bhi.n	8003fc0 <UART_SetConfig+0x174>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <UART_SetConfig+0x15c>
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x168>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x174>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e0f2      	b.n	8004194 <UART_SetConfig+0x348>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e0ef      	b.n	8004194 <UART_SetConfig+0x348>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e0ec      	b.n	8004194 <UART_SetConfig+0x348>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e0e9      	b.n	8004194 <UART_SetConfig+0x348>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e0e6      	b.n	8004194 <UART_SetConfig+0x348>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a56      	ldr	r2, [pc, #344]	; (8004124 <UART_SetConfig+0x2d8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d120      	bne.n	8004012 <UART_SetConfig+0x1c6>
 8003fd0:	4b51      	ldr	r3, [pc, #324]	; (8004118 <UART_SetConfig+0x2cc>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fda:	2bc0      	cmp	r3, #192	; 0xc0
 8003fdc:	d013      	beq.n	8004006 <UART_SetConfig+0x1ba>
 8003fde:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe0:	d814      	bhi.n	800400c <UART_SetConfig+0x1c0>
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d009      	beq.n	8003ffa <UART_SetConfig+0x1ae>
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d810      	bhi.n	800400c <UART_SetConfig+0x1c0>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <UART_SetConfig+0x1a8>
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d006      	beq.n	8004000 <UART_SetConfig+0x1b4>
 8003ff2:	e00b      	b.n	800400c <UART_SetConfig+0x1c0>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e0cc      	b.n	8004194 <UART_SetConfig+0x348>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e0c9      	b.n	8004194 <UART_SetConfig+0x348>
 8004000:	2304      	movs	r3, #4
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e0c6      	b.n	8004194 <UART_SetConfig+0x348>
 8004006:	2308      	movs	r3, #8
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e0c3      	b.n	8004194 <UART_SetConfig+0x348>
 800400c:	2310      	movs	r3, #16
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e0c0      	b.n	8004194 <UART_SetConfig+0x348>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a44      	ldr	r2, [pc, #272]	; (8004128 <UART_SetConfig+0x2dc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d125      	bne.n	8004068 <UART_SetConfig+0x21c>
 800401c:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <UART_SetConfig+0x2cc>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402a:	d017      	beq.n	800405c <UART_SetConfig+0x210>
 800402c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004030:	d817      	bhi.n	8004062 <UART_SetConfig+0x216>
 8004032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004036:	d00b      	beq.n	8004050 <UART_SetConfig+0x204>
 8004038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403c:	d811      	bhi.n	8004062 <UART_SetConfig+0x216>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <UART_SetConfig+0x1fe>
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d006      	beq.n	8004056 <UART_SetConfig+0x20a>
 8004048:	e00b      	b.n	8004062 <UART_SetConfig+0x216>
 800404a:	2300      	movs	r3, #0
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e0a1      	b.n	8004194 <UART_SetConfig+0x348>
 8004050:	2302      	movs	r3, #2
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e09e      	b.n	8004194 <UART_SetConfig+0x348>
 8004056:	2304      	movs	r3, #4
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e09b      	b.n	8004194 <UART_SetConfig+0x348>
 800405c:	2308      	movs	r3, #8
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e098      	b.n	8004194 <UART_SetConfig+0x348>
 8004062:	2310      	movs	r3, #16
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e095      	b.n	8004194 <UART_SetConfig+0x348>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2f      	ldr	r2, [pc, #188]	; (800412c <UART_SetConfig+0x2e0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d125      	bne.n	80040be <UART_SetConfig+0x272>
 8004072:	4b29      	ldr	r3, [pc, #164]	; (8004118 <UART_SetConfig+0x2cc>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800407c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004080:	d017      	beq.n	80040b2 <UART_SetConfig+0x266>
 8004082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004086:	d817      	bhi.n	80040b8 <UART_SetConfig+0x26c>
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408c:	d00b      	beq.n	80040a6 <UART_SetConfig+0x25a>
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d811      	bhi.n	80040b8 <UART_SetConfig+0x26c>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <UART_SetConfig+0x254>
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d006      	beq.n	80040ac <UART_SetConfig+0x260>
 800409e:	e00b      	b.n	80040b8 <UART_SetConfig+0x26c>
 80040a0:	2301      	movs	r3, #1
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e076      	b.n	8004194 <UART_SetConfig+0x348>
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
 80040aa:	e073      	b.n	8004194 <UART_SetConfig+0x348>
 80040ac:	2304      	movs	r3, #4
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e070      	b.n	8004194 <UART_SetConfig+0x348>
 80040b2:	2308      	movs	r3, #8
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e06d      	b.n	8004194 <UART_SetConfig+0x348>
 80040b8:	2310      	movs	r3, #16
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e06a      	b.n	8004194 <UART_SetConfig+0x348>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <UART_SetConfig+0x2e4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d138      	bne.n	800413a <UART_SetConfig+0x2ee>
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <UART_SetConfig+0x2cc>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d6:	d017      	beq.n	8004108 <UART_SetConfig+0x2bc>
 80040d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040dc:	d82a      	bhi.n	8004134 <UART_SetConfig+0x2e8>
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e2:	d00b      	beq.n	80040fc <UART_SetConfig+0x2b0>
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e8:	d824      	bhi.n	8004134 <UART_SetConfig+0x2e8>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <UART_SetConfig+0x2aa>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d006      	beq.n	8004102 <UART_SetConfig+0x2b6>
 80040f4:	e01e      	b.n	8004134 <UART_SetConfig+0x2e8>
 80040f6:	2300      	movs	r3, #0
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e04b      	b.n	8004194 <UART_SetConfig+0x348>
 80040fc:	2302      	movs	r3, #2
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e048      	b.n	8004194 <UART_SetConfig+0x348>
 8004102:	2304      	movs	r3, #4
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e045      	b.n	8004194 <UART_SetConfig+0x348>
 8004108:	2308      	movs	r3, #8
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e042      	b.n	8004194 <UART_SetConfig+0x348>
 800410e:	bf00      	nop
 8004110:	efff69f3 	.word	0xefff69f3
 8004114:	40011000 	.word	0x40011000
 8004118:	40023800 	.word	0x40023800
 800411c:	40004400 	.word	0x40004400
 8004120:	40004800 	.word	0x40004800
 8004124:	40004c00 	.word	0x40004c00
 8004128:	40005000 	.word	0x40005000
 800412c:	40011400 	.word	0x40011400
 8004130:	40007800 	.word	0x40007800
 8004134:	2310      	movs	r3, #16
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e02c      	b.n	8004194 <UART_SetConfig+0x348>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a72      	ldr	r2, [pc, #456]	; (8004308 <UART_SetConfig+0x4bc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d125      	bne.n	8004190 <UART_SetConfig+0x344>
 8004144:	4b71      	ldr	r3, [pc, #452]	; (800430c <UART_SetConfig+0x4c0>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800414e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004152:	d017      	beq.n	8004184 <UART_SetConfig+0x338>
 8004154:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004158:	d817      	bhi.n	800418a <UART_SetConfig+0x33e>
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d00b      	beq.n	8004178 <UART_SetConfig+0x32c>
 8004160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004164:	d811      	bhi.n	800418a <UART_SetConfig+0x33e>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <UART_SetConfig+0x326>
 800416a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416e:	d006      	beq.n	800417e <UART_SetConfig+0x332>
 8004170:	e00b      	b.n	800418a <UART_SetConfig+0x33e>
 8004172:	2300      	movs	r3, #0
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e00d      	b.n	8004194 <UART_SetConfig+0x348>
 8004178:	2302      	movs	r3, #2
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e00a      	b.n	8004194 <UART_SetConfig+0x348>
 800417e:	2304      	movs	r3, #4
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e007      	b.n	8004194 <UART_SetConfig+0x348>
 8004184:	2308      	movs	r3, #8
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e004      	b.n	8004194 <UART_SetConfig+0x348>
 800418a:	2310      	movs	r3, #16
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e001      	b.n	8004194 <UART_SetConfig+0x348>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d15b      	bne.n	8004256 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d828      	bhi.n	80041f6 <UART_SetConfig+0x3aa>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x360>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041e1 	.word	0x080041e1
 80041b8:	080041f7 	.word	0x080041f7
 80041bc:	080041e7 	.word	0x080041e7
 80041c0:	080041f7 	.word	0x080041f7
 80041c4:	080041f7 	.word	0x080041f7
 80041c8:	080041f7 	.word	0x080041f7
 80041cc:	080041ef 	.word	0x080041ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7fe fc48 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80041d4:	61b8      	str	r0, [r7, #24]
        break;
 80041d6:	e013      	b.n	8004200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fc58 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 80041dc:	61b8      	str	r0, [r7, #24]
        break;
 80041de:	e00f      	b.n	8004200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e0:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <UART_SetConfig+0x4c4>)
 80041e2:	61bb      	str	r3, [r7, #24]
        break;
 80041e4:	e00c      	b.n	8004200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e6:	f7fe fb2b 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80041ea:	61b8      	str	r0, [r7, #24]
        break;
 80041ec:	e008      	b.n	8004200 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f2:	61bb      	str	r3, [r7, #24]
        break;
 80041f4:	e004      	b.n	8004200 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77bb      	strb	r3, [r7, #30]
        break;
 80041fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d074      	beq.n	80042f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0f      	cmp	r3, #15
 8004220:	d916      	bls.n	8004250 <UART_SetConfig+0x404>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d212      	bcs.n	8004250 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f023 030f 	bic.w	r3, r3, #15
 8004232:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	b29a      	uxth	r2, r3
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	4313      	orrs	r3, r2
 8004244:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	89fa      	ldrh	r2, [r7, #14]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	e04f      	b.n	80042f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	77bb      	strb	r3, [r7, #30]
 8004254:	e04c      	b.n	80042f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d828      	bhi.n	80042ae <UART_SetConfig+0x462>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0x418>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004289 	.word	0x08004289
 8004268:	08004291 	.word	0x08004291
 800426c:	08004299 	.word	0x08004299
 8004270:	080042af 	.word	0x080042af
 8004274:	0800429f 	.word	0x0800429f
 8004278:	080042af 	.word	0x080042af
 800427c:	080042af 	.word	0x080042af
 8004280:	080042af 	.word	0x080042af
 8004284:	080042a7 	.word	0x080042a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004288:	f7fe fbec 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 800428c:	61b8      	str	r0, [r7, #24]
        break;
 800428e:	e013      	b.n	80042b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004290:	f7fe fbfc 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 8004294:	61b8      	str	r0, [r7, #24]
        break;
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <UART_SetConfig+0x4c4>)
 800429a:	61bb      	str	r3, [r7, #24]
        break;
 800429c:	e00c      	b.n	80042b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800429e:	f7fe facf 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80042a2:	61b8      	str	r0, [r7, #24]
        break;
 80042a4:	e008      	b.n	80042b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042aa:	61bb      	str	r3, [r7, #24]
        break;
 80042ac:	e004      	b.n	80042b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	77bb      	strb	r3, [r7, #30]
        break;
 80042b6:	bf00      	nop
    }

    if (pclk != 0U)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d018      	beq.n	80042f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	085a      	lsrs	r2, r3, #1
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	441a      	add	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d909      	bls.n	80042ec <UART_SetConfig+0x4a0>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d205      	bcs.n	80042ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	e001      	b.n	80042f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40007c00 	.word	0x40007c00
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400

08004314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01a      	beq.n	800442a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004412:	d10a      	bne.n	800442a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004468:	f7fc fe7a 	bl	8001160 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b08      	cmp	r3, #8
 800447a:	d10e      	bne.n	800449a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f831 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e027      	b.n	80044ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d10e      	bne.n	80044c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f81b 	bl	80044f2 <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e011      	b.n	80044ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b09c      	sub	sp, #112	; 0x70
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004502:	e0a7      	b.n	8004654 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	f000 80a3 	beq.w	8004654 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fc fe27 	bl	8001160 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <UART_WaitOnFlagUntilTimeout+0x32>
 800451e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13f      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004534:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004538:	667b      	str	r3, [r7, #100]	; 0x64
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004544:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e6      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3308      	adds	r3, #8
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	663b      	str	r3, [r7, #96]	; 0x60
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004576:	64ba      	str	r2, [r7, #72]	; 0x48
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800457c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e068      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d050      	beq.n	8004654 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c0:	d148      	bne.n	8004654 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
 80045ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e6      	bne.n	80045cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	613b      	str	r3, [r7, #16]
   return(result);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	66bb      	str	r3, [r7, #104]	; 0x68
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3308      	adds	r3, #8
 800461c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800461e:	623a      	str	r2, [r7, #32]
 8004620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	69f9      	ldr	r1, [r7, #28]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	61bb      	str	r3, [r7, #24]
   return(result);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e5      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e010      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4013      	ands	r3, r2
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	429a      	cmp	r2, r3
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	429a      	cmp	r2, r3
 8004670:	f43f af48 	beq.w	8004504 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3770      	adds	r7, #112	; 0x70
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004680:	b084      	sub	sp, #16
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	f107 001c 	add.w	r0, r7, #28
 800468e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	2b01      	cmp	r3, #1
 8004696:	d120      	bne.n	80046da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <USB_CoreInit+0xac>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa96 	bl	8004c00 <USB_CoreReset>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e010      	b.n	80046fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa8a 	bl	8004c00 <USB_CoreReset>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f043 0206 	orr.w	r2, r3, #6
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004726:	b004      	add	sp, #16
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	ffbdffbf 	.word	0xffbdffbf

08004730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 0201 	bic.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d115      	bne.n	80047a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc fcf9 	bl	8001178 <HAL_Delay>
      ms++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa29 	bl	8004be4 <USB_GetMode>
 8004792:	4603      	mov	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d01e      	beq.n	80047d6 <USB_SetCurrentMode+0x84>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b31      	cmp	r3, #49	; 0x31
 800479c:	d9f0      	bls.n	8004780 <USB_SetCurrentMode+0x2e>
 800479e:	e01a      	b.n	80047d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d115      	bne.n	80047d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047b2:	2001      	movs	r0, #1
 80047b4:	f7fc fce0 	bl	8001178 <HAL_Delay>
      ms++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa10 	bl	8004be4 <USB_GetMode>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <USB_SetCurrentMode+0x84>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b31      	cmp	r3, #49	; 0x31
 80047ce:	d9f0      	bls.n	80047b2 <USB_SetCurrentMode+0x60>
 80047d0:	e001      	b.n	80047d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e005      	b.n	80047e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b32      	cmp	r3, #50	; 0x32
 80047da:	d101      	bne.n	80047e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047ec:	b084      	sub	sp, #16
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b086      	sub	sp, #24
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e009      	b.n	8004820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3340      	adds	r3, #64	; 0x40
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	2200      	movs	r2, #0
 8004818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3301      	adds	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b0e      	cmp	r3, #14
 8004824:	d9f2      	bls.n	800480c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11c      	bne.n	8004866 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483a:	f043 0302 	orr.w	r3, r3, #2
 800483e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e005      	b.n	8004872 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004884:	4619      	mov	r1, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	461a      	mov	r2, r3
 800488e:	680b      	ldr	r3, [r1, #0]
 8004890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b01      	cmp	r3, #1
 8004896:	d10c      	bne.n	80048b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800489e:	2100      	movs	r1, #0
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f965 	bl	8004b70 <USB_SetDevSpeed>
 80048a6:	e008      	b.n	80048ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048a8:	2101      	movs	r1, #1
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f960 	bl	8004b70 <USB_SetDevSpeed>
 80048b0:	e003      	b.n	80048ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048b2:	2103      	movs	r1, #3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f95b 	bl	8004b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048ba:	2110      	movs	r1, #16
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8f3 	bl	8004aa8 <USB_FlushTxFifo>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f91f 	bl	8004b10 <USB_FlushRxFifo>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	461a      	mov	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	461a      	mov	r2, r3
 80048f0:	2300      	movs	r3, #0
 80048f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e043      	b.n	800498e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491c:	d118      	bne.n	8004950 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	461a      	mov	r2, r3
 8004932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e013      	b.n	8004962 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	461a      	mov	r2, r3
 8004948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e008      	b.n	8004962 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	461a      	mov	r2, r3
 800495e:	2300      	movs	r3, #0
 8004960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	461a      	mov	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	3301      	adds	r3, #1
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d3b7      	bcc.n	8004906 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e043      	b.n	8004a24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b2:	d118      	bne.n	80049e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e013      	b.n	80049f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e008      	b.n	80049f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	2300      	movs	r3, #0
 8004a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3301      	adds	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3b7      	bcc.n	800499c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f043 0210 	orr.w	r2, r3, #16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <USB_DevInit+0x2b4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f043 0208 	orr.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <USB_DevInit+0x2b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr
 8004aa0:	803c3800 	.word	0x803c3800
 8004aa4:	40000004 	.word	0x40000004

08004aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <USB_FlushTxFifo+0x64>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e01b      	b.n	8004b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	daf2      	bge.n	8004ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	019b      	lsls	r3, r3, #6
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <USB_FlushTxFifo+0x64>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e006      	b.n	8004b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d0f0      	beq.n	8004ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a11      	ldr	r2, [pc, #68]	; (8004b6c <USB_FlushRxFifo+0x5c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e018      	b.n	8004b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	daf2      	bge.n	8004b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <USB_FlushRxFifo+0x5c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e006      	b.n	8004b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d0f0      	beq.n	8004b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	00030d40 	.word	0x00030d40

08004b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bbc:	f023 0303 	bic.w	r3, r3, #3
 8004bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <USB_CoreReset+0x64>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e01b      	b.n	8004c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	daf2      	bge.n	8004c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <USB_CoreReset+0x64>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e006      	b.n	8004c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d0f0      	beq.n	8004c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	00030d40 	.word	0x00030d40

08004c68 <__errno>:
 8004c68:	4b01      	ldr	r3, [pc, #4]	; (8004c70 <__errno+0x8>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	2000000c 	.word	0x2000000c

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	4d0d      	ldr	r5, [pc, #52]	; (8004cac <__libc_init_array+0x38>)
 8004c78:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7a:	1b64      	subs	r4, r4, r5
 8004c7c:	10a4      	asrs	r4, r4, #2
 8004c7e:	2600      	movs	r6, #0
 8004c80:	42a6      	cmp	r6, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	4d0b      	ldr	r5, [pc, #44]	; (8004cb4 <__libc_init_array+0x40>)
 8004c86:	4c0c      	ldr	r4, [pc, #48]	; (8004cb8 <__libc_init_array+0x44>)
 8004c88:	f000 fc8e 	bl	80055a8 <_init>
 8004c8c:	1b64      	subs	r4, r4, r5
 8004c8e:	10a4      	asrs	r4, r4, #2
 8004c90:	2600      	movs	r6, #0
 8004c92:	42a6      	cmp	r6, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9c:	4798      	blx	r3
 8004c9e:	3601      	adds	r6, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca6:	4798      	blx	r3
 8004ca8:	3601      	adds	r6, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	08005628 	.word	0x08005628
 8004cb0:	08005628 	.word	0x08005628
 8004cb4:	08005628 	.word	0x08005628
 8004cb8:	0800562c 	.word	0x0800562c

08004cbc <memset>:
 8004cbc:	4402      	add	r2, r0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <siprintf>:
 8004ccc:	b40e      	push	{r1, r2, r3}
 8004cce:	b500      	push	{lr}
 8004cd0:	b09c      	sub	sp, #112	; 0x70
 8004cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd4:	9002      	str	r0, [sp, #8]
 8004cd6:	9006      	str	r0, [sp, #24]
 8004cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cdc:	4809      	ldr	r0, [pc, #36]	; (8004d04 <siprintf+0x38>)
 8004cde:	9107      	str	r1, [sp, #28]
 8004ce0:	9104      	str	r1, [sp, #16]
 8004ce2:	4909      	ldr	r1, [pc, #36]	; (8004d08 <siprintf+0x3c>)
 8004ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce8:	9105      	str	r1, [sp, #20]
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	a902      	add	r1, sp, #8
 8004cf0:	f000 f868 	bl	8004dc4 <_svfiprintf_r>
 8004cf4:	9b02      	ldr	r3, [sp, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	b01c      	add	sp, #112	; 0x70
 8004cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d00:	b003      	add	sp, #12
 8004d02:	4770      	bx	lr
 8004d04:	2000000c 	.word	0x2000000c
 8004d08:	ffff0208 	.word	0xffff0208

08004d0c <__ssputs_r>:
 8004d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	688e      	ldr	r6, [r1, #8]
 8004d12:	429e      	cmp	r6, r3
 8004d14:	4682      	mov	sl, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	4690      	mov	r8, r2
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	d838      	bhi.n	8004d90 <__ssputs_r+0x84>
 8004d1e:	898a      	ldrh	r2, [r1, #12]
 8004d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d24:	d032      	beq.n	8004d8c <__ssputs_r+0x80>
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	6909      	ldr	r1, [r1, #16]
 8004d2a:	eba5 0901 	sub.w	r9, r5, r1
 8004d2e:	6965      	ldr	r5, [r4, #20]
 8004d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d38:	3301      	adds	r3, #1
 8004d3a:	444b      	add	r3, r9
 8004d3c:	106d      	asrs	r5, r5, #1
 8004d3e:	429d      	cmp	r5, r3
 8004d40:	bf38      	it	cc
 8004d42:	461d      	movcc	r5, r3
 8004d44:	0553      	lsls	r3, r2, #21
 8004d46:	d531      	bpl.n	8004dac <__ssputs_r+0xa0>
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f000 fb63 	bl	8005414 <_malloc_r>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	b950      	cbnz	r0, 8004d68 <__ssputs_r+0x5c>
 8004d52:	230c      	movs	r3, #12
 8004d54:	f8ca 3000 	str.w	r3, [sl]
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d68:	6921      	ldr	r1, [r4, #16]
 8004d6a:	464a      	mov	r2, r9
 8004d6c:	f000 fabe 	bl	80052ec <memcpy>
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7a:	81a3      	strh	r3, [r4, #12]
 8004d7c:	6126      	str	r6, [r4, #16]
 8004d7e:	6165      	str	r5, [r4, #20]
 8004d80:	444e      	add	r6, r9
 8004d82:	eba5 0509 	sub.w	r5, r5, r9
 8004d86:	6026      	str	r6, [r4, #0]
 8004d88:	60a5      	str	r5, [r4, #8]
 8004d8a:	463e      	mov	r6, r7
 8004d8c:	42be      	cmp	r6, r7
 8004d8e:	d900      	bls.n	8004d92 <__ssputs_r+0x86>
 8004d90:	463e      	mov	r6, r7
 8004d92:	6820      	ldr	r0, [r4, #0]
 8004d94:	4632      	mov	r2, r6
 8004d96:	4641      	mov	r1, r8
 8004d98:	f000 fab6 	bl	8005308 <memmove>
 8004d9c:	68a3      	ldr	r3, [r4, #8]
 8004d9e:	1b9b      	subs	r3, r3, r6
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	4433      	add	r3, r6
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	2000      	movs	r0, #0
 8004daa:	e7db      	b.n	8004d64 <__ssputs_r+0x58>
 8004dac:	462a      	mov	r2, r5
 8004dae:	f000 fba5 	bl	80054fc <_realloc_r>
 8004db2:	4606      	mov	r6, r0
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d1e1      	bne.n	8004d7c <__ssputs_r+0x70>
 8004db8:	6921      	ldr	r1, [r4, #16]
 8004dba:	4650      	mov	r0, sl
 8004dbc:	f000 fabe 	bl	800533c <_free_r>
 8004dc0:	e7c7      	b.n	8004d52 <__ssputs_r+0x46>
	...

08004dc4 <_svfiprintf_r>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	4698      	mov	r8, r3
 8004dca:	898b      	ldrh	r3, [r1, #12]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	b09d      	sub	sp, #116	; 0x74
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	d50e      	bpl.n	8004df6 <_svfiprintf_r+0x32>
 8004dd8:	690b      	ldr	r3, [r1, #16]
 8004dda:	b963      	cbnz	r3, 8004df6 <_svfiprintf_r+0x32>
 8004ddc:	2140      	movs	r1, #64	; 0x40
 8004dde:	f000 fb19 	bl	8005414 <_malloc_r>
 8004de2:	6028      	str	r0, [r5, #0]
 8004de4:	6128      	str	r0, [r5, #16]
 8004de6:	b920      	cbnz	r0, 8004df2 <_svfiprintf_r+0x2e>
 8004de8:	230c      	movs	r3, #12
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e0d1      	b.n	8004f96 <_svfiprintf_r+0x1d2>
 8004df2:	2340      	movs	r3, #64	; 0x40
 8004df4:	616b      	str	r3, [r5, #20]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e04:	2330      	movs	r3, #48	; 0x30
 8004e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fb0 <_svfiprintf_r+0x1ec>
 8004e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e0e:	f04f 0901 	mov.w	r9, #1
 8004e12:	4623      	mov	r3, r4
 8004e14:	469a      	mov	sl, r3
 8004e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1a:	b10a      	cbz	r2, 8004e20 <_svfiprintf_r+0x5c>
 8004e1c:	2a25      	cmp	r2, #37	; 0x25
 8004e1e:	d1f9      	bne.n	8004e14 <_svfiprintf_r+0x50>
 8004e20:	ebba 0b04 	subs.w	fp, sl, r4
 8004e24:	d00b      	beq.n	8004e3e <_svfiprintf_r+0x7a>
 8004e26:	465b      	mov	r3, fp
 8004e28:	4622      	mov	r2, r4
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ff6d 	bl	8004d0c <__ssputs_r>
 8004e32:	3001      	adds	r0, #1
 8004e34:	f000 80aa 	beq.w	8004f8c <_svfiprintf_r+0x1c8>
 8004e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3a:	445a      	add	r2, fp
 8004e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80a2 	beq.w	8004f8c <_svfiprintf_r+0x1c8>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e52:	f10a 0a01 	add.w	sl, sl, #1
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	9307      	str	r3, [sp, #28]
 8004e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e60:	4654      	mov	r4, sl
 8004e62:	2205      	movs	r2, #5
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	4851      	ldr	r0, [pc, #324]	; (8004fb0 <_svfiprintf_r+0x1ec>)
 8004e6a:	f7fb f9f1 	bl	8000250 <memchr>
 8004e6e:	9a04      	ldr	r2, [sp, #16]
 8004e70:	b9d8      	cbnz	r0, 8004eaa <_svfiprintf_r+0xe6>
 8004e72:	06d0      	lsls	r0, r2, #27
 8004e74:	bf44      	itt	mi
 8004e76:	2320      	movmi	r3, #32
 8004e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7c:	0711      	lsls	r1, r2, #28
 8004e7e:	bf44      	itt	mi
 8004e80:	232b      	movmi	r3, #43	; 0x2b
 8004e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e86:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8c:	d015      	beq.n	8004eba <_svfiprintf_r+0xf6>
 8004e8e:	9a07      	ldr	r2, [sp, #28]
 8004e90:	4654      	mov	r4, sl
 8004e92:	2000      	movs	r0, #0
 8004e94:	f04f 0c0a 	mov.w	ip, #10
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9e:	3b30      	subs	r3, #48	; 0x30
 8004ea0:	2b09      	cmp	r3, #9
 8004ea2:	d94e      	bls.n	8004f42 <_svfiprintf_r+0x17e>
 8004ea4:	b1b0      	cbz	r0, 8004ed4 <_svfiprintf_r+0x110>
 8004ea6:	9207      	str	r2, [sp, #28]
 8004ea8:	e014      	b.n	8004ed4 <_svfiprintf_r+0x110>
 8004eaa:	eba0 0308 	sub.w	r3, r0, r8
 8004eae:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	46a2      	mov	sl, r4
 8004eb8:	e7d2      	b.n	8004e60 <_svfiprintf_r+0x9c>
 8004eba:	9b03      	ldr	r3, [sp, #12]
 8004ebc:	1d19      	adds	r1, r3, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	9103      	str	r1, [sp, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bfbb      	ittet	lt
 8004ec6:	425b      	neglt	r3, r3
 8004ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8004ecc:	9307      	strge	r3, [sp, #28]
 8004ece:	9307      	strlt	r3, [sp, #28]
 8004ed0:	bfb8      	it	lt
 8004ed2:	9204      	strlt	r2, [sp, #16]
 8004ed4:	7823      	ldrb	r3, [r4, #0]
 8004ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed8:	d10c      	bne.n	8004ef4 <_svfiprintf_r+0x130>
 8004eda:	7863      	ldrb	r3, [r4, #1]
 8004edc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ede:	d135      	bne.n	8004f4c <_svfiprintf_r+0x188>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	9203      	str	r2, [sp, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bfb8      	it	lt
 8004eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ef0:	3402      	adds	r4, #2
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004fc0 <_svfiprintf_r+0x1fc>
 8004ef8:	7821      	ldrb	r1, [r4, #0]
 8004efa:	2203      	movs	r2, #3
 8004efc:	4650      	mov	r0, sl
 8004efe:	f7fb f9a7 	bl	8000250 <memchr>
 8004f02:	b140      	cbz	r0, 8004f16 <_svfiprintf_r+0x152>
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	eba0 000a 	sub.w	r0, r0, sl
 8004f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f0e:	9b04      	ldr	r3, [sp, #16]
 8004f10:	4303      	orrs	r3, r0
 8004f12:	3401      	adds	r4, #1
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1a:	4826      	ldr	r0, [pc, #152]	; (8004fb4 <_svfiprintf_r+0x1f0>)
 8004f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f20:	2206      	movs	r2, #6
 8004f22:	f7fb f995 	bl	8000250 <memchr>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d038      	beq.n	8004f9c <_svfiprintf_r+0x1d8>
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <_svfiprintf_r+0x1f4>)
 8004f2c:	bb1b      	cbnz	r3, 8004f76 <_svfiprintf_r+0x1b2>
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	3307      	adds	r3, #7
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	3308      	adds	r3, #8
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	4433      	add	r3, r6
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	e767      	b.n	8004e12 <_svfiprintf_r+0x4e>
 8004f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f46:	460c      	mov	r4, r1
 8004f48:	2001      	movs	r0, #1
 8004f4a:	e7a5      	b.n	8004e98 <_svfiprintf_r+0xd4>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	3401      	adds	r4, #1
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 0c0a 	mov.w	ip, #10
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5e:	3a30      	subs	r2, #48	; 0x30
 8004f60:	2a09      	cmp	r2, #9
 8004f62:	d903      	bls.n	8004f6c <_svfiprintf_r+0x1a8>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0c5      	beq.n	8004ef4 <_svfiprintf_r+0x130>
 8004f68:	9105      	str	r1, [sp, #20]
 8004f6a:	e7c3      	b.n	8004ef4 <_svfiprintf_r+0x130>
 8004f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f70:	4604      	mov	r4, r0
 8004f72:	2301      	movs	r3, #1
 8004f74:	e7f0      	b.n	8004f58 <_svfiprintf_r+0x194>
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <_svfiprintf_r+0x1f8>)
 8004f7e:	a904      	add	r1, sp, #16
 8004f80:	4638      	mov	r0, r7
 8004f82:	f3af 8000 	nop.w
 8004f86:	1c42      	adds	r2, r0, #1
 8004f88:	4606      	mov	r6, r0
 8004f8a:	d1d6      	bne.n	8004f3a <_svfiprintf_r+0x176>
 8004f8c:	89ab      	ldrh	r3, [r5, #12]
 8004f8e:	065b      	lsls	r3, r3, #25
 8004f90:	f53f af2c 	bmi.w	8004dec <_svfiprintf_r+0x28>
 8004f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f96:	b01d      	add	sp, #116	; 0x74
 8004f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	ab03      	add	r3, sp, #12
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	462a      	mov	r2, r5
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <_svfiprintf_r+0x1f8>)
 8004fa4:	a904      	add	r1, sp, #16
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f000 f87a 	bl	80050a0 <_printf_i>
 8004fac:	e7eb      	b.n	8004f86 <_svfiprintf_r+0x1c2>
 8004fae:	bf00      	nop
 8004fb0:	080055ec 	.word	0x080055ec
 8004fb4:	080055f6 	.word	0x080055f6
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	08004d0d 	.word	0x08004d0d
 8004fc0:	080055f2 	.word	0x080055f2

08004fc4 <_printf_common>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	4616      	mov	r6, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	688a      	ldr	r2, [r1, #8]
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bfb8      	it	lt
 8004fd8:	4613      	movlt	r3, r2
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b10a      	cbz	r2, 8004fea <_printf_common+0x26>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	6833      	ldrmi	r3, [r6, #0]
 8004ff2:	3302      	addmi	r3, #2
 8004ff4:	6033      	strmi	r3, [r6, #0]
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	f015 0506 	ands.w	r5, r5, #6
 8004ffc:	d106      	bne.n	800500c <_printf_common+0x48>
 8004ffe:	f104 0a19 	add.w	sl, r4, #25
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	6832      	ldr	r2, [r6, #0]
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	42ab      	cmp	r3, r5
 800500a:	dc26      	bgt.n	800505a <_printf_common+0x96>
 800500c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005010:	1e13      	subs	r3, r2, #0
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	2301      	movne	r3, #1
 8005018:	0692      	lsls	r2, r2, #26
 800501a:	d42b      	bmi.n	8005074 <_printf_common+0xb0>
 800501c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005020:	4649      	mov	r1, r9
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	3001      	adds	r0, #1
 8005028:	d01e      	beq.n	8005068 <_printf_common+0xa4>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	68e5      	ldr	r5, [r4, #12]
 800502e:	6832      	ldr	r2, [r6, #0]
 8005030:	f003 0306 	and.w	r3, r3, #6
 8005034:	2b04      	cmp	r3, #4
 8005036:	bf08      	it	eq
 8005038:	1aad      	subeq	r5, r5, r2
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	bf0c      	ite	eq
 8005040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005044:	2500      	movne	r5, #0
 8005046:	4293      	cmp	r3, r2
 8005048:	bfc4      	itt	gt
 800504a:	1a9b      	subgt	r3, r3, r2
 800504c:	18ed      	addgt	r5, r5, r3
 800504e:	2600      	movs	r6, #0
 8005050:	341a      	adds	r4, #26
 8005052:	42b5      	cmp	r5, r6
 8005054:	d11a      	bne.n	800508c <_printf_common+0xc8>
 8005056:	2000      	movs	r0, #0
 8005058:	e008      	b.n	800506c <_printf_common+0xa8>
 800505a:	2301      	movs	r3, #1
 800505c:	4652      	mov	r2, sl
 800505e:	4649      	mov	r1, r9
 8005060:	4638      	mov	r0, r7
 8005062:	47c0      	blx	r8
 8005064:	3001      	adds	r0, #1
 8005066:	d103      	bne.n	8005070 <_printf_common+0xac>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	3501      	adds	r5, #1
 8005072:	e7c6      	b.n	8005002 <_printf_common+0x3e>
 8005074:	18e1      	adds	r1, r4, r3
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	2030      	movs	r0, #48	; 0x30
 800507a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800507e:	4422      	add	r2, r4
 8005080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005088:	3302      	adds	r3, #2
 800508a:	e7c7      	b.n	800501c <_printf_common+0x58>
 800508c:	2301      	movs	r3, #1
 800508e:	4622      	mov	r2, r4
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d0e6      	beq.n	8005068 <_printf_common+0xa4>
 800509a:	3601      	adds	r6, #1
 800509c:	e7d9      	b.n	8005052 <_printf_common+0x8e>
	...

080050a0 <_printf_i>:
 80050a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	7e0f      	ldrb	r7, [r1, #24]
 80050a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050a8:	2f78      	cmp	r7, #120	; 0x78
 80050aa:	4691      	mov	r9, r2
 80050ac:	4680      	mov	r8, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	469a      	mov	sl, r3
 80050b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050b6:	d807      	bhi.n	80050c8 <_printf_i+0x28>
 80050b8:	2f62      	cmp	r7, #98	; 0x62
 80050ba:	d80a      	bhi.n	80050d2 <_printf_i+0x32>
 80050bc:	2f00      	cmp	r7, #0
 80050be:	f000 80d8 	beq.w	8005272 <_printf_i+0x1d2>
 80050c2:	2f58      	cmp	r7, #88	; 0x58
 80050c4:	f000 80a3 	beq.w	800520e <_printf_i+0x16e>
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d0:	e03a      	b.n	8005148 <_printf_i+0xa8>
 80050d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050d6:	2b15      	cmp	r3, #21
 80050d8:	d8f6      	bhi.n	80050c8 <_printf_i+0x28>
 80050da:	a101      	add	r1, pc, #4	; (adr r1, 80050e0 <_printf_i+0x40>)
 80050dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e0:	08005139 	.word	0x08005139
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	080050c9 	.word	0x080050c9
 80050ec:	080050c9 	.word	0x080050c9
 80050f0:	080050c9 	.word	0x080050c9
 80050f4:	080050c9 	.word	0x080050c9
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	080050c9 	.word	0x080050c9
 8005100:	080050c9 	.word	0x080050c9
 8005104:	080050c9 	.word	0x080050c9
 8005108:	080050c9 	.word	0x080050c9
 800510c:	08005259 	.word	0x08005259
 8005110:	0800517d 	.word	0x0800517d
 8005114:	0800523b 	.word	0x0800523b
 8005118:	080050c9 	.word	0x080050c9
 800511c:	080050c9 	.word	0x080050c9
 8005120:	0800527b 	.word	0x0800527b
 8005124:	080050c9 	.word	0x080050c9
 8005128:	0800517d 	.word	0x0800517d
 800512c:	080050c9 	.word	0x080050c9
 8005130:	080050c9 	.word	0x080050c9
 8005134:	08005243 	.word	0x08005243
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	602a      	str	r2, [r5, #0]
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005148:	2301      	movs	r3, #1
 800514a:	e0a3      	b.n	8005294 <_printf_i+0x1f4>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	6829      	ldr	r1, [r5, #0]
 8005150:	0606      	lsls	r6, r0, #24
 8005152:	f101 0304 	add.w	r3, r1, #4
 8005156:	d50a      	bpl.n	800516e <_printf_i+0xce>
 8005158:	680e      	ldr	r6, [r1, #0]
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	2e00      	cmp	r6, #0
 800515e:	da03      	bge.n	8005168 <_printf_i+0xc8>
 8005160:	232d      	movs	r3, #45	; 0x2d
 8005162:	4276      	negs	r6, r6
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	485e      	ldr	r0, [pc, #376]	; (80052e4 <_printf_i+0x244>)
 800516a:	230a      	movs	r3, #10
 800516c:	e019      	b.n	80051a2 <_printf_i+0x102>
 800516e:	680e      	ldr	r6, [r1, #0]
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005176:	bf18      	it	ne
 8005178:	b236      	sxthne	r6, r6
 800517a:	e7ef      	b.n	800515c <_printf_i+0xbc>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	0601      	lsls	r1, r0, #24
 8005186:	d501      	bpl.n	800518c <_printf_i+0xec>
 8005188:	681e      	ldr	r6, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0xf2>
 800518c:	0646      	lsls	r6, r0, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0xe8>
 8005190:	881e      	ldrh	r6, [r3, #0]
 8005192:	4854      	ldr	r0, [pc, #336]	; (80052e4 <_printf_i+0x244>)
 8005194:	2f6f      	cmp	r7, #111	; 0x6f
 8005196:	bf0c      	ite	eq
 8005198:	2308      	moveq	r3, #8
 800519a:	230a      	movne	r3, #10
 800519c:	2100      	movs	r1, #0
 800519e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a2:	6865      	ldr	r5, [r4, #4]
 80051a4:	60a5      	str	r5, [r4, #8]
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	bfa2      	ittt	ge
 80051aa:	6821      	ldrge	r1, [r4, #0]
 80051ac:	f021 0104 	bicge.w	r1, r1, #4
 80051b0:	6021      	strge	r1, [r4, #0]
 80051b2:	b90e      	cbnz	r6, 80051b8 <_printf_i+0x118>
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	d04d      	beq.n	8005254 <_printf_i+0x1b4>
 80051b8:	4615      	mov	r5, r2
 80051ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80051be:	fb03 6711 	mls	r7, r3, r1, r6
 80051c2:	5dc7      	ldrb	r7, [r0, r7]
 80051c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051c8:	4637      	mov	r7, r6
 80051ca:	42bb      	cmp	r3, r7
 80051cc:	460e      	mov	r6, r1
 80051ce:	d9f4      	bls.n	80051ba <_printf_i+0x11a>
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d10b      	bne.n	80051ec <_printf_i+0x14c>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07de      	lsls	r6, r3, #31
 80051d8:	d508      	bpl.n	80051ec <_printf_i+0x14c>
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6861      	ldr	r1, [r4, #4]
 80051de:	4299      	cmp	r1, r3
 80051e0:	bfde      	ittt	le
 80051e2:	2330      	movle	r3, #48	; 0x30
 80051e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051ec:	1b52      	subs	r2, r2, r5
 80051ee:	6122      	str	r2, [r4, #16]
 80051f0:	f8cd a000 	str.w	sl, [sp]
 80051f4:	464b      	mov	r3, r9
 80051f6:	aa03      	add	r2, sp, #12
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff fee2 	bl	8004fc4 <_printf_common>
 8005200:	3001      	adds	r0, #1
 8005202:	d14c      	bne.n	800529e <_printf_i+0x1fe>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	b004      	add	sp, #16
 800520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520e:	4835      	ldr	r0, [pc, #212]	; (80052e4 <_printf_i+0x244>)
 8005210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f851 6b04 	ldr.w	r6, [r1], #4
 800521c:	6029      	str	r1, [r5, #0]
 800521e:	061d      	lsls	r5, r3, #24
 8005220:	d514      	bpl.n	800524c <_printf_i+0x1ac>
 8005222:	07df      	lsls	r7, r3, #31
 8005224:	bf44      	itt	mi
 8005226:	f043 0320 	orrmi.w	r3, r3, #32
 800522a:	6023      	strmi	r3, [r4, #0]
 800522c:	b91e      	cbnz	r6, 8005236 <_printf_i+0x196>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f023 0320 	bic.w	r3, r3, #32
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	2310      	movs	r3, #16
 8005238:	e7b0      	b.n	800519c <_printf_i+0xfc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	2378      	movs	r3, #120	; 0x78
 8005244:	4828      	ldr	r0, [pc, #160]	; (80052e8 <_printf_i+0x248>)
 8005246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524a:	e7e3      	b.n	8005214 <_printf_i+0x174>
 800524c:	0659      	lsls	r1, r3, #25
 800524e:	bf48      	it	mi
 8005250:	b2b6      	uxthmi	r6, r6
 8005252:	e7e6      	b.n	8005222 <_printf_i+0x182>
 8005254:	4615      	mov	r5, r2
 8005256:	e7bb      	b.n	80051d0 <_printf_i+0x130>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	6826      	ldr	r6, [r4, #0]
 800525c:	6961      	ldr	r1, [r4, #20]
 800525e:	1d18      	adds	r0, r3, #4
 8005260:	6028      	str	r0, [r5, #0]
 8005262:	0635      	lsls	r5, r6, #24
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	d501      	bpl.n	800526c <_printf_i+0x1cc>
 8005268:	6019      	str	r1, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0x1d2>
 800526c:	0670      	lsls	r0, r6, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0x1c8>
 8005270:	8019      	strh	r1, [r3, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	4615      	mov	r5, r2
 8005278:	e7ba      	b.n	80051f0 <_printf_i+0x150>
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	602a      	str	r2, [r5, #0]
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	2100      	movs	r1, #0
 8005286:	4628      	mov	r0, r5
 8005288:	f7fa ffe2 	bl	8000250 <memchr>
 800528c:	b108      	cbz	r0, 8005292 <_printf_i+0x1f2>
 800528e:	1b40      	subs	r0, r0, r5
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	e7a8      	b.n	80051f0 <_printf_i+0x150>
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	47d0      	blx	sl
 80052a8:	3001      	adds	r0, #1
 80052aa:	d0ab      	beq.n	8005204 <_printf_i+0x164>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	079b      	lsls	r3, r3, #30
 80052b0:	d413      	bmi.n	80052da <_printf_i+0x23a>
 80052b2:	68e0      	ldr	r0, [r4, #12]
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	4298      	cmp	r0, r3
 80052b8:	bfb8      	it	lt
 80052ba:	4618      	movlt	r0, r3
 80052bc:	e7a4      	b.n	8005208 <_printf_i+0x168>
 80052be:	2301      	movs	r3, #1
 80052c0:	4632      	mov	r2, r6
 80052c2:	4649      	mov	r1, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	47d0      	blx	sl
 80052c8:	3001      	adds	r0, #1
 80052ca:	d09b      	beq.n	8005204 <_printf_i+0x164>
 80052cc:	3501      	adds	r5, #1
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	9903      	ldr	r1, [sp, #12]
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dcf2      	bgt.n	80052be <_printf_i+0x21e>
 80052d8:	e7eb      	b.n	80052b2 <_printf_i+0x212>
 80052da:	2500      	movs	r5, #0
 80052dc:	f104 0619 	add.w	r6, r4, #25
 80052e0:	e7f5      	b.n	80052ce <_printf_i+0x22e>
 80052e2:	bf00      	nop
 80052e4:	080055fd 	.word	0x080055fd
 80052e8:	0800560e 	.word	0x0800560e

080052ec <memcpy>:
 80052ec:	440a      	add	r2, r1
 80052ee:	4291      	cmp	r1, r2
 80052f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052f4:	d100      	bne.n	80052f8 <memcpy+0xc>
 80052f6:	4770      	bx	lr
 80052f8:	b510      	push	{r4, lr}
 80052fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005302:	4291      	cmp	r1, r2
 8005304:	d1f9      	bne.n	80052fa <memcpy+0xe>
 8005306:	bd10      	pop	{r4, pc}

08005308 <memmove>:
 8005308:	4288      	cmp	r0, r1
 800530a:	b510      	push	{r4, lr}
 800530c:	eb01 0402 	add.w	r4, r1, r2
 8005310:	d902      	bls.n	8005318 <memmove+0x10>
 8005312:	4284      	cmp	r4, r0
 8005314:	4623      	mov	r3, r4
 8005316:	d807      	bhi.n	8005328 <memmove+0x20>
 8005318:	1e43      	subs	r3, r0, #1
 800531a:	42a1      	cmp	r1, r4
 800531c:	d008      	beq.n	8005330 <memmove+0x28>
 800531e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005326:	e7f8      	b.n	800531a <memmove+0x12>
 8005328:	4402      	add	r2, r0
 800532a:	4601      	mov	r1, r0
 800532c:	428a      	cmp	r2, r1
 800532e:	d100      	bne.n	8005332 <memmove+0x2a>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800533a:	e7f7      	b.n	800532c <memmove+0x24>

0800533c <_free_r>:
 800533c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800533e:	2900      	cmp	r1, #0
 8005340:	d044      	beq.n	80053cc <_free_r+0x90>
 8005342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005346:	9001      	str	r0, [sp, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f1a1 0404 	sub.w	r4, r1, #4
 800534e:	bfb8      	it	lt
 8005350:	18e4      	addlt	r4, r4, r3
 8005352:	f000 f913 	bl	800557c <__malloc_lock>
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <_free_r+0x94>)
 8005358:	9801      	ldr	r0, [sp, #4]
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	b933      	cbnz	r3, 800536c <_free_r+0x30>
 800535e:	6063      	str	r3, [r4, #4]
 8005360:	6014      	str	r4, [r2, #0]
 8005362:	b003      	add	sp, #12
 8005364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005368:	f000 b90e 	b.w	8005588 <__malloc_unlock>
 800536c:	42a3      	cmp	r3, r4
 800536e:	d908      	bls.n	8005382 <_free_r+0x46>
 8005370:	6825      	ldr	r5, [r4, #0]
 8005372:	1961      	adds	r1, r4, r5
 8005374:	428b      	cmp	r3, r1
 8005376:	bf01      	itttt	eq
 8005378:	6819      	ldreq	r1, [r3, #0]
 800537a:	685b      	ldreq	r3, [r3, #4]
 800537c:	1949      	addeq	r1, r1, r5
 800537e:	6021      	streq	r1, [r4, #0]
 8005380:	e7ed      	b.n	800535e <_free_r+0x22>
 8005382:	461a      	mov	r2, r3
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b10b      	cbz	r3, 800538c <_free_r+0x50>
 8005388:	42a3      	cmp	r3, r4
 800538a:	d9fa      	bls.n	8005382 <_free_r+0x46>
 800538c:	6811      	ldr	r1, [r2, #0]
 800538e:	1855      	adds	r5, r2, r1
 8005390:	42a5      	cmp	r5, r4
 8005392:	d10b      	bne.n	80053ac <_free_r+0x70>
 8005394:	6824      	ldr	r4, [r4, #0]
 8005396:	4421      	add	r1, r4
 8005398:	1854      	adds	r4, r2, r1
 800539a:	42a3      	cmp	r3, r4
 800539c:	6011      	str	r1, [r2, #0]
 800539e:	d1e0      	bne.n	8005362 <_free_r+0x26>
 80053a0:	681c      	ldr	r4, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	6053      	str	r3, [r2, #4]
 80053a6:	4421      	add	r1, r4
 80053a8:	6011      	str	r1, [r2, #0]
 80053aa:	e7da      	b.n	8005362 <_free_r+0x26>
 80053ac:	d902      	bls.n	80053b4 <_free_r+0x78>
 80053ae:	230c      	movs	r3, #12
 80053b0:	6003      	str	r3, [r0, #0]
 80053b2:	e7d6      	b.n	8005362 <_free_r+0x26>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf04      	itt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	bf04      	itt	eq
 80053c4:	1949      	addeq	r1, r1, r5
 80053c6:	6021      	streq	r1, [r4, #0]
 80053c8:	6054      	str	r4, [r2, #4]
 80053ca:	e7ca      	b.n	8005362 <_free_r+0x26>
 80053cc:	b003      	add	sp, #12
 80053ce:	bd30      	pop	{r4, r5, pc}
 80053d0:	200008f0 	.word	0x200008f0

080053d4 <sbrk_aligned>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4e0e      	ldr	r6, [pc, #56]	; (8005410 <sbrk_aligned+0x3c>)
 80053d8:	460c      	mov	r4, r1
 80053da:	6831      	ldr	r1, [r6, #0]
 80053dc:	4605      	mov	r5, r0
 80053de:	b911      	cbnz	r1, 80053e6 <sbrk_aligned+0x12>
 80053e0:	f000 f8bc 	bl	800555c <_sbrk_r>
 80053e4:	6030      	str	r0, [r6, #0]
 80053e6:	4621      	mov	r1, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 f8b7 	bl	800555c <_sbrk_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d00a      	beq.n	8005408 <sbrk_aligned+0x34>
 80053f2:	1cc4      	adds	r4, r0, #3
 80053f4:	f024 0403 	bic.w	r4, r4, #3
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d007      	beq.n	800540c <sbrk_aligned+0x38>
 80053fc:	1a21      	subs	r1, r4, r0
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f8ac 	bl	800555c <_sbrk_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d101      	bne.n	800540c <sbrk_aligned+0x38>
 8005408:	f04f 34ff 	mov.w	r4, #4294967295
 800540c:	4620      	mov	r0, r4
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	200008f4 	.word	0x200008f4

08005414 <_malloc_r>:
 8005414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005418:	1ccd      	adds	r5, r1, #3
 800541a:	f025 0503 	bic.w	r5, r5, #3
 800541e:	3508      	adds	r5, #8
 8005420:	2d0c      	cmp	r5, #12
 8005422:	bf38      	it	cc
 8005424:	250c      	movcc	r5, #12
 8005426:	2d00      	cmp	r5, #0
 8005428:	4607      	mov	r7, r0
 800542a:	db01      	blt.n	8005430 <_malloc_r+0x1c>
 800542c:	42a9      	cmp	r1, r5
 800542e:	d905      	bls.n	800543c <_malloc_r+0x28>
 8005430:	230c      	movs	r3, #12
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	2600      	movs	r6, #0
 8005436:	4630      	mov	r0, r6
 8005438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800543c:	4e2e      	ldr	r6, [pc, #184]	; (80054f8 <_malloc_r+0xe4>)
 800543e:	f000 f89d 	bl	800557c <__malloc_lock>
 8005442:	6833      	ldr	r3, [r6, #0]
 8005444:	461c      	mov	r4, r3
 8005446:	bb34      	cbnz	r4, 8005496 <_malloc_r+0x82>
 8005448:	4629      	mov	r1, r5
 800544a:	4638      	mov	r0, r7
 800544c:	f7ff ffc2 	bl	80053d4 <sbrk_aligned>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	4604      	mov	r4, r0
 8005454:	d14d      	bne.n	80054f2 <_malloc_r+0xde>
 8005456:	6834      	ldr	r4, [r6, #0]
 8005458:	4626      	mov	r6, r4
 800545a:	2e00      	cmp	r6, #0
 800545c:	d140      	bne.n	80054e0 <_malloc_r+0xcc>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	4631      	mov	r1, r6
 8005462:	4638      	mov	r0, r7
 8005464:	eb04 0803 	add.w	r8, r4, r3
 8005468:	f000 f878 	bl	800555c <_sbrk_r>
 800546c:	4580      	cmp	r8, r0
 800546e:	d13a      	bne.n	80054e6 <_malloc_r+0xd2>
 8005470:	6821      	ldr	r1, [r4, #0]
 8005472:	3503      	adds	r5, #3
 8005474:	1a6d      	subs	r5, r5, r1
 8005476:	f025 0503 	bic.w	r5, r5, #3
 800547a:	3508      	adds	r5, #8
 800547c:	2d0c      	cmp	r5, #12
 800547e:	bf38      	it	cc
 8005480:	250c      	movcc	r5, #12
 8005482:	4629      	mov	r1, r5
 8005484:	4638      	mov	r0, r7
 8005486:	f7ff ffa5 	bl	80053d4 <sbrk_aligned>
 800548a:	3001      	adds	r0, #1
 800548c:	d02b      	beq.n	80054e6 <_malloc_r+0xd2>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	442b      	add	r3, r5
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	e00e      	b.n	80054b4 <_malloc_r+0xa0>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	1b52      	subs	r2, r2, r5
 800549a:	d41e      	bmi.n	80054da <_malloc_r+0xc6>
 800549c:	2a0b      	cmp	r2, #11
 800549e:	d916      	bls.n	80054ce <_malloc_r+0xba>
 80054a0:	1961      	adds	r1, r4, r5
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	6025      	str	r5, [r4, #0]
 80054a6:	bf18      	it	ne
 80054a8:	6059      	strne	r1, [r3, #4]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	bf08      	it	eq
 80054ae:	6031      	streq	r1, [r6, #0]
 80054b0:	5162      	str	r2, [r4, r5]
 80054b2:	604b      	str	r3, [r1, #4]
 80054b4:	4638      	mov	r0, r7
 80054b6:	f104 060b 	add.w	r6, r4, #11
 80054ba:	f000 f865 	bl	8005588 <__malloc_unlock>
 80054be:	f026 0607 	bic.w	r6, r6, #7
 80054c2:	1d23      	adds	r3, r4, #4
 80054c4:	1af2      	subs	r2, r6, r3
 80054c6:	d0b6      	beq.n	8005436 <_malloc_r+0x22>
 80054c8:	1b9b      	subs	r3, r3, r6
 80054ca:	50a3      	str	r3, [r4, r2]
 80054cc:	e7b3      	b.n	8005436 <_malloc_r+0x22>
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	bf0c      	ite	eq
 80054d4:	6032      	streq	r2, [r6, #0]
 80054d6:	605a      	strne	r2, [r3, #4]
 80054d8:	e7ec      	b.n	80054b4 <_malloc_r+0xa0>
 80054da:	4623      	mov	r3, r4
 80054dc:	6864      	ldr	r4, [r4, #4]
 80054de:	e7b2      	b.n	8005446 <_malloc_r+0x32>
 80054e0:	4634      	mov	r4, r6
 80054e2:	6876      	ldr	r6, [r6, #4]
 80054e4:	e7b9      	b.n	800545a <_malloc_r+0x46>
 80054e6:	230c      	movs	r3, #12
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4638      	mov	r0, r7
 80054ec:	f000 f84c 	bl	8005588 <__malloc_unlock>
 80054f0:	e7a1      	b.n	8005436 <_malloc_r+0x22>
 80054f2:	6025      	str	r5, [r4, #0]
 80054f4:	e7de      	b.n	80054b4 <_malloc_r+0xa0>
 80054f6:	bf00      	nop
 80054f8:	200008f0 	.word	0x200008f0

080054fc <_realloc_r>:
 80054fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005500:	4680      	mov	r8, r0
 8005502:	4614      	mov	r4, r2
 8005504:	460e      	mov	r6, r1
 8005506:	b921      	cbnz	r1, 8005512 <_realloc_r+0x16>
 8005508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	4611      	mov	r1, r2
 800550e:	f7ff bf81 	b.w	8005414 <_malloc_r>
 8005512:	b92a      	cbnz	r2, 8005520 <_realloc_r+0x24>
 8005514:	f7ff ff12 	bl	800533c <_free_r>
 8005518:	4625      	mov	r5, r4
 800551a:	4628      	mov	r0, r5
 800551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005520:	f000 f838 	bl	8005594 <_malloc_usable_size_r>
 8005524:	4284      	cmp	r4, r0
 8005526:	4607      	mov	r7, r0
 8005528:	d802      	bhi.n	8005530 <_realloc_r+0x34>
 800552a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800552e:	d812      	bhi.n	8005556 <_realloc_r+0x5a>
 8005530:	4621      	mov	r1, r4
 8005532:	4640      	mov	r0, r8
 8005534:	f7ff ff6e 	bl	8005414 <_malloc_r>
 8005538:	4605      	mov	r5, r0
 800553a:	2800      	cmp	r0, #0
 800553c:	d0ed      	beq.n	800551a <_realloc_r+0x1e>
 800553e:	42bc      	cmp	r4, r7
 8005540:	4622      	mov	r2, r4
 8005542:	4631      	mov	r1, r6
 8005544:	bf28      	it	cs
 8005546:	463a      	movcs	r2, r7
 8005548:	f7ff fed0 	bl	80052ec <memcpy>
 800554c:	4631      	mov	r1, r6
 800554e:	4640      	mov	r0, r8
 8005550:	f7ff fef4 	bl	800533c <_free_r>
 8005554:	e7e1      	b.n	800551a <_realloc_r+0x1e>
 8005556:	4635      	mov	r5, r6
 8005558:	e7df      	b.n	800551a <_realloc_r+0x1e>
	...

0800555c <_sbrk_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d06      	ldr	r5, [pc, #24]	; (8005578 <_sbrk_r+0x1c>)
 8005560:	2300      	movs	r3, #0
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	f7fb fb1c 	bl	8000ba4 <_sbrk>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_sbrk_r+0x1a>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_sbrk_r+0x1a>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200008f8 	.word	0x200008f8

0800557c <__malloc_lock>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__malloc_lock+0x8>)
 800557e:	f000 b811 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 8005582:	bf00      	nop
 8005584:	200008fc 	.word	0x200008fc

08005588 <__malloc_unlock>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__malloc_unlock+0x8>)
 800558a:	f000 b80c 	b.w	80055a6 <__retarget_lock_release_recursive>
 800558e:	bf00      	nop
 8005590:	200008fc 	.word	0x200008fc

08005594 <_malloc_usable_size_r>:
 8005594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005598:	1f18      	subs	r0, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfbc      	itt	lt
 800559e:	580b      	ldrlt	r3, [r1, r0]
 80055a0:	18c0      	addlt	r0, r0, r3
 80055a2:	4770      	bx	lr

080055a4 <__retarget_lock_acquire_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_release_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <_init>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr

080055b4 <_fini>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr
