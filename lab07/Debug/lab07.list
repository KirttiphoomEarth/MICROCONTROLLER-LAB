
lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005510  08005510  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005524  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080055c4  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000700  2000014c  08005664  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000084c  08005664  0002084c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017e2c  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f3e  00000000  00000000  00037fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001308  00000000  00000000  0003aee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c0  00000000  00000000  0003c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a0f7  00000000  00000000  0003d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001798c  00000000  00000000  000674a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001037be  00000000  00000000  0007ee33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001825f1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005004  00000000  00000000  00182644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	080054c4 	.word	0x080054c4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	080054c4 	.word	0x080054c4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ETH_Init+0x84>)
 8000552:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <MX_ETH_Init+0x88>)
 8000554:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_ETH_Init+0x8c>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_ETH_Init+0x8c>)
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_ETH_Init+0x8c>)
 8000564:	22e1      	movs	r2, #225	; 0xe1
 8000566:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_ETH_Init+0x8c>)
 800056a:	2200      	movs	r2, #0
 800056c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_ETH_Init+0x8c>)
 8000570:	2200      	movs	r2, #0
 8000572:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_ETH_Init+0x8c>)
 8000576:	2200      	movs	r2, #0
 8000578:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_ETH_Init+0x84>)
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <MX_ETH_Init+0x8c>)
 800057e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_ETH_Init+0x84>)
 8000582:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000586:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_ETH_Init+0x84>)
 800058a:	4a14      	ldr	r2, [pc, #80]	; (80005dc <MX_ETH_Init+0x90>)
 800058c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_ETH_Init+0x84>)
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <MX_ETH_Init+0x94>)
 8000592:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_ETH_Init+0x84>)
 8000596:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800059a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_ETH_Init+0x84>)
 800059e:	f000 ff55 	bl	800144c <HAL_ETH_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80005a8:	f000 fb22 	bl	8000bf0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80005ac:	2238      	movs	r2, #56	; 0x38
 80005ae:	2100      	movs	r1, #0
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_ETH_Init+0x98>)
 80005b2:	f004 ff7f 	bl	80054b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_ETH_Init+0x98>)
 80005b8:	2221      	movs	r2, #33	; 0x21
 80005ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_ETH_Init+0x98>)
 80005be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_ETH_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200001a0 	.word	0x200001a0
 80005d4:	40028000 	.word	0x40028000
 80005d8:	20000250 	.word	0x20000250
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	2000000c 	.word	0x2000000c
 80005e4:	20000168 	.word	0x20000168

080005e8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a4e      	ldr	r2, [pc, #312]	; (8000740 <HAL_ETH_MspInit+0x158>)
 8000606:	4293      	cmp	r3, r2
 8000608:	f040 8096 	bne.w	8000738 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800060c:	4b4d      	ldr	r3, [pc, #308]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a4c      	ldr	r2, [pc, #304]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
 8000618:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000620:	623b      	str	r3, [r7, #32]
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	4b47      	ldr	r3, [pc, #284]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a46      	ldr	r2, [pc, #280]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800062a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b44      	ldr	r3, [pc, #272]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	4b41      	ldr	r3, [pc, #260]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a40      	ldr	r2, [pc, #256]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a34      	ldr	r2, [pc, #208]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b32      	ldr	r3, [pc, #200]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <HAL_ETH_MspInit+0x15c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b4:	2332      	movs	r3, #50	; 0x32
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c4:	230b      	movs	r3, #11
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	4619      	mov	r1, r3
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <HAL_ETH_MspInit+0x160>)
 80006d0:	f001 f9e2 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d4:	2386      	movs	r3, #134	; 0x86
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e4:	230b      	movs	r3, #11
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <HAL_ETH_MspInit+0x164>)
 80006f0:	f001 f9d2 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000706:	230b      	movs	r3, #11
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	4619      	mov	r1, r3
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <HAL_ETH_MspInit+0x168>)
 8000712:	f001 f9c1 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000716:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000728:	230b      	movs	r3, #11
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <HAL_ETH_MspInit+0x16c>)
 8000734:	f001 f9b0 	bl	8001a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	3738      	adds	r7, #56	; 0x38
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40028000 	.word	0x40028000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	40021800 	.word	0x40021800

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b47      	ldr	r3, [pc, #284]	; (800088c <MX_GPIO_Init+0x134>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a46      	ldr	r2, [pc, #280]	; (800088c <MX_GPIO_Init+0x134>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <MX_GPIO_Init+0x134>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x134>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a40      	ldr	r2, [pc, #256]	; (800088c <MX_GPIO_Init+0x134>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_GPIO_Init+0x134>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_GPIO_Init+0x134>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a3a      	ldr	r2, [pc, #232]	; (800088c <MX_GPIO_Init+0x134>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <MX_GPIO_Init+0x134>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_GPIO_Init+0x134>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a34      	ldr	r2, [pc, #208]	; (800088c <MX_GPIO_Init+0x134>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0x134>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a28      	ldr	r2, [pc, #160]	; (800088c <MX_GPIO_Init+0x134>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f244 0181 	movw	r1, #16513	; 0x4081
 8000804:	4822      	ldr	r0, [pc, #136]	; (8000890 <MX_GPIO_Init+0x138>)
 8000806:	f001 faf3 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	4821      	ldr	r0, [pc, #132]	; (8000894 <MX_GPIO_Init+0x13c>)
 8000810:	f001 faee 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <MX_GPIO_Init+0x140>)
 800082c:	f001 f934 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000830:	f244 0381 	movw	r3, #16513	; 0x4081
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x138>)
 800084a:	f001 f925 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x13c>)
 8000866:	f001 f917 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x13c>)
 800087e:	f001 f90b 	bl	8001a98 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800
 800089c:	00000000 	.word	0x00000000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a6:	f000 fc6a 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f931 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f7ff ff53 	bl	8000758 <MX_GPIO_Init>
  MX_ETH_Init();
 80008b2:	f7ff fe4b 	bl	800054c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 fb01 	bl	8000ebc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ba:	f000 fb8f 	bl	8000fdc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80008be:	f000 f9fd 	bl	8000cbc <MX_TIM2_Init>

    /* USER CODE BEGIN 3 */


//		char input;
		char receive[] = "INPUT RGB : ";
 80008c2:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <main+0x238>)
 80008c4:	f107 0408 	add.w	r4, r7, #8
 80008c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ca:	c407      	stmia	r4!, {r0, r1, r2}
 80008cc:	7023      	strb	r3, [r4, #0]
		char line[] = "\n\r";
 80008ce:	4a83      	ldr	r2, [pc, #524]	; (8000adc <main+0x23c>)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	8019      	strh	r1, [r3, #0]
 80008d8:	3302      	adds	r3, #2
 80008da:	0c12      	lsrs	r2, r2, #16
 80008dc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) receive, strlen(receive), 1000);
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fca8 	bl	8000238 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f107 0108 	add.w	r1, r7, #8
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	487a      	ldr	r0, [pc, #488]	; (8000ae0 <main+0x240>)
 80008f6:	f003 fd63 	bl	80043c0 <HAL_UART_Transmit>
		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 80008fa:	e01c      	b.n	8000936 <main+0x96>
			pwmR = (GPIOA->IDR & GPIO_PIN_0) >> 0;
 80008fc:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <main+0x244>)
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b77      	ldr	r3, [pc, #476]	; (8000ae8 <main+0x248>)
 800090a:	701a      	strb	r2, [r3, #0]
			pwmG = (GPIOB->IDR & GPIO_PIN_10) >> 10;
 800090c:	4b77      	ldr	r3, [pc, #476]	; (8000aec <main+0x24c>)
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	0a9b      	lsrs	r3, r3, #10
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b75      	ldr	r3, [pc, #468]	; (8000af0 <main+0x250>)
 800091c:	701a      	strb	r2, [r3, #0]
			pwmB = (GPIOA->IDR & GPIO_PIN_3) >> 3;
 800091e:	4b71      	ldr	r3, [pc, #452]	; (8000ae4 <main+0x244>)
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	08db      	lsrs	r3, r3, #3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b71      	ldr	r3, [pc, #452]	; (8000af4 <main+0x254>)
 800092e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 fc81 	bl	8001238 <HAL_Delay>
		while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET) {
 8000936:	4b6a      	ldr	r3, [pc, #424]	; (8000ae0 <main+0x240>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	2b20      	cmp	r3, #32
 8000942:	d1db      	bne.n	80008fc <main+0x5c>
		}
		HAL_UART_Receive(&huart3, (uint8_t*) &input, 1, 1000);
 8000944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000948:	2201      	movs	r2, #1
 800094a:	496b      	ldr	r1, [pc, #428]	; (8000af8 <main+0x258>)
 800094c:	4864      	ldr	r0, [pc, #400]	; (8000ae0 <main+0x240>)
 800094e:	f003 fdba 	bl	80044c6 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart3, (uint8_t*) &input, 1, 1000);
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	2201      	movs	r2, #1
 8000958:	4967      	ldr	r1, [pc, #412]	; (8000af8 <main+0x258>)
 800095a:	4861      	ldr	r0, [pc, #388]	; (8000ae0 <main+0x240>)
 800095c:	f003 fd30 	bl	80043c0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) line, strlen(line), 1000);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc68 	bl	8000238 <strlen>
 8000968:	4603      	mov	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	485b      	ldr	r0, [pc, #364]	; (8000ae0 <main+0x240>)
 8000974:	f003 fd24 	bl	80043c0 <HAL_UART_Transmit>
		if (input == 'R') {
 8000978:	4b5f      	ldr	r3, [pc, #380]	; (8000af8 <main+0x258>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b52      	cmp	r3, #82	; 0x52
 800097e:	d11c      	bne.n	80009ba <main+0x11a>
			dutyCycleR += 0.2;
 8000980:	4b5e      	ldr	r3, [pc, #376]	; (8000afc <main+0x25c>)
 8000982:	edd3 7a00 	vldr	s15, [r3]
 8000986:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800098a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8000ad0 <main+0x230>
 800098e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000992:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000996:	4b59      	ldr	r3, [pc, #356]	; (8000afc <main+0x25c>)
 8000998:	edc3 7a00 	vstr	s15, [r3]
			if (dutyCycleR > 1.0) {
 800099c:	4b57      	ldr	r3, [pc, #348]	; (8000afc <main+0x25c>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ae:	dd56      	ble.n	8000a5e <main+0x1be>
				dutyCycleR = 0;
 80009b0:	4b52      	ldr	r3, [pc, #328]	; (8000afc <main+0x25c>)
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e051      	b.n	8000a5e <main+0x1be>
			}
		}
		else if (input == 'G') {
 80009ba:	4b4f      	ldr	r3, [pc, #316]	; (8000af8 <main+0x258>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b47      	cmp	r3, #71	; 0x47
 80009c0:	d11c      	bne.n	80009fc <main+0x15c>
			dutyCycleG += 0.2;
 80009c2:	4b4f      	ldr	r3, [pc, #316]	; (8000b00 <main+0x260>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009cc:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8000ad0 <main+0x230>
 80009d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009d8:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <main+0x260>)
 80009da:	edc3 7a00 	vstr	s15, [r3]
			if (dutyCycleG > 1.0) {
 80009de:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <main+0x260>)
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	dd35      	ble.n	8000a5e <main+0x1be>
				dutyCycleG = 0;
 80009f2:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <main+0x260>)
 80009f4:	f04f 0200 	mov.w	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e030      	b.n	8000a5e <main+0x1be>
			}
		}
		else if (input == 'B') {
 80009fc:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <main+0x258>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b42      	cmp	r3, #66	; 0x42
 8000a02:	d11c      	bne.n	8000a3e <main+0x19e>
			dutyCycleB += 0.2;
 8000a04:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <main+0x264>)
 8000a06:	edd3 7a00 	vldr	s15, [r3]
 8000a0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a0e:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000ad0 <main+0x230>
 8000a12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <main+0x264>)
 8000a1c:	edc3 7a00 	vstr	s15, [r3]
			if (dutyCycleB > 1.0) {
 8000a20:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <main+0x264>)
 8000a22:	edd3 7a00 	vldr	s15, [r3]
 8000a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a32:	dd14      	ble.n	8000a5e <main+0x1be>
				dutyCycleB = 0;
 8000a34:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <main+0x264>)
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e00f      	b.n	8000a5e <main+0x1be>
			}
		}
		else if (input == 's') {
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <main+0x258>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b73      	cmp	r3, #115	; 0x73
 8000a44:	d10b      	bne.n	8000a5e <main+0x1be>
			dutyCycleR = 0;
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <main+0x25c>)
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
			dutyCycleG = 0;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <main+0x260>)
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
			dutyCycleB = 0;
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <main+0x264>)
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]

		}
			htim2.Instance->CCR1 = (10000 - 1) * dutyCycleR;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <main+0x25c>)
 8000a60:	edd3 7a00 	vldr	s15, [r3]
 8000a64:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000b08 <main+0x268>
 8000a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <main+0x26c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a74:	ee17 2a90 	vmov	r2, s15
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR3 = (10000 - 1) * dutyCycleG;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <main+0x260>)
 8000a7c:	edd3 7a00 	vldr	s15, [r3]
 8000a80:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000b08 <main+0x268>
 8000a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <main+0x26c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a90:	ee17 2a90 	vmov	r2, s15
 8000a94:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 = (10000 - 1) * dutyCycleB;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <main+0x264>)
 8000a98:	edd3 7a00 	vldr	s15, [r3]
 8000a9c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b08 <main+0x268>
 8000aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <main+0x26c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aac:	ee17 2a90 	vmov	r2, s15
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4815      	ldr	r0, [pc, #84]	; (8000b0c <main+0x26c>)
 8000ab6:	f002 fd11 	bl	80034dc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000aba:	2108      	movs	r1, #8
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <main+0x26c>)
 8000abe:	f002 fd0d 	bl	80034dc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ac2:	210c      	movs	r1, #12
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <main+0x26c>)
 8000ac6:	f002 fd09 	bl	80034dc <HAL_TIM_PWM_Start>
	while (1) {
 8000aca:	e6fa      	b.n	80008c2 <main+0x22>
 8000acc:	f3af 8000 	nop.w
 8000ad0:	9999999a 	.word	0x9999999a
 8000ad4:	3fc99999 	.word	0x3fc99999
 8000ad8:	080054dc 	.word	0x080054dc
 8000adc:	080054ec 	.word	0x080054ec
 8000ae0:	200002b8 	.word	0x200002b8
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	20000256 	.word	0x20000256
 8000aec:	40020400 	.word	0x40020400
 8000af0:	20000257 	.word	0x20000257
 8000af4:	20000258 	.word	0x20000258
 8000af8:	20000268 	.word	0x20000268
 8000afc:	2000025c 	.word	0x2000025c
 8000b00:	20000260 	.word	0x20000260
 8000b04:	20000264 	.word	0x20000264
 8000b08:	461c3c00 	.word	0x461c3c00
 8000b0c:	2000026c 	.word	0x2000026c

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	; 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2234      	movs	r2, #52	; 0x34
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fcc8 	bl	80054b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b34:	f001 fabe 	bl	80020b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <SystemClock_Config+0xd8>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	; (8000be8 <SystemClock_Config+0xd8>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <SystemClock_Config+0xd8>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <SystemClock_Config+0xdc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a25      	ldr	r2, [pc, #148]	; (8000bec <SystemClock_Config+0xdc>)
 8000b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <SystemClock_Config+0xdc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b80:	23d8      	movs	r3, #216	; 0xd8
 8000b82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b88:	2309      	movs	r3, #9
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 faed 	bl	8002174 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ba0:	f000 f826 	bl	8000bf0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ba4:	f001 fa96 	bl	80020d4 <HAL_PWREx_EnableOverDrive>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bae:	f000 f81f 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2107      	movs	r1, #7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fd7d 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bdc:	f000 f808 	bl	8000bf0 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3750      	adds	r7, #80	; 0x50
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c32:	2005      	movs	r0, #5
 8000c34:	f000 fbd6 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 fab2 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000cf6:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000cf8:	226b      	movs	r2, #107	; 0x6b
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000d02:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d04:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d16:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d18:	f002 fb28 	bl	800336c <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f7ff ff65 	bl	8000bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4828      	ldr	r0, [pc, #160]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d34:	f002 fde0 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d3e:	f7ff ff57 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d42:	4824      	ldr	r0, [pc, #144]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d44:	f002 fb69 	bl	800341a <HAL_TIM_PWM_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d4e:	f7ff ff4f 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d62:	f003 fa51 	bl	8004208 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d6c:	f7ff ff40 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d70:	2360      	movs	r3, #96	; 0x60
 8000d72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000d74:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000d8a:	f002 fca1 	bl	80036d0 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d94:	f7ff ff2c 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000da0:	f002 fc96 	bl	80036d0 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000daa:	f7ff ff21 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	220c      	movs	r2, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000db6:	f002 fc8b 	bl	80036d0 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000dc0:	f7ff ff16 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <MX_TIM2_Init+0x118>)
 8000dc6:	f000 f825 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000dca:	bf00      	nop
 8000dcc:	3738      	adds	r7, #56	; 0x38
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000026c 	.word	0x2000026c

08000dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d10b      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_Base_MspInit+0x38>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_TIM_Base_MspInit+0x38>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_TIM_Base_MspInit+0x38>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d138      	bne.n	8000ea8 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_TIM_MspPostInit+0x9c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_TIM_MspPostInit+0x9c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_TIM_MspPostInit+0x9c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_TIM_MspPostInit+0x9c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <HAL_TIM_MspPostInit+0x9c>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_TIM_MspPostInit+0x9c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000e66:	2309      	movs	r3, #9
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e76:	2301      	movs	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e82:	f000 fe09 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_TIM_MspPostInit+0xa4>)
 8000ea4:	f000 fdf8 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400

08000ebc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ec2:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <MX_USART3_UART_Init+0x5c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART3_UART_Init+0x58>)
 8000f00:	f003 fa10 	bl	8004324 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f7ff fe71 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200002b8 	.word	0x200002b8
 8000f18:	40004800 	.word	0x40004800

08000f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ae      	sub	sp, #184	; 0xb8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2290      	movs	r2, #144	; 0x90
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fab9 	bl	80054b4 <memset>
  if(uartHandle->Instance==USART3)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <HAL_UART_MspInit+0xb4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d13c      	bne.n	8000fc6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fdde 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f66:	f7ff fe43 	bl	8000bf0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HAL_UART_MspInit+0xb8>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_UART_MspInit+0xb8>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_UART_MspInit+0xb8>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_UART_MspInit+0xb8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_UART_MspInit+0xb8>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_UART_MspInit+0xb8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_UART_MspInit+0xbc>)
 8000fc2:	f000 fd69 	bl	8001a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	37b8      	adds	r7, #184	; 0xb8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40004800 	.word	0x40004800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2206      	movs	r2, #6
 8000fec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2201      	movs	r2, #1
 8001004:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2201      	movs	r2, #1
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	f000 feff 	bl	8001e22 <HAL_PCD_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fde1 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000340 	.word	0x20000340

08001038 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ae      	sub	sp, #184	; 0xb8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2290      	movs	r2, #144	; 0x90
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fa2b 	bl	80054b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001066:	d159      	bne.n	800111c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001068:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800106c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fd4f 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001084:	f7ff fdb4 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_PCD_MspInit+0xec>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a25      	ldr	r2, [pc, #148]	; (8001124 <HAL_PCD_MspInit+0xec>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_PCD_MspInit+0xec>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ba:	230a      	movs	r3, #10
 80010bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4818      	ldr	r0, [pc, #96]	; (8001128 <HAL_PCD_MspInit+0xf0>)
 80010c8:	f000 fce6 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <HAL_PCD_MspInit+0xf0>)
 80010e8:	f000 fcd6 	bl	8001a98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_PCD_MspInit+0xec>)
 80010ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_PCD_MspInit+0xec>)
 80010f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f6:	6353      	str	r3, [r2, #52]	; 0x34
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_PCD_MspInit+0xec>)
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_PCD_MspInit+0xec>)
 8001106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_PCD_MspInit+0xec>)
 800110a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110e:	6453      	str	r3, [r2, #68]	; 0x44
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_PCD_MspInit+0xec>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	37b8      	adds	r7, #184	; 0xb8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001156:	f7ff fd9f 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f004 f987 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fb9f 	bl	80008a0 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001170:	08005518 	.word	0x08005518
  ldr r2, =_sbss
 8001174:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001178:	2000084c 	.word	0x2000084c

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>

0800117e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f92e 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f805 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118e:	f7ff fd35 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f93b 	bl	8001432 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f911 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	20000848 	.word	0x20000848

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000848 	.word	0x20000848

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00
 80012c4:	05fa0000 	.word	0x05fa0000

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff47 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff5c 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff8e 	bl	8001338 <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffb0 	bl	80013a0 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06a      	b.n	8001534 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2223      	movs	r2, #35	; 0x23
 800146c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff f8b9 	bl	80005e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <HAL_ETH_Init+0xf0>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a30      	ldr	r2, [pc, #192]	; (800153c <HAL_ETH_Init+0xf0>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <HAL_ETH_Init+0xf0>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_ETH_Init+0xf4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <HAL_ETH_Init+0xf4>)
 8001494:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001498:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <HAL_ETH_Init+0xf4>)
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <HAL_ETH_Init+0xf4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_ETH_Init+0xf4>)
 80014aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c4:	f7ff feac 	bl	8001220 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014ca:	e011      	b.n	80014f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014cc:	f7ff fea8 	bl	8001220 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014da:	d909      	bls.n	80014f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2204      	movs	r2, #4
 80014e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	22e0      	movs	r2, #224	; 0xe0
 80014e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e021      	b.n	8001534 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1e4      	bne.n	80014cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f958 	bl	80017b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f9ff 	bl	800190c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fa55 	bl	80019be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	461a      	mov	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f9bd 	bl	800189c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2210      	movs	r2, #16
 800152e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800

08001544 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <ETH_SetMACConfig+0x15c>)
 800155a:	4013      	ands	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	7c1b      	ldrb	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <ETH_SetMACConfig+0x28>
 8001566:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800156a:	e000      	b.n	800156e <ETH_SetMACConfig+0x2a>
 800156c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	7c5b      	ldrb	r3, [r3, #17]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <ETH_SetMACConfig+0x38>
 8001576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157a:	e000      	b.n	800157e <ETH_SetMACConfig+0x3a>
 800157c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800157e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001584:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7fdb      	ldrb	r3, [r3, #31]
 800158a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800158c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001592:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	7f92      	ldrb	r2, [r2, #30]
 8001598:	2a00      	cmp	r2, #0
 800159a:	d102      	bne.n	80015a2 <ETH_SetMACConfig+0x5e>
 800159c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0x60>
 80015a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80015a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	7f1b      	ldrb	r3, [r3, #28]
 80015aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d102      	bne.n	80015cc <ETH_SetMACConfig+0x88>
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	e000      	b.n	80015ce <ETH_SetMACConfig+0x8a>
 80015cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	7bdb      	ldrb	r3, [r3, #15]
 80015d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015e6:	4313      	orrs	r3, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fe1a 	bl	8001238 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f64f 7341 	movw	r3, #65345	; 0xff41
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800162a:	2a00      	cmp	r2, #0
 800162c:	d101      	bne.n	8001632 <ETH_SetMACConfig+0xee>
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	e000      	b.n	8001634 <ETH_SetMACConfig+0xf0>
 8001632:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001634:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800163a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001642:	2a01      	cmp	r2, #1
 8001644:	d101      	bne.n	800164a <ETH_SetMACConfig+0x106>
 8001646:	2208      	movs	r2, #8
 8001648:	e000      	b.n	800164c <ETH_SetMACConfig+0x108>
 800164a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800164c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001654:	2a01      	cmp	r2, #1
 8001656:	d101      	bne.n	800165c <ETH_SetMACConfig+0x118>
 8001658:	2204      	movs	r2, #4
 800165a:	e000      	b.n	800165e <ETH_SetMACConfig+0x11a>
 800165c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800165e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001666:	2a01      	cmp	r2, #1
 8001668:	d101      	bne.n	800166e <ETH_SetMACConfig+0x12a>
 800166a:	2202      	movs	r2, #2
 800166c:	e000      	b.n	8001670 <ETH_SetMACConfig+0x12c>
 800166e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001670:	4313      	orrs	r3, r2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fdd5 	bl	8001238 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	ff20810f 	.word	0xff20810f

080016a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <ETH_SetDMAConfig+0x110>)
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7b1b      	ldrb	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <ETH_SetDMAConfig+0x2c>
 80016ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ce:	e000      	b.n	80016d2 <ETH_SetDMAConfig+0x2e>
 80016d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	7b5b      	ldrb	r3, [r3, #13]
 80016d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	7f52      	ldrb	r2, [r2, #29]
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d102      	bne.n	80016e8 <ETH_SetDMAConfig+0x44>
 80016e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016e6:	e000      	b.n	80016ea <ETH_SetDMAConfig+0x46>
 80016e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	7b9b      	ldrb	r3, [r3, #14]
 80016f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	7f1b      	ldrb	r3, [r3, #28]
 80016fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001700:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	7f9b      	ldrb	r3, [r3, #30]
 8001706:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001708:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800170e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001716:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001718:	4313      	orrs	r3, r2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff fd7c 	bl	8001238 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001748:	461a      	mov	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001758:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800175e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001764:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800176c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800176e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001776:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800177c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001786:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800178a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fd4d 	bl	8001238 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	f8de3f23 	.word	0xf8de3f23

080017b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a6      	sub	sp, #152	; 0x98
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017f4:	2300      	movs	r3, #0
 80017f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800181a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800182c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fe86 	bl	8001544 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001838:	2301      	movs	r3, #1
 800183a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800183c:	2301      	movs	r3, #1
 800183e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001864:	2301      	movs	r3, #1
 8001866:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800186e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001872:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	4619      	mov	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff08 	bl	80016a4 <ETH_SetDMAConfig>
}
 8001894:	bf00      	nop
 8001896:	3798      	adds	r7, #152	; 0x98
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3305      	adds	r3, #5
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	3204      	adds	r2, #4
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <ETH_MACAddressConfig+0x68>)
 80018be:	4413      	add	r3, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3303      	adds	r3, #3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	061a      	lsls	r2, r3, #24
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3302      	adds	r3, #2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	4313      	orrs	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <ETH_MACAddressConfig+0x6c>)
 80018ee:	4413      	add	r3, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40028040 	.word	0x40028040
 8001908:	40028044 	.word	0x40028044

0800190c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e03e      	b.n	8001998 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68d9      	ldr	r1, [r3, #12]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	3206      	adds	r2, #6
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d80c      	bhi.n	800197c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68d9      	ldr	r1, [r3, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	e004      	b.n	8001986 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	461a      	mov	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d9bd      	bls.n	800191a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b0:	611a      	str	r2, [r3, #16]
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e046      	b.n	8001a5a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6919      	ldr	r1, [r3, #16]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a08:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a10:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	3212      	adds	r2, #18
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d80c      	bhi.n	8001a4a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6919      	ldr	r1, [r3, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	e004      	b.n	8001a54 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d9b5      	bls.n	80019cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	60da      	str	r2, [r3, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e175      	b.n	8001da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8164 	bne.w	8001d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_GPIO_Init+0x56>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80be 	beq.w	8001d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c3a:	4a61      	ldr	r2, [pc, #388]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d037      	beq.n	8001cd6 <HAL_GPIO_Init+0x23e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_GPIO_Init+0x23a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02b      	beq.n	8001cce <HAL_GPIO_Init+0x236>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <HAL_GPIO_Init+0x338>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d025      	beq.n	8001cca <HAL_GPIO_Init+0x232>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <HAL_GPIO_Init+0x33c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01f      	beq.n	8001cc6 <HAL_GPIO_Init+0x22e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a53      	ldr	r2, [pc, #332]	; (8001dd8 <HAL_GPIO_Init+0x340>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0x22a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_GPIO_Init+0x344>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a51      	ldr	r2, [pc, #324]	; (8001de0 <HAL_GPIO_Init+0x348>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <HAL_GPIO_Init+0x34c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e012      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	e010      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae86 	bls.w	8001ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40021800 	.word	0x40021800
 8001de0:	40021c00 	.word	0x40021c00
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40022400 	.word	0x40022400
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e24:	b08f      	sub	sp, #60	; 0x3c
 8001e26:	af0a      	add	r7, sp, #40	; 0x28
 8001e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e116      	b.n	8002062 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff f8f2 	bl	8001038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 f85e 	bl	8004f34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	687e      	ldr	r6, [r7, #4]
 8001e80:	466d      	mov	r5, sp
 8001e82:	f106 0410 	add.w	r4, r6, #16
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e96:	1d33      	adds	r3, r6, #4
 8001e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9a:	6838      	ldr	r0, [r7, #0]
 8001e9c:	f002 fff2 	bl	8004e84 <USB_CoreInit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0d7      	b.n	8002062 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f84c 	bl	8004f56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e04a      	b.n	8001f5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	333d      	adds	r3, #61	; 0x3d
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	333c      	adds	r3, #60	; 0x3c
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	b298      	uxth	r0, r3
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	3344      	adds	r3, #68	; 0x44
 8001f00:	4602      	mov	r2, r0
 8001f02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3340      	adds	r3, #64	; 0x40
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3348      	adds	r3, #72	; 0x48
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	334c      	adds	r3, #76	; 0x4c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3354      	adds	r3, #84	; 0x54
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	3301      	adds	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3af      	bcc.n	8001ec4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e044      	b.n	8001ff4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3b5      	bcc.n	8001f6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	687e      	ldr	r6, [r7, #4]
 8002006:	466d      	mov	r5, sp
 8002008:	f106 0410 	add.w	r4, r6, #16
 800200c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002018:	e885 0003 	stmia.w	r5, {r0, r1}
 800201c:	1d33      	adds	r3, r6, #4
 800201e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002020:	6838      	ldr	r0, [r7, #0]
 8002022:	f002 ffe5 	bl	8004ff0 <USB_DevInit>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e014      	b.n	8002062 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f80b 	bl	800206c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 f9a3 	bl	80053a6 <USB_DevDisconnect>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800206c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800209c:	4313      	orrs	r3, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	10000003 	.word	0x10000003

080020b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002102:	f7ff f88d 	bl	8001220 <HAL_GetTick>
 8002106:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002108:	e009      	b.n	800211e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210a:	f7ff f889 	bl	8001220 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002118:	d901      	bls.n	800211e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e022      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212a:	d1ee      	bne.n	800210a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002136:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002138:	f7ff f872 	bl	8001220 <HAL_GetTick>
 800213c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800213e:	e009      	b.n	8002154 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002140:	f7ff f86e 	bl	8001220 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214e:	d901      	bls.n	8002154 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e007      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002160:	d1ee      	bne.n	8002140 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000

08002174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e29b      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b96      	ldr	r3, [pc, #600]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00c      	beq.n	80021be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a4:	4b93      	ldr	r3, [pc, #588]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d112      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62>
 80021b0:	4b90      	ldr	r3, [pc, #576]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	4b8d      	ldr	r3, [pc, #564]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x130>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d168      	bne.n	80022a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e275      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x7a>
 80021e0:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a83      	ldr	r2, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e02e      	b.n	800224c <HAL_RCC_OscConfig+0xd8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x9c>
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7b      	ldr	r2, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xd8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0xc0>
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a72      	ldr	r2, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xd8>
 8002234:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6b      	ldr	r2, [pc, #428]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe ffe4 	bl	8001220 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe ffe0 	bl	8001220 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e229      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xe8>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ffd0 	bl	8001220 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe ffcc 	bl	8001220 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e215      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x110>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d069      	beq.n	8002386 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x190>
 80022ca:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x17a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1e9      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	493d      	ldr	r1, [pc, #244]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e040      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff82 	bl	8001220 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe ff7e 	bl	8001220 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1c7      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4929      	ldr	r1, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ff5e 	bl	8001220 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe ff5a 	bl	8001220 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1a3      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d038      	beq.n	8002404 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe ff3b 	bl	8001220 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe ff37 	bl	8001220 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e180      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x23a>
 80023cc:	e01a      	b.n	8002404 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7fe ff21 	bl	8001220 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e2:	f7fe ff1d 	bl	8001220 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d903      	bls.n	80023f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e166      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
 80023f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	4b92      	ldr	r3, [pc, #584]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ee      	bne.n	80023e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a4 	beq.w	800255a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b89      	ldr	r3, [pc, #548]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a88      	ldr	r2, [pc, #544]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b86      	ldr	r3, [pc, #536]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243a:	4b83      	ldr	r3, [pc, #524]	; (8002648 <HAL_RCC_OscConfig+0x4d4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002446:	4b80      	ldr	r3, [pc, #512]	; (8002648 <HAL_RCC_OscConfig+0x4d4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7f      	ldr	r2, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x4d4>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7fe fee5 	bl	8001220 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7fe fee1 	bl	8001220 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e12a      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246c:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x4d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x31a>
 8002480:	4b70      	ldr	r3, [pc, #448]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a6f      	ldr	r2, [pc, #444]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x33c>
 8002496:	4b6b      	ldr	r3, [pc, #428]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
 80024a2:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a67      	ldr	r2, [pc, #412]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x35e>
 80024b8:	4b62      	ldr	r3, [pc, #392]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a61      	ldr	r2, [pc, #388]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
 80024c4:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a5e      	ldr	r2, [pc, #376]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
 80024d2:	4b5c      	ldr	r3, [pc, #368]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a5b      	ldr	r2, [pc, #364]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fe95 	bl	8001220 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fe91 	bl	8001220 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0d8      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x386>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe fe7f 	bl	8001220 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fe7b 	bl	8001220 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0c2      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a3c      	ldr	r2, [pc, #240]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80ae 	beq.w	80026c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d06d      	beq.n	800264c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d14b      	bne.n	8002610 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fe4c 	bl	8001220 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fe48 	bl	8001220 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e091      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	491b      	ldr	r1, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fe1a 	bl	8001220 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fe16 	bl	8001220 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e05f      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x47c>
 800260e:	e057      	b.n	80026c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fe00 	bl	8001220 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fdfc 	bl	8001220 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e045      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x4b0>
 8002642:	e03d      	b.n	80026c0 <HAL_RCC_OscConfig+0x54c>
 8002644:	40023800 	.word	0x40023800
 8002648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <HAL_RCC_OscConfig+0x558>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d030      	beq.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d129      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d122      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002682:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002684:	4293      	cmp	r3, r2
 8002686:	d119      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d10f      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 020f 	bic.w	r2, r3, #15
 80026fe:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c4:	f7fe fd2c 	bl	8001220 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fd28 	bl	8001220 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 020f 	bic.w	r2, r3, #15
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1cc>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1d0>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fc88 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	080054f0 	.word	0x080054f0
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b094      	sub	sp, #80	; 0x50
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	647b      	str	r3, [r7, #68]	; 0x44
 80028b4:	2300      	movs	r3, #0
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80e1 	bhi.w	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e0db      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e0:	e0db      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e6:	e0d8      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
 8002916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4621      	mov	r1, r4
 8002934:	1a51      	subs	r1, r2, r1
 8002936:	6139      	str	r1, [r7, #16]
 8002938:	4629      	mov	r1, r5
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	018b      	lsls	r3, r1, #6
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002956:	4651      	mov	r1, sl
 8002958:	018a      	lsls	r2, r1, #6
 800295a:	4651      	mov	r1, sl
 800295c:	ebb2 0801 	subs.w	r8, r2, r1
 8002960:	4659      	mov	r1, fp
 8002962:	eb63 0901 	sbc.w	r9, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb18 0303 	adds.w	r3, r8, r3
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	462b      	mov	r3, r5
 8002988:	eb49 0303 	adc.w	r3, r9, r3
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299a:	4629      	mov	r1, r5
 800299c:	024b      	lsls	r3, r1, #9
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a4:	4621      	mov	r1, r4
 80029a6:	024a      	lsls	r2, r1, #9
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029b8:	f7fd fc46 	bl	8000248 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	2200      	movs	r2, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	4611      	mov	r1, r2
 80029d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0159      	lsls	r1, r3, #5
 80029ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f2:	0150      	lsls	r0, r2, #5
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4641      	mov	r1, r8
 80029fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a18:	ebb2 040a 	subs.w	r4, r2, sl
 8002a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	00eb      	lsls	r3, r5, #3
 8002a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	4614      	mov	r4, r2
 8002a32:	461d      	mov	r5, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	18e3      	adds	r3, r4, r3
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	eb45 0303 	adc.w	r3, r5, r3
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	028b      	lsls	r3, r1, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a58:	4621      	mov	r1, r4
 8002a5a:	028a      	lsls	r2, r1, #10
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	61fa      	str	r2, [r7, #28]
 8002a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6c:	f7fd fbec 	bl	8000248 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3750      	adds	r7, #80	; 0x50
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08005500 	.word	0x08005500

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af8:	f7ff ffdc 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08005500 	.word	0x08005500

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d012      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b44:	4b69      	ldr	r3, [pc, #420]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a68      	ldr	r2, [pc, #416]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	4964      	ldr	r1, [pc, #400]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	4959      	ldr	r1, [pc, #356]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	494a      	ldr	r1, [pc, #296]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 808b 	beq.w	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a39      	ldr	r2, [pc, #228]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0c:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe fafc 	bl	8001220 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2c:	f7fe faf8 	bl	8001220 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e38f      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d035      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d02e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d114      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fac0 	bl	8001220 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fabc 	bl	8001220 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e351      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ee      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cd2:	d111      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	4901      	ldr	r1, [pc, #4]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	0ffffcff 	.word	0x0ffffcff
 8002cf8:	4bac      	ldr	r3, [pc, #688]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4aab      	ldr	r2, [pc, #684]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d02:	6093      	str	r3, [r2, #8]
 8002d04:	4ba9      	ldr	r3, [pc, #676]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	49a6      	ldr	r1, [pc, #664]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d22:	4ba2      	ldr	r3, [pc, #648]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d28:	4aa0      	ldr	r2, [pc, #640]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d32:	4b9e      	ldr	r3, [pc, #632]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	499b      	ldr	r1, [pc, #620]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d50:	4b96      	ldr	r3, [pc, #600]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5e:	4993      	ldr	r1, [pc, #588]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d72:	4b8e      	ldr	r3, [pc, #568]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d80:	498a      	ldr	r1, [pc, #552]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d94:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	4982      	ldr	r1, [pc, #520]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002db6:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4979      	ldr	r1, [pc, #484]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd8:	4b74      	ldr	r3, [pc, #464]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4971      	ldr	r1, [pc, #452]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f023 020c 	bic.w	r2, r3, #12
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	4968      	ldr	r1, [pc, #416]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1c:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	4960      	ldr	r1, [pc, #384]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	4957      	ldr	r1, [pc, #348]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e60:	4b52      	ldr	r3, [pc, #328]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	494f      	ldr	r1, [pc, #316]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4946      	ldr	r1, [pc, #280]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	493e      	ldr	r1, [pc, #248]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef6:	492d      	ldr	r1, [pc, #180]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f18:	4924      	ldr	r1, [pc, #144]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	4914      	ldr	r1, [pc, #80]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7c:	490b      	ldr	r1, [pc, #44]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	4902      	ldr	r1, [pc, #8]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fbc:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	4986      	ldr	r1, [pc, #536]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fe0:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff0:	497d      	ldr	r1, [pc, #500]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d006      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80d6 	beq.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800300c:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a75      	ldr	r2, [pc, #468]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe f902 	bl	8001220 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003020:	f7fe f8fe 	bl	8001220 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e195      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003032:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d021      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003052:	4b65      	ldr	r3, [pc, #404]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003060:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003066:	0e1b      	lsrs	r3, r3, #24
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	019a      	lsls	r2, r3, #6
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	4958      	ldr	r1, [pc, #352]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02e      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b8:	d129      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030ba:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c8:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	493e      	ldr	r1, [pc, #248]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030f6:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	f023 021f 	bic.w	r2, r3, #31
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	3b01      	subs	r3, #1
 8003106:	4938      	ldr	r1, [pc, #224]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01d      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800311a:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	0e1b      	lsrs	r3, r3, #24
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003128:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312e:	0f1b      	lsrs	r3, r3, #28
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	019a      	lsls	r2, r3, #6
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	431a      	orrs	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	071b      	lsls	r3, r3, #28
 800314e:	4926      	ldr	r1, [pc, #152]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	019a      	lsls	r2, r3, #6
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	491a      	ldr	r1, [pc, #104]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003186:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003192:	f7fe f845 	bl	8001220 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800319a:	f7fe f841 	bl	8001220 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	; 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0d8      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	f040 80ce 	bne.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fe f828 	bl	8001220 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031d4:	f7fe f824 	bl	8001220 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d904      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0bb      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ec:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f8:	d0ec      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d12a      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003222:	4b51      	ldr	r3, [pc, #324]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003230:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	0f1b      	lsrs	r3, r3, #28
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	019a      	lsls	r2, r3, #6
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	4944      	ldr	r1, [pc, #272]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003264:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	493d      	ldr	r1, [pc, #244]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800328c:	d11d      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800328e:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	0e1b      	lsrs	r3, r3, #24
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800329c:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	0f1b      	lsrs	r3, r3, #28
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	019a      	lsls	r2, r3, #6
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	4929      	ldr	r1, [pc, #164]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d028      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	019a      	lsls	r2, r3, #6
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	071b      	lsls	r3, r3, #28
 800330a:	4917      	ldr	r1, [pc, #92]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	4911      	ldr	r1, [pc, #68]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fd ff74 	bl	8001220 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800333c:	f7fd ff70 	bl	8001220 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335a:	d1ef      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e049      	b.n	8003412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fd20 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 fb6e 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e049      	b.n	80034c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d106      	bne.n	8003446 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f841 	bl	80034c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4610      	mov	r0, r2
 800345a:	f000 fb17 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_TIM_PWM_Start+0x24>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e03c      	b.n	800357a <HAL_TIM_PWM_Start+0x9e>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d109      	bne.n	800351a <HAL_TIM_PWM_Start+0x3e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	bf14      	ite	ne
 8003512:	2301      	movne	r3, #1
 8003514:	2300      	moveq	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e02f      	b.n	800357a <HAL_TIM_PWM_Start+0x9e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d109      	bne.n	8003534 <HAL_TIM_PWM_Start+0x58>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e022      	b.n	800357a <HAL_TIM_PWM_Start+0x9e>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d109      	bne.n	800354e <HAL_TIM_PWM_Start+0x72>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e015      	b.n	800357a <HAL_TIM_PWM_Start+0x9e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b10      	cmp	r3, #16
 8003552:	d109      	bne.n	8003568 <HAL_TIM_PWM_Start+0x8c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e008      	b.n	800357a <HAL_TIM_PWM_Start+0x9e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e092      	b.n	80036a8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_PWM_Start+0xb6>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003590:	e023      	b.n	80035da <HAL_TIM_PWM_Start+0xfe>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xc6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a0:	e01b      	b.n	80035da <HAL_TIM_PWM_Start+0xfe>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xd6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	e013      	b.n	80035da <HAL_TIM_PWM_Start+0xfe>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xe6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035c0:	e00b      	b.n	80035da <HAL_TIM_PWM_Start+0xfe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xf6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d0:	e003      	b.n	80035da <HAL_TIM_PWM_Start+0xfe>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2201      	movs	r2, #1
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fdea 	bl	80041bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <HAL_TIM_PWM_Start+0x1d4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_TIM_PWM_Start+0x120>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <HAL_TIM_PWM_Start+0x1d8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_PWM_Start+0x124>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_TIM_PWM_Start+0x126>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_TIM_PWM_Start+0x1d4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d01d      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_TIM_PWM_Start+0x1dc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d018      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a20      	ldr	r2, [pc, #128]	; (80036bc <HAL_TIM_PWM_Start+0x1e0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_TIM_PWM_Start+0x1e4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00e      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_TIM_PWM_Start+0x1d8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_TIM_PWM_Start+0x1e8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIM_PWM_Start+0x18a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_TIM_PWM_Start+0x1ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d115      	bne.n	8003692 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_TIM_PWM_Start+0x1f0>)
 800366e:	4013      	ands	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b06      	cmp	r3, #6
 8003676:	d015      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x1c8>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367e:	d011      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	e008      	b.n	80036a4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e000      	b.n	80036a6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40010400 	.word	0x40010400
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40001800 	.word	0x40001800
 80036cc:	00010007 	.word	0x00010007

080036d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0ff      	b.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b14      	cmp	r3, #20
 80036fa:	f200 80f0 	bhi.w	80038de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003759 	.word	0x08003759
 8003708:	080038df 	.word	0x080038df
 800370c:	080038df 	.word	0x080038df
 8003710:	080038df 	.word	0x080038df
 8003714:	08003799 	.word	0x08003799
 8003718:	080038df 	.word	0x080038df
 800371c:	080038df 	.word	0x080038df
 8003720:	080038df 	.word	0x080038df
 8003724:	080037db 	.word	0x080037db
 8003728:	080038df 	.word	0x080038df
 800372c:	080038df 	.word	0x080038df
 8003730:	080038df 	.word	0x080038df
 8003734:	0800381b 	.word	0x0800381b
 8003738:	080038df 	.word	0x080038df
 800373c:	080038df 	.word	0x080038df
 8003740:	080038df 	.word	0x080038df
 8003744:	0800385d 	.word	0x0800385d
 8003748:	080038df 	.word	0x080038df
 800374c:	080038df 	.word	0x080038df
 8003750:	080038df 	.word	0x080038df
 8003754:	0800389d 	.word	0x0800389d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fa34 	bl	8003bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0208 	orr.w	r2, r2, #8
 8003772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0204 	bic.w	r2, r2, #4
 8003782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6999      	ldr	r1, [r3, #24]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	619a      	str	r2, [r3, #24]
      break;
 8003796:	e0a5      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fa86 	bl	8003cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6999      	ldr	r1, [r3, #24]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	619a      	str	r2, [r3, #24]
      break;
 80037d8:	e084      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fadd 	bl	8003da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69da      	ldr	r2, [r3, #28]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0208 	orr.w	r2, r2, #8
 80037f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0204 	bic.w	r2, r2, #4
 8003804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	61da      	str	r2, [r3, #28]
      break;
 8003818:	e064      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fb33 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69d9      	ldr	r1, [r3, #28]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	021a      	lsls	r2, r3, #8
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	61da      	str	r2, [r3, #28]
      break;
 800385a:	e043      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fb6a 	bl	8003f3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800389a:	e023      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb9c 	bl	8003fe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
      break;
 80038e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop

080038f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e0b4      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x186>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_TIM_ConfigClockSource+0x190>)
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394c:	d03e      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0xd4>
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	f200 8087 	bhi.w	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	f000 8086 	beq.w	8003a6a <HAL_TIM_ConfigClockSource+0x172>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d87f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d01a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0xa6>
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d87b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d050      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x11a>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d877      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	d03c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d873      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d058      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x13a>
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d86f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	d064      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d86b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d060      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d867      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	2b10      	cmp	r3, #16
 800399a:	d05a      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	e062      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f000 fbe5 	bl	800417c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
      break;
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f000 fbce 	bl	800417c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ee:	609a      	str	r2, [r3, #8]
      break;
 80039f0:	e03c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 fb42 	bl	8004088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2150      	movs	r1, #80	; 0x50
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fb9b 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a10:	e02c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 fb61 	bl	80040e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2160      	movs	r1, #96	; 0x60
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fb8b 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a30:	e01c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 fb22 	bl	8004088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fb7b 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fb72 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	fffeff88 	.word	0xfffeff88

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00f      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00b      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3b      	ldr	r2, [pc, #236]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d027      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2c      	ldr	r2, [pc, #176]	; (8003ba4 <TIM_Base_SetConfig+0x118>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d023      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <TIM_Base_SetConfig+0x11c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <TIM_Base_SetConfig+0x120>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_Base_SetConfig+0x128>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_Base_SetConfig+0x12c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <TIM_Base_SetConfig+0x130>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <TIM_Base_SetConfig+0x134>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <TIM_Base_SetConfig+0x138>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <TIM_Base_SetConfig+0x13c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <TIM_Base_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0xf8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40001800 	.word	0x40001800
 8003bc4:	40001c00 	.word	0x40001c00
 8003bc8:	40002000 	.word	0x40002000

08003bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <TIM_OC1_SetConfig+0xd8>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <TIM_OC1_SetConfig+0xdc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC1_SetConfig+0x64>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <TIM_OC1_SetConfig+0xe0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <TIM_OC1_SetConfig+0xdc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_OC1_SetConfig+0x8e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <TIM_OC1_SetConfig+0xe0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	fffeff8f 	.word	0xfffeff8f
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40010400 	.word	0x40010400

08003cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f023 0210 	bic.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <TIM_OC2_SetConfig+0xe4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0320 	bic.w	r3, r3, #32
 8003cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <TIM_OC2_SetConfig+0xe8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC2_SetConfig+0x68>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <TIM_OC2_SetConfig+0xec>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10d      	bne.n	8003d34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <TIM_OC2_SetConfig+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC2_SetConfig+0x94>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <TIM_OC2_SetConfig+0xec>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d113      	bne.n	8003d6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	feff8fff 	.word	0xfeff8fff
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	40010400 	.word	0x40010400

08003da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <TIM_OC3_SetConfig+0xe0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <TIM_OC3_SetConfig+0xe4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_OC3_SetConfig+0x66>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <TIM_OC3_SetConfig+0xe8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <TIM_OC3_SetConfig+0xe4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC3_SetConfig+0x92>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <TIM_OC3_SetConfig+0xe8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	fffeff8f 	.word	0xfffeff8f
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40010400 	.word	0x40010400

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <TIM_OC4_SetConfig+0xa4>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <TIM_OC4_SetConfig+0xa8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_OC4_SetConfig+0x68>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <TIM_OC4_SetConfig+0xac>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	feff8fff 	.word	0xfeff8fff
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400

08003f3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <TIM_OC5_SetConfig+0x98>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <TIM_OC5_SetConfig+0x9c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_OC5_SetConfig+0x5e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <TIM_OC5_SetConfig+0xa0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d109      	bne.n	8003fae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	621a      	str	r2, [r3, #32]
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	fffeff8f 	.word	0xfffeff8f
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <TIM_OC6_SetConfig+0x9c>)
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	051b      	lsls	r3, r3, #20
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <TIM_OC6_SetConfig+0xa0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC6_SetConfig+0x60>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <TIM_OC6_SetConfig+0xa4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d109      	bne.n	8004054 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	feff8fff 	.word	0xfeff8fff
 8004080:	40010000 	.word	0x40010000
 8004084:	40010400 	.word	0x40010400

08004088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 030a 	bic.w	r3, r3, #10
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	031b      	lsls	r3, r3, #12
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	f043 0307 	orr.w	r3, r3, #7
 8004168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	431a      	orrs	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2201      	movs	r2, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	43db      	mvns	r3, r3
 80041de:	401a      	ands	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1a      	ldr	r2, [r3, #32]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800421c:	2302      	movs	r3, #2
 800421e:	e06d      	b.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a30      	ldr	r2, [pc, #192]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2f      	ldr	r2, [pc, #188]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d108      	bne.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800425a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d022      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d01d      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a16      	ldr	r2, [pc, #88]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10c      	bne.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40010000 	.word	0x40010000
 800430c:	40010400 	.word	0x40010400
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40014000 	.word	0x40014000
 8004320:	40001800 	.word	0x40001800

08004324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e040      	b.n	80043b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fc fde8 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2224      	movs	r2, #36	; 0x24
 8004350:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f974 	bl	8004650 <UART_SetConfig>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e022      	b.n	80043b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fbcc 	bl	8004b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800438e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800439e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fc53 	bl	8004c5c <UART_CheckIdleState>
 80043b6:	4603      	mov	r3, r0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d171      	bne.n	80044bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Transmit+0x24>
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e06a      	b.n	80044be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2221      	movs	r2, #33	; 0x21
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f6:	f7fc ff13 	bl	8001220 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x68>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004430:	e02c      	b.n	800448c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fc5a 	bl	8004cf6 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e038      	b.n	80044be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	3302      	adds	r3, #2
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e007      	b.n	800447a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1cc      	bne.n	8004432 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fc27 	bl	8004cf6 <UART_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e005      	b.n	80044be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b08a      	sub	sp, #40	; 0x28
 80044ca:	af02      	add	r7, sp, #8
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044dc:	2b20      	cmp	r3, #32
 80044de:	f040 80b1 	bne.w	8004644 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_UART_Receive+0x28>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0a9      	b.n	8004646 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2222      	movs	r2, #34	; 0x22
 80044fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004508:	f7fc fe8a 	bl	8001220 <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	d10e      	bne.n	8004546 <HAL_UART_Receive+0x80>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d105      	bne.n	800453c <HAL_UART_Receive+0x76>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800453a:	e02d      	b.n	8004598 <HAL_UART_Receive+0xd2>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	22ff      	movs	r2, #255	; 0xff
 8004540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004544:	e028      	b.n	8004598 <HAL_UART_Receive+0xd2>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_UART_Receive+0xa4>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_UART_Receive+0x9a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	22ff      	movs	r2, #255	; 0xff
 800455a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800455e:	e01b      	b.n	8004598 <HAL_UART_Receive+0xd2>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	227f      	movs	r2, #127	; 0x7f
 8004564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004568:	e016      	b.n	8004598 <HAL_UART_Receive+0xd2>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004572:	d10d      	bne.n	8004590 <HAL_UART_Receive+0xca>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_UART_Receive+0xc0>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	227f      	movs	r2, #127	; 0x7f
 8004580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004584:	e008      	b.n	8004598 <HAL_UART_Receive+0xd2>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	223f      	movs	r2, #63	; 0x3f
 800458a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800458e:	e003      	b.n	8004598 <HAL_UART_Receive+0xd2>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800459e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	d108      	bne.n	80045bc <HAL_UART_Receive+0xf6>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e003      	b.n	80045c4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045c4:	e032      	b.n	800462c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2120      	movs	r1, #32
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fb90 	bl	8004cf6 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e032      	b.n	8004646 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	8a7b      	ldrh	r3, [r7, #18]
 80045f0:	4013      	ands	r3, r2
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	3302      	adds	r3, #2
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e00c      	b.n	800461a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2da      	uxtb	r2, r3
 8004608:	8a7b      	ldrh	r3, [r7, #18]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	4013      	ands	r3, r2
 800460e:	b2da      	uxtb	r2, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	3301      	adds	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1c6      	bne.n	80045c6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4ba6      	ldr	r3, [pc, #664]	; (8004914 <UART_SetConfig+0x2c4>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	430b      	orrs	r3, r1
 8004686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a94      	ldr	r2, [pc, #592]	; (8004918 <UART_SetConfig+0x2c8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d120      	bne.n	800470e <UART_SetConfig+0xbe>
 80046cc:	4b93      	ldr	r3, [pc, #588]	; (800491c <UART_SetConfig+0x2cc>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d816      	bhi.n	8004708 <UART_SetConfig+0xb8>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0x90>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	080046f7 	.word	0x080046f7
 80046ec:	08004703 	.word	0x08004703
 80046f0:	2301      	movs	r3, #1
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e150      	b.n	8004998 <UART_SetConfig+0x348>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e14d      	b.n	8004998 <UART_SetConfig+0x348>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e14a      	b.n	8004998 <UART_SetConfig+0x348>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e147      	b.n	8004998 <UART_SetConfig+0x348>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e144      	b.n	8004998 <UART_SetConfig+0x348>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a83      	ldr	r2, [pc, #524]	; (8004920 <UART_SetConfig+0x2d0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d132      	bne.n	800477e <UART_SetConfig+0x12e>
 8004718:	4b80      	ldr	r3, [pc, #512]	; (800491c <UART_SetConfig+0x2cc>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d828      	bhi.n	8004778 <UART_SetConfig+0x128>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0xdc>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004761 	.word	0x08004761
 8004730:	08004779 	.word	0x08004779
 8004734:	08004779 	.word	0x08004779
 8004738:	08004779 	.word	0x08004779
 800473c:	0800476d 	.word	0x0800476d
 8004740:	08004779 	.word	0x08004779
 8004744:	08004779 	.word	0x08004779
 8004748:	08004779 	.word	0x08004779
 800474c:	08004767 	.word	0x08004767
 8004750:	08004779 	.word	0x08004779
 8004754:	08004779 	.word	0x08004779
 8004758:	08004779 	.word	0x08004779
 800475c:	08004773 	.word	0x08004773
 8004760:	2300      	movs	r3, #0
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e118      	b.n	8004998 <UART_SetConfig+0x348>
 8004766:	2302      	movs	r3, #2
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e115      	b.n	8004998 <UART_SetConfig+0x348>
 800476c:	2304      	movs	r3, #4
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e112      	b.n	8004998 <UART_SetConfig+0x348>
 8004772:	2308      	movs	r3, #8
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e10f      	b.n	8004998 <UART_SetConfig+0x348>
 8004778:	2310      	movs	r3, #16
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e10c      	b.n	8004998 <UART_SetConfig+0x348>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a68      	ldr	r2, [pc, #416]	; (8004924 <UART_SetConfig+0x2d4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d120      	bne.n	80047ca <UART_SetConfig+0x17a>
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <UART_SetConfig+0x2cc>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d013      	beq.n	80047be <UART_SetConfig+0x16e>
 8004796:	2b30      	cmp	r3, #48	; 0x30
 8004798:	d814      	bhi.n	80047c4 <UART_SetConfig+0x174>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d009      	beq.n	80047b2 <UART_SetConfig+0x162>
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d810      	bhi.n	80047c4 <UART_SetConfig+0x174>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <UART_SetConfig+0x15c>
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d006      	beq.n	80047b8 <UART_SetConfig+0x168>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x174>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e0f2      	b.n	8004998 <UART_SetConfig+0x348>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e0ef      	b.n	8004998 <UART_SetConfig+0x348>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e0ec      	b.n	8004998 <UART_SetConfig+0x348>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e0e9      	b.n	8004998 <UART_SetConfig+0x348>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e0e6      	b.n	8004998 <UART_SetConfig+0x348>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a56      	ldr	r2, [pc, #344]	; (8004928 <UART_SetConfig+0x2d8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d120      	bne.n	8004816 <UART_SetConfig+0x1c6>
 80047d4:	4b51      	ldr	r3, [pc, #324]	; (800491c <UART_SetConfig+0x2cc>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047de:	2bc0      	cmp	r3, #192	; 0xc0
 80047e0:	d013      	beq.n	800480a <UART_SetConfig+0x1ba>
 80047e2:	2bc0      	cmp	r3, #192	; 0xc0
 80047e4:	d814      	bhi.n	8004810 <UART_SetConfig+0x1c0>
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d009      	beq.n	80047fe <UART_SetConfig+0x1ae>
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d810      	bhi.n	8004810 <UART_SetConfig+0x1c0>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <UART_SetConfig+0x1a8>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d006      	beq.n	8004804 <UART_SetConfig+0x1b4>
 80047f6:	e00b      	b.n	8004810 <UART_SetConfig+0x1c0>
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e0cc      	b.n	8004998 <UART_SetConfig+0x348>
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e0c9      	b.n	8004998 <UART_SetConfig+0x348>
 8004804:	2304      	movs	r3, #4
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0c6      	b.n	8004998 <UART_SetConfig+0x348>
 800480a:	2308      	movs	r3, #8
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0c3      	b.n	8004998 <UART_SetConfig+0x348>
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0c0      	b.n	8004998 <UART_SetConfig+0x348>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a44      	ldr	r2, [pc, #272]	; (800492c <UART_SetConfig+0x2dc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d125      	bne.n	800486c <UART_SetConfig+0x21c>
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <UART_SetConfig+0x2cc>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482e:	d017      	beq.n	8004860 <UART_SetConfig+0x210>
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d817      	bhi.n	8004866 <UART_SetConfig+0x216>
 8004836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483a:	d00b      	beq.n	8004854 <UART_SetConfig+0x204>
 800483c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004840:	d811      	bhi.n	8004866 <UART_SetConfig+0x216>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <UART_SetConfig+0x1fe>
 8004846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x20a>
 800484c:	e00b      	b.n	8004866 <UART_SetConfig+0x216>
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e0a1      	b.n	8004998 <UART_SetConfig+0x348>
 8004854:	2302      	movs	r3, #2
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e09e      	b.n	8004998 <UART_SetConfig+0x348>
 800485a:	2304      	movs	r3, #4
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e09b      	b.n	8004998 <UART_SetConfig+0x348>
 8004860:	2308      	movs	r3, #8
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e098      	b.n	8004998 <UART_SetConfig+0x348>
 8004866:	2310      	movs	r3, #16
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e095      	b.n	8004998 <UART_SetConfig+0x348>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2f      	ldr	r2, [pc, #188]	; (8004930 <UART_SetConfig+0x2e0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d125      	bne.n	80048c2 <UART_SetConfig+0x272>
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <UART_SetConfig+0x2cc>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004884:	d017      	beq.n	80048b6 <UART_SetConfig+0x266>
 8004886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488a:	d817      	bhi.n	80048bc <UART_SetConfig+0x26c>
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004890:	d00b      	beq.n	80048aa <UART_SetConfig+0x25a>
 8004892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004896:	d811      	bhi.n	80048bc <UART_SetConfig+0x26c>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <UART_SetConfig+0x254>
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a0:	d006      	beq.n	80048b0 <UART_SetConfig+0x260>
 80048a2:	e00b      	b.n	80048bc <UART_SetConfig+0x26c>
 80048a4:	2301      	movs	r3, #1
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e076      	b.n	8004998 <UART_SetConfig+0x348>
 80048aa:	2302      	movs	r3, #2
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e073      	b.n	8004998 <UART_SetConfig+0x348>
 80048b0:	2304      	movs	r3, #4
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e070      	b.n	8004998 <UART_SetConfig+0x348>
 80048b6:	2308      	movs	r3, #8
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e06d      	b.n	8004998 <UART_SetConfig+0x348>
 80048bc:	2310      	movs	r3, #16
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e06a      	b.n	8004998 <UART_SetConfig+0x348>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <UART_SetConfig+0x2e4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d138      	bne.n	800493e <UART_SetConfig+0x2ee>
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <UART_SetConfig+0x2cc>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048da:	d017      	beq.n	800490c <UART_SetConfig+0x2bc>
 80048dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e0:	d82a      	bhi.n	8004938 <UART_SetConfig+0x2e8>
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	d00b      	beq.n	8004900 <UART_SetConfig+0x2b0>
 80048e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ec:	d824      	bhi.n	8004938 <UART_SetConfig+0x2e8>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <UART_SetConfig+0x2aa>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d006      	beq.n	8004906 <UART_SetConfig+0x2b6>
 80048f8:	e01e      	b.n	8004938 <UART_SetConfig+0x2e8>
 80048fa:	2300      	movs	r3, #0
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e04b      	b.n	8004998 <UART_SetConfig+0x348>
 8004900:	2302      	movs	r3, #2
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e048      	b.n	8004998 <UART_SetConfig+0x348>
 8004906:	2304      	movs	r3, #4
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e045      	b.n	8004998 <UART_SetConfig+0x348>
 800490c:	2308      	movs	r3, #8
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e042      	b.n	8004998 <UART_SetConfig+0x348>
 8004912:	bf00      	nop
 8004914:	efff69f3 	.word	0xefff69f3
 8004918:	40011000 	.word	0x40011000
 800491c:	40023800 	.word	0x40023800
 8004920:	40004400 	.word	0x40004400
 8004924:	40004800 	.word	0x40004800
 8004928:	40004c00 	.word	0x40004c00
 800492c:	40005000 	.word	0x40005000
 8004930:	40011400 	.word	0x40011400
 8004934:	40007800 	.word	0x40007800
 8004938:	2310      	movs	r3, #16
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e02c      	b.n	8004998 <UART_SetConfig+0x348>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <UART_SetConfig+0x4bc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x344>
 8004948:	4b71      	ldr	r3, [pc, #452]	; (8004b10 <UART_SetConfig+0x4c0>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004952:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004956:	d017      	beq.n	8004988 <UART_SetConfig+0x338>
 8004958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800495c:	d817      	bhi.n	800498e <UART_SetConfig+0x33e>
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	d00b      	beq.n	800497c <UART_SetConfig+0x32c>
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004968:	d811      	bhi.n	800498e <UART_SetConfig+0x33e>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <UART_SetConfig+0x326>
 800496e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004972:	d006      	beq.n	8004982 <UART_SetConfig+0x332>
 8004974:	e00b      	b.n	800498e <UART_SetConfig+0x33e>
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e00d      	b.n	8004998 <UART_SetConfig+0x348>
 800497c:	2302      	movs	r3, #2
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e00a      	b.n	8004998 <UART_SetConfig+0x348>
 8004982:	2304      	movs	r3, #4
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e007      	b.n	8004998 <UART_SetConfig+0x348>
 8004988:	2308      	movs	r3, #8
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e004      	b.n	8004998 <UART_SetConfig+0x348>
 800498e:	2310      	movs	r3, #16
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x348>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	d15b      	bne.n	8004a5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049a2:	7ffb      	ldrb	r3, [r7, #31]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d828      	bhi.n	80049fa <UART_SetConfig+0x3aa>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x360>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe f87a 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 80049d8:	61b8      	str	r0, [r7, #24]
        break;
 80049da:	e013      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fe f88a 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 80049e0:	61b8      	str	r0, [r7, #24]
        break;
 80049e2:	e00f      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b4b      	ldr	r3, [pc, #300]	; (8004b14 <UART_SetConfig+0x4c4>)
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e00c      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fd ff5d 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 80049ee:	61b8      	str	r0, [r7, #24]
        break;
 80049f0:	e008      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f6:	61bb      	str	r3, [r7, #24]
        break;
 80049f8:	e004      	b.n	8004a04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77bb      	strb	r3, [r7, #30]
        break;
 8004a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d074      	beq.n	8004af4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	005a      	lsls	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	441a      	add	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0f      	cmp	r3, #15
 8004a24:	d916      	bls.n	8004a54 <UART_SetConfig+0x404>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d212      	bcs.n	8004a54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f023 030f 	bic.w	r3, r3, #15
 8004a36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	89fa      	ldrh	r2, [r7, #14]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	e04f      	b.n	8004af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77bb      	strb	r3, [r7, #30]
 8004a58:	e04c      	b.n	8004af4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d828      	bhi.n	8004ab2 <UART_SetConfig+0x462>
 8004a60:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x418>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe f81e 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8004a90:	61b8      	str	r0, [r7, #24]
        break;
 8004a92:	e013      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fe f82e 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8004a98:	61b8      	str	r0, [r7, #24]
        break;
 8004a9a:	e00f      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <UART_SetConfig+0x4c4>)
 8004a9e:	61bb      	str	r3, [r7, #24]
        break;
 8004aa0:	e00c      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fd ff01 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	61b8      	str	r0, [r7, #24]
        break;
 8004aa8:	e008      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	61bb      	str	r3, [r7, #24]
        break;
 8004ab0:	e004      	b.n	8004abc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8004aba:	bf00      	nop
    }

    if (pclk != 0U)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d018      	beq.n	8004af4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	085a      	lsrs	r2, r3, #1
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b0f      	cmp	r3, #15
 8004ada:	d909      	bls.n	8004af0 <UART_SetConfig+0x4a0>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d205      	bcs.n	8004af0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	e001      	b.n	8004af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40007c00 	.word	0x40007c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400

08004b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c16:	d10a      	bne.n	8004c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c6c:	f7fc fad8 	bl	8001220 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d10e      	bne.n	8004c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f831 	bl	8004cf6 <UART_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e027      	b.n	8004cee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d10e      	bne.n	8004cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f81b 	bl	8004cf6 <UART_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e011      	b.n	8004cee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b09c      	sub	sp, #112	; 0x70
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d06:	e0a7      	b.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	f000 80a3 	beq.w	8004e58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fc fa85 	bl	8001220 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d13f      	bne.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e6      	bne.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	663b      	str	r3, [r7, #96]	; 0x60
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e5      	bne.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e068      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d050      	beq.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d148      	bne.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
 8004df0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e6      	bne.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3308      	adds	r3, #8
 8004e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	613b      	str	r3, [r7, #16]
   return(result);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f023 0301 	bic.w	r3, r3, #1
 8004e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e22:	623a      	str	r2, [r7, #32]
 8004e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	69f9      	ldr	r1, [r7, #28]
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e5      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e010      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69da      	ldr	r2, [r3, #28]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	f43f af48 	beq.w	8004d08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3770      	adds	r7, #112	; 0x70
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e84:	b084      	sub	sp, #16
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	f107 001c 	add.w	r0, r7, #28
 8004e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d120      	bne.n	8004ede <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <USB_CoreInit+0xac>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d105      	bne.n	8004ed2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa96 	bl	8005404 <USB_CoreReset>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	73fb      	strb	r3, [r7, #15]
 8004edc:	e010      	b.n	8004f00 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fa8a 	bl	8005404 <USB_CoreReset>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10b      	bne.n	8004f1e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f043 0206 	orr.w	r2, r3, #6
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f2a:	b004      	add	sp, #16
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	ffbdffbf 	.word	0xffbdffbf

08004f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 0201 	bic.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d115      	bne.n	8004fa4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f84:	2001      	movs	r0, #1
 8004f86:	f7fc f957 	bl	8001238 <HAL_Delay>
      ms++;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa29 	bl	80053e8 <USB_GetMode>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d01e      	beq.n	8004fda <USB_SetCurrentMode+0x84>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b31      	cmp	r3, #49	; 0x31
 8004fa0:	d9f0      	bls.n	8004f84 <USB_SetCurrentMode+0x2e>
 8004fa2:	e01a      	b.n	8004fda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d115      	bne.n	8004fd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7fc f93e 	bl	8001238 <HAL_Delay>
      ms++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa10 	bl	80053e8 <USB_GetMode>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <USB_SetCurrentMode+0x84>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b31      	cmp	r3, #49	; 0x31
 8004fd2:	d9f0      	bls.n	8004fb6 <USB_SetCurrentMode+0x60>
 8004fd4:	e001      	b.n	8004fda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e005      	b.n	8004fe6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b32      	cmp	r3, #50	; 0x32
 8004fde:	d101      	bne.n	8004fe4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e009      	b.n	8005024 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3340      	adds	r3, #64	; 0x40
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b0e      	cmp	r3, #14
 8005028:	d9f2      	bls.n	8005010 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11c      	bne.n	800506a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800503e:	f043 0302 	orr.w	r3, r3, #2
 8005042:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e005      	b.n	8005076 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800507c:	461a      	mov	r2, r3
 800507e:	2300      	movs	r3, #0
 8005080:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005088:	4619      	mov	r1, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	461a      	mov	r2, r3
 8005092:	680b      	ldr	r3, [r1, #0]
 8005094:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10c      	bne.n	80050b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050a2:	2100      	movs	r1, #0
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f965 	bl	8005374 <USB_SetDevSpeed>
 80050aa:	e008      	b.n	80050be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050ac:	2101      	movs	r1, #1
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f960 	bl	8005374 <USB_SetDevSpeed>
 80050b4:	e003      	b.n	80050be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050b6:	2103      	movs	r1, #3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f95b 	bl	8005374 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050be:	2110      	movs	r1, #16
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8f3 	bl	80052ac <USB_FlushTxFifo>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f91f 	bl	8005314 <USB_FlushRxFifo>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f2:	461a      	mov	r2, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	461a      	mov	r2, r3
 8005100:	2300      	movs	r3, #0
 8005102:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	e043      	b.n	8005192 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800511c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005120:	d118      	bne.n	8005154 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	461a      	mov	r2, r3
 8005136:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e013      	b.n	8005166 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	461a      	mov	r2, r3
 800514c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e008      	b.n	8005166 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	2300      	movs	r3, #0
 8005164:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800518a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	3301      	adds	r3, #1
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	429a      	cmp	r2, r3
 8005198:	d3b7      	bcc.n	800510a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	e043      	b.n	8005228 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b6:	d118      	bne.n	80051ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	461a      	mov	r2, r3
 80051cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e013      	b.n	80051fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	e008      	b.n	80051fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005208:	461a      	mov	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005220:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	3301      	adds	r3, #1
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d3b7      	bcc.n	80051a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800523e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005242:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005250:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f043 0210 	orr.w	r2, r3, #16
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <USB_DevInit+0x2b4>)
 800526a:	4313      	orrs	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f043 0208 	orr.w	r2, r3, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <USB_DevInit+0x2b8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a0:	b004      	add	sp, #16
 80052a2:	4770      	bx	lr
 80052a4:	803c3800 	.word	0x803c3800
 80052a8:	40000004 	.word	0x40000004

080052ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <USB_FlushTxFifo+0x64>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e01b      	b.n	8005304 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	daf2      	bge.n	80052ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	019b      	lsls	r3, r3, #6
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a08      	ldr	r2, [pc, #32]	; (8005310 <USB_FlushTxFifo+0x64>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e006      	b.n	8005304 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d0f0      	beq.n	80052e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	00030d40 	.word	0x00030d40

08005314 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4a11      	ldr	r2, [pc, #68]	; (8005370 <USB_FlushRxFifo+0x5c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e018      	b.n	8005364 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	daf2      	bge.n	8005320 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2210      	movs	r2, #16
 8005342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <USB_FlushRxFifo+0x5c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e006      	b.n	8005364 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b10      	cmp	r3, #16
 8005360:	d0f0      	beq.n	8005344 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	00030d40 	.word	0x00030d40

08005374 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053c0:	f023 0303 	bic.w	r3, r3, #3
 80053c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0301 	and.w	r3, r3, #1
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <USB_CoreReset+0x64>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e01b      	b.n	800545a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	daf2      	bge.n	8005410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f043 0201 	orr.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3301      	adds	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <USB_CoreReset+0x64>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d0f0      	beq.n	800543a <USB_CoreReset+0x36>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	00030d40 	.word	0x00030d40

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 f820 	bl	80054c4 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08005510 	.word	0x08005510
 80054a8:	08005510 	.word	0x08005510
 80054ac:	08005510 	.word	0x08005510
 80054b0:	08005514 	.word	0x08005514

080054b4 <memset>:
 80054b4:	4402      	add	r2, r0
 80054b6:	4603      	mov	r3, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
