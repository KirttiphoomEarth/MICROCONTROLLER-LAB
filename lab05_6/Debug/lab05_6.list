
lab05_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08006d20  08006d20  00016d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071ac  080071ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080071ac  080071ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b4  080071b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b4  080071b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001dc  08007398  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08007398  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0f4  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002185  00000000  00000000  0002d2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002896c  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc12  00000000  00000000  00058ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7cc2  00000000  00000000  00066c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e8d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  0015e920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006d08 	.word	0x08006d08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006d08 	.word	0x08006d08

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000608:	4a52      	ldr	r2, [pc, #328]	; (8000754 <MX_ADC1_Init+0x160>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800060c:	4b50      	ldr	r3, [pc, #320]	; (8000750 <MX_ADC1_Init+0x15c>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <MX_ADC1_Init+0x15c>)
 800061a:	2201      	movs	r2, #1
 800061c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b4a      	ldr	r3, [pc, #296]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b48      	ldr	r3, [pc, #288]	; (8000750 <MX_ADC1_Init+0x15c>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b47      	ldr	r3, [pc, #284]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000634:	4a48      	ldr	r2, [pc, #288]	; (8000758 <MX_ADC1_Init+0x164>)
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b45      	ldr	r3, [pc, #276]	; (8000750 <MX_ADC1_Init+0x15c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800063e:	4b44      	ldr	r3, [pc, #272]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000640:	2208      	movs	r2, #8
 8000642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000644:	4b42      	ldr	r3, [pc, #264]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000646:	2201      	movs	r2, #1
 8000648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b40      	ldr	r3, [pc, #256]	; (8000750 <MX_ADC1_Init+0x15c>)
 800064e:	2201      	movs	r2, #1
 8000650:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000652:	483f      	ldr	r0, [pc, #252]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000654:	f000 fcce 	bl	8000ff4 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800065e:	f000 fa59 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000662:	2303      	movs	r3, #3
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2301      	movs	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800066a:	2301      	movs	r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4837      	ldr	r0, [pc, #220]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000674:	f000 fe10 	bl	8001298 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800067e:	f000 fa49 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000682:	230a      	movs	r3, #10
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000686:	2302      	movs	r3, #2
 8000688:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4830      	ldr	r0, [pc, #192]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000690:	f000 fe02 	bl	8001298 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800069a:	f000 fa3b 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800069e:	230d      	movs	r3, #13
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	4829      	ldr	r0, [pc, #164]	; (8000750 <MX_ADC1_Init+0x15c>)
 80006ac:	f000 fdf4 	bl	8001298 <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80006b6:	f000 fa2d 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006be:	2304      	movs	r3, #4
 80006c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4822      	ldr	r0, [pc, #136]	; (8000750 <MX_ADC1_Init+0x15c>)
 80006c8:	f000 fde6 	bl	8001298 <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006d2:	f000 fa1f 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d6:	2309      	movs	r3, #9
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006da:	2305      	movs	r3, #5
 80006dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	481b      	ldr	r0, [pc, #108]	; (8000750 <MX_ADC1_Init+0x15c>)
 80006e4:	f000 fdd8 	bl	8001298 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006ee:	f000 fa11 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006f2:	230c      	movs	r3, #12
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006f6:	2306      	movs	r3, #6
 80006f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000700:	f000 fdca 	bl	8001298 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800070a:	f000 fa03 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070e:	2305      	movs	r3, #5
 8000710:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000712:	2307      	movs	r3, #7
 8000714:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_ADC1_Init+0x15c>)
 800071c:	f000 fdbc 	bl	8001298 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000726:	f000 f9f5 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800072a:	2306      	movs	r3, #6
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800072e:	2308      	movs	r3, #8
 8000730:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_ADC1_Init+0x15c>)
 8000738:	f000 fdae 	bl	8001298 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000742:	f000 f9e7 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001f8 	.word	0x200001f8
 8000754:	40012000 	.word	0x40012000
 8000758:	0f000001 	.word	0x0f000001

0800075c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a45      	ldr	r2, [pc, #276]	; (8000890 <HAL_ADC_MspInit+0x134>)
 800077a:	4293      	cmp	r3, r2
 800077c:	f040 8084 	bne.w	8000888 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <HAL_ADC_MspInit+0x138>)
 8000782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000784:	4a43      	ldr	r2, [pc, #268]	; (8000894 <HAL_ADC_MspInit+0x138>)
 8000786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078a:	6453      	str	r3, [r2, #68]	; 0x44
 800078c:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_ADC_MspInit+0x138>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_ADC_MspInit+0x138>)
 800079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079c:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <HAL_ADC_MspInit+0x138>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6313      	str	r3, [r2, #48]	; 0x30
 80007a4:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b38      	ldr	r3, [pc, #224]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4a37      	ldr	r2, [pc, #220]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
 80007bc:	4b35      	ldr	r3, [pc, #212]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c8:	4b32      	ldr	r3, [pc, #200]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	4a31      	ldr	r2, [pc, #196]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30
 80007d4:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <HAL_ADC_MspInit+0x138>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80007e0:	230d      	movs	r3, #13
 80007e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4829      	ldr	r0, [pc, #164]	; (8000898 <HAL_ADC_MspInit+0x13c>)
 80007f4:	f001 fcac 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80007f8:	2369      	movs	r3, #105	; 0x69
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4824      	ldr	r0, [pc, #144]	; (800089c <HAL_ADC_MspInit+0x140>)
 800080c:	f001 fca0 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	481f      	ldr	r0, [pc, #124]	; (80008a0 <HAL_ADC_MspInit+0x144>)
 8000824:	f001 fc94 	bl	8002150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <HAL_ADC_MspInit+0x14c>)
 800082c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800086e:	f001 f8f7 	bl	8001a60 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8000878:	f000 f94c 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000888:	bf00      	nop
 800088a:	3730      	adds	r7, #48	; 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	20000240 	.word	0x20000240
 80008a8:	40026410 	.word	0x40026410

080008ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_DMA_Init+0x38>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <MX_DMA_Init+0x38>)
 80008b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_DMA_Init+0x38>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	2038      	movs	r0, #56	; 0x38
 80008d0:	f001 f88f 	bl	80019f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d4:	2038      	movs	r0, #56	; 0x38
 80008d6:	f001 f8a8 	bl	8001a2a <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_GPIO_Init+0xa4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <MX_GPIO_Init+0xa4>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0xa4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_GPIO_Init+0xa4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_GPIO_Init+0xa4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_GPIO_Init+0xa4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_GPIO_Init+0xa4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <MX_GPIO_Init+0xa4>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_GPIO_Init+0xa4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_GPIO_Init+0xa4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <MX_GPIO_Init+0xa4>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_GPIO_Init+0xa4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_GPIO_Init+0xa8>)
 8000964:	f001 fda0 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_GPIO_Init+0xa8>)
 8000980:	f001 fbe6 	bl	8002150 <HAL_GPIO_Init>

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	b0a3      	sub	sp, #140	; 0x8c
 8000998:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 faaa 	bl	8000ef2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f849 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f7ff ffa1 	bl	80008e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009a6:	f7ff fe25 	bl	80005f4 <MX_ADC1_Init>
  MX_DMA_Init();
 80009aa:	f7ff ff7f 	bl	80008ac <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009ae:	f000 f9e7 	bl	8000d80 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_val, 7);
 80009b2:	2207      	movs	r2, #7
 80009b4:	491b      	ldr	r1, [pc, #108]	; (8000a24 <main+0x90>)
 80009b6:	481c      	ldr	r0, [pc, #112]	; (8000a28 <main+0x94>)
 80009b8:	f000 fb60 	bl	800107c <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */

	  char b[100];
//	  sprintf(b, "ADC1 PIN = %d, 0x%08X, Vin = %.2f real value = %d\n\r",temp[1],  adc_val[], value[i] * 3.3 /4095, value[i]);
	  sprintf(b, "adc1 = %d, adc2 = %d, adc3 = %d, adc4 = %d, adc5 = %d, adc6 = %d, adc7 = %d, adc8 = %d\n\r",adc_val[0],adc_val[1],adc_val[2],adc_val[3],adc_val[4],adc_val[5],adc_val[6],adc_val[7]);
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <main+0x90>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <main+0x90>)
 80009c4:	6859      	ldr	r1, [r3, #4]
 80009c6:	6039      	str	r1, [r7, #0]
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <main+0x90>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <main+0x90>)
 80009ce:	68d2      	ldr	r2, [r2, #12]
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <main+0x90>)
 80009d2:	6909      	ldr	r1, [r1, #16]
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <main+0x90>)
 80009d6:	6940      	ldr	r0, [r0, #20]
 80009d8:	4c12      	ldr	r4, [pc, #72]	; (8000a24 <main+0x90>)
 80009da:	69a4      	ldr	r4, [r4, #24]
 80009dc:	4d11      	ldr	r5, [pc, #68]	; (8000a24 <main+0x90>)
 80009de:	69ed      	ldr	r5, [r5, #28]
 80009e0:	f107 060c 	add.w	r6, r7, #12
 80009e4:	9505      	str	r5, [sp, #20]
 80009e6:	9404      	str	r4, [sp, #16]
 80009e8:	9003      	str	r0, [sp, #12]
 80009ea:	9102      	str	r1, [sp, #8]
 80009ec:	9201      	str	r2, [sp, #4]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	490d      	ldr	r1, [pc, #52]	; (8000a2c <main+0x98>)
 80009f6:	4630      	mov	r0, r6
 80009f8:	f003 ff8c 	bl	8004914 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint32_t*) b, strlen(b), 1000);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fc1d 	bl	8000240 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f107 010c 	add.w	r1, r7, #12
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <main+0x9c>)
 8000a14:	f002 fe6c 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay(300);
 8000a18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a1c:	f000 fac6 	bl	8000fac <HAL_Delay>
  {
 8000a20:	e7cc      	b.n	80009bc <main+0x28>
 8000a22:	bf00      	nop
 8000a24:	200002a0 	.word	0x200002a0
 8000a28:	200001f8 	.word	0x200001f8
 8000a2c:	08006d54 	.word	0x08006d54
 8000a30:	200002c0 	.word	0x200002c0

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2234      	movs	r2, #52	; 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fb1c 	bl	8004080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <SystemClock_Config+0xb0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <SystemClock_Config+0xb0>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <SystemClock_Config+0xb0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <SystemClock_Config+0xb4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <SystemClock_Config+0xb4>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <SystemClock_Config+0xb4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fd1b 	bl	80024dc <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f832 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 ffb4 	bl	8002a38 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ad6:	f000 f81d 	bl	8000b14 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000afa:	f001 fcd5 	bl	80024a8 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000afe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b02:	f000 fa53 	bl	8000fac <HAL_Delay>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40020400 	.word	0x40020400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b56:	2005      	movs	r0, #5
 8000b58:	f000 ff40 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f9da 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <DMA2_Stream0_IRQHandler+0x10>)
 8000bc2:	f001 f85b 	bl	8001c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000240 	.word	0x20000240

08000bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_kill>:

int _kill(int pid, int sig)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bea:	f003 fa1f 	bl	800402c <__errno>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2216      	movs	r2, #22
 8000bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_exit>:

void _exit (int status)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ffe7 	bl	8000be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c12:	e7fe      	b.n	8000c12 <_exit+0x12>

08000c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
	}

return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e009      	b.n	8000c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf1      	blt.n	8000c60 <_write+0x12>
	}
	return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_close>:

int _close(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f003 f984 	bl	800402c <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20080000 	.word	0x20080000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	200002bc 	.word	0x200002bc
 8000d58:	20000360 	.word	0x20000360

08000d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_USART3_UART_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000dc4:	f002 fc46 	bl	8003654 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dce:	f7ff fea1 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200002c0 	.word	0x200002c0
 8000ddc:	40004800 	.word	0x40004800

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ae      	sub	sp, #184	; 0xb8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2290      	movs	r2, #144	; 0x90
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f93d 	bl	8004080 <memset>
  if(uartHandle->Instance==USART3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <HAL_UART_MspInit+0xb4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d13c      	bne.n	8000e8a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fff0 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e2a:	f7ff fe73 	bl	8000b14 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_UART_MspInit+0xb8>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0xb8>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0xb8>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_UART_MspInit+0xb8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_UART_MspInit+0xb8>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0xb8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_UART_MspInit+0xbc>)
 8000e86:	f001 f963 	bl	8002150 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	37b8      	adds	r7, #184	; 0xb8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004800 	.word	0x40004800
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ff47 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f003 f8b3 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fd5f 	bl	8000994 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000ee4:	080071bc 	.word	0x080071bc
  ldr r2, =_sbss
 8000ee8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000eec:	2000035c 	.word	0x2000035c

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>

08000ef2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f000 fd70 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 f805 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fe0d 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fd8b 	bl	8001a46 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fd53 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000348 	.word	0x20000348

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000348 	.word	0x20000348

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e031      	b.n	800106e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fba2 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	d116      	bne.n	8001060 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_ADC_Init+0x84>)
 8001038:	4013      	ands	r3, r2
 800103a:	f043 0202 	orr.w	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa7e 	bl	8001544 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
 800105e:	e001      	b.n	8001064 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	ffffeefd 	.word	0xffffeefd

0800107c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_ADC_Start_DMA+0x1e>
 8001096:	2302      	movs	r3, #2
 8001098:	e0d4      	b.n	8001244 <HAL_ADC_Start_DMA+0x1c8>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d018      	beq.n	80010e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <HAL_ADC_Start_DMA+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a62      	ldr	r2, [pc, #392]	; (8001250 <HAL_ADC_Start_DMA+0x1d4>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9a      	lsrs	r2, r3, #18
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80010d4:	e002      	b.n	80010dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3b01      	subs	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 809c 	bne.w	800122a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_ADC_Start_DMA+0x1d8>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	2b00      	cmp	r3, #0
 800110e:	d007      	beq.n	8001120 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001118:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112c:	d106      	bne.n	800113c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f023 0206 	bic.w	r2, r3, #6
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
 800113a:	e002      	b.n	8001142 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114e:	4a42      	ldr	r2, [pc, #264]	; (8001258 <HAL_ADC_Start_DMA+0x1dc>)
 8001150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	4a41      	ldr	r2, [pc, #260]	; (800125c <HAL_ADC_Start_DMA+0x1e0>)
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <HAL_ADC_Start_DMA+0x1e4>)
 8001160:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800116a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800117a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	334c      	adds	r3, #76	; 0x4c
 8001196:	4619      	mov	r1, r3
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f000 fd0e 	bl	8001bbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_ADC_Start_DMA+0x1e8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10f      	bne.n	80011cc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d143      	bne.n	8001242 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	e03a      	b.n	8001242 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start_DMA+0x1ec>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10e      	bne.n	80011f4 <HAL_ADC_Start_DMA+0x178>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d107      	bne.n	80011f4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_ADC_Start_DMA+0x1e8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d120      	bne.n	8001242 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_ADC_Start_DMA+0x1f0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11b      	bne.n	8001242 <HAL_ADC_Start_DMA+0x1c6>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d114      	bne.n	8001242 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e00b      	b.n	8001242 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83
 8001254:	fffff8fe 	.word	0xfffff8fe
 8001258:	08001739 	.word	0x08001739
 800125c:	080017f3 	.word	0x080017f3
 8001260:	0800180f 	.word	0x0800180f
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012200 	.word	0x40012200

08001270 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1c>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e136      	b.n	8001522 <HAL_ADC_ConfigChannel+0x28a>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d93a      	bls.n	800133a <HAL_ADC_ConfigChannel+0xa2>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012cc:	d035      	beq.n	800133a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68d9      	ldr	r1, [r3, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	3b1e      	subs	r3, #30
 80012e4:	2207      	movs	r2, #7
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a8d      	ldr	r2, [pc, #564]	; (8001530 <HAL_ADC_ConfigChannel+0x298>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10a      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68d9      	ldr	r1, [r3, #12]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	061a      	lsls	r2, r3, #24
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001312:	e035      	b.n	8001380 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68d9      	ldr	r1, [r3, #12]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	4603      	mov	r3, r0
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4403      	add	r3, r0
 800132c:	3b1e      	subs	r3, #30
 800132e:	409a      	lsls	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001338:	e022      	b.n	8001380 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6919      	ldr	r1, [r3, #16]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	2207      	movs	r2, #7
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43da      	mvns	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	400a      	ands	r2, r1
 800135c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6919      	ldr	r1, [r3, #16]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	4603      	mov	r3, r0
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4403      	add	r3, r0
 8001376:	409a      	lsls	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b06      	cmp	r3, #6
 8001386:	d824      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b05      	subs	r3, #5
 800139a:	221f      	movs	r2, #31
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b05      	subs	r3, #5
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
 80013d0:	e04c      	b.n	800146c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	d824      	bhi.n	8001424 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b23      	subs	r3, #35	; 0x23
 80013ec:	221f      	movs	r2, #31
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b23      	subs	r3, #35	; 0x23
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
 8001422:	e023      	b.n	800146c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b41      	subs	r3, #65	; 0x41
 8001436:	221f      	movs	r2, #31
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43da      	mvns	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	400a      	ands	r2, r1
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	3b41      	subs	r3, #65	; 0x41
 8001460:	fa00 f203 	lsl.w	r2, r0, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a30      	ldr	r2, [pc, #192]	; (8001534 <HAL_ADC_ConfigChannel+0x29c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10a      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1f4>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800147e:	d105      	bne.n	800148c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a2c      	ldr	r2, [pc, #176]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 8001486:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800148a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_ADC_ConfigChannel+0x29c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10f      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b12      	cmp	r3, #18
 800149c:	d10b      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <HAL_ADC_ConfigChannel+0x29c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d12b      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x280>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1a      	ldr	r2, [pc, #104]	; (8001530 <HAL_ADC_ConfigChannel+0x298>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d003      	beq.n	80014d2 <HAL_ADC_ConfigChannel+0x23a>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b11      	cmp	r3, #17
 80014d0:	d122      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_ADC_ConfigChannel+0x2a0>)
 80014e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_ADC_ConfigChannel+0x298>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d111      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_ADC_ConfigChannel+0x2a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_ADC_ConfigChannel+0x2a8>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9a      	lsrs	r2, r3, #18
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800150a:	e002      	b.n	8001512 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3b01      	subs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	10000012 	.word	0x10000012
 8001534:	40012000 	.word	0x40012000
 8001538:	40012300 	.word	0x40012300
 800153c:	20000000 	.word	0x20000000
 8001540:	431bde83 	.word	0x431bde83

08001544 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800154c:	4b78      	ldr	r3, [pc, #480]	; (8001730 <ADC_Init+0x1ec>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a77      	ldr	r2, [pc, #476]	; (8001730 <ADC_Init+0x1ec>)
 8001552:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001556:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001558:	4b75      	ldr	r3, [pc, #468]	; (8001730 <ADC_Init+0x1ec>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4973      	ldr	r1, [pc, #460]	; (8001730 <ADC_Init+0x1ec>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	021a      	lsls	r2, r3, #8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	4a58      	ldr	r2, [pc, #352]	; (8001734 <ADC_Init+0x1f0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d022      	beq.n	800161e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e00f      	b.n	800163e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800162c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800163c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0202 	bic.w	r2, r2, #2
 800164c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6899      	ldr	r1, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	005a      	lsls	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01b      	beq.n	80016a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800167a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800168a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6859      	ldr	r1, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	3b01      	subs	r3, #1
 8001698:	035a      	lsls	r2, r3, #13
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	e007      	b.n	80016b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	051a      	lsls	r2, r3, #20
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f6:	025a      	lsls	r2, r3, #9
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	029a      	lsls	r2, r3, #10
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40012300 	.word	0x40012300
 8001734:	0f000001 	.word	0x0f000001

08001738 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800174e:	2b00      	cmp	r3, #0
 8001750:	d13c      	bne.n	80017cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d12b      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001770:	2b00      	cmp	r3, #0
 8001772:	d127      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800178c:	2b00      	cmp	r3, #0
 800178e:	d119      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0220 	bic.w	r2, r2, #32
 800179e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fd53 	bl	8001270 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ca:	e00e      	b.n	80017ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fd53 	bl	8001284 <HAL_ADC_ErrorCallback>
}
 80017de:	e004      	b.n	80017ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff f973 	bl	8000aec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f043 0204 	orr.w	r2, r3, #4
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7ff fd28 	bl	8001284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x40>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	05fa0000 	.word	0x05fa0000

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff29 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff3e 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff8e 	bl	8001930 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff31 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa2 	bl	8001998 <SysTick_Config>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fa92 	bl	8000f94 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e099      	b.n	8001bb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9c:	e00f      	b.n	8001abe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9e:	f7ff fa79 	bl	8000f94 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d908      	bls.n	8001abe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e078      	b.n	8001bb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e8      	bne.n	8001a9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_DMA_Init+0x158>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d107      	bne.n	8001b28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4313      	orrs	r3, r2
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d117      	bne.n	8001b82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa77 	bl	8002058 <DMA_CheckFifoParam>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2240      	movs	r2, #64	; 0x40
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e016      	b.n	8001bb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fa2e 	bl	8001fec <DMA_CalcBaseAndBitshift>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	223f      	movs	r2, #63	; 0x3f
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	e010803f 	.word	0xe010803f

08001bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_Start_IT+0x26>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e048      	b.n	8001c74 <HAL_DMA_Start_IT+0xb8>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d137      	bne.n	8001c66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f9c0 	bl	8001f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	223f      	movs	r2, #63	; 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0216 	orr.w	r2, r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c3a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e005      	b.n	8001c72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c88:	4b8e      	ldr	r3, [pc, #568]	; (8001ec4 <HAL_DMA_IRQHandler+0x248>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a8e      	ldr	r2, [pc, #568]	; (8001ec8 <HAL_DMA_IRQHandler+0x24c>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0204 	bic.w	r2, r2, #4
 8001cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2204      	movs	r2, #4
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2204      	movs	r2, #4
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2210      	movs	r2, #16
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d043      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03c      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d76:	2210      	movs	r2, #16
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d018      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
 8001daa:	e01f      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e016      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0208 	bic.w	r2, r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2220      	movs	r2, #32
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 808f 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8087 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2220      	movs	r2, #32
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d136      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0216 	bic.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x1da>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	223f      	movs	r2, #63	; 0x3f
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07e      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
        }
        return;
 8001e92:	e079      	b.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d031      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e02c      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e01e      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0210 	bic.w	r2, r2, #16
 8001efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d032      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d307      	bcc.n	8001f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f2      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x2cc>
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f88:	bf00      	nop
    }
  }
}
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d108      	bne.n	8001fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fce:	e007      	b.n	8001fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b10      	subs	r3, #16
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <DMA_CalcBaseAndBitshift+0x60>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <DMA_CalcBaseAndBitshift+0x64>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d908      	bls.n	800202c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <DMA_CalcBaseAndBitshift+0x68>)
 8002022:	4013      	ands	r3, r2
 8002024:	1d1a      	adds	r2, r3, #4
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	659a      	str	r2, [r3, #88]	; 0x58
 800202a:	e006      	b.n	800203a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <DMA_CalcBaseAndBitshift+0x68>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	aaaaaaab 	.word	0xaaaaaaab
 8002050:	08006dc8 	.word	0x08006dc8
 8002054:	fffffc00 	.word	0xfffffc00

08002058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d856      	bhi.n	8002126 <DMA_CheckFifoParam+0xce>
 8002078:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <DMA_CheckFifoParam+0x28>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	08002091 	.word	0x08002091
 8002084:	080020a3 	.word	0x080020a3
 8002088:	08002091 	.word	0x08002091
 800208c:	08002127 	.word	0x08002127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d046      	beq.n	800212a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e043      	b.n	800212a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020aa:	d140      	bne.n	800212e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b0:	e03d      	b.n	800212e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d121      	bne.n	8002100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d837      	bhi.n	8002132 <DMA_CheckFifoParam+0xda>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <DMA_CheckFifoParam+0x70>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020df 	.word	0x080020df
 80020d0:	080020d9 	.word	0x080020d9
 80020d4:	080020f1 	.word	0x080020f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e030      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d025      	beq.n	8002136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ee:	e022      	b.n	8002136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f8:	d11f      	bne.n	800213a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fe:	e01c      	b.n	800213a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d903      	bls.n	800210e <DMA_CheckFifoParam+0xb6>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800210c:	e018      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      break;
 8002112:	e015      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e00b      	b.n	800213e <DMA_CheckFifoParam+0xe6>
      break;
 8002126:	bf00      	nop
 8002128:	e00a      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e008      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e006      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e004      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e002      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;   
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
    }
  } 
  
  return status; 
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e175      	b.n	800245c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 8164 	bne.w	8002456 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d005      	beq.n	80021a6 <HAL_GPIO_Init+0x56>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d130      	bne.n	8002208 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d123      	bne.n	8002298 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80be 	beq.w	8002456 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b66      	ldr	r3, [pc, #408]	; (8002474 <HAL_GPIO_Init+0x324>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a65      	ldr	r2, [pc, #404]	; (8002474 <HAL_GPIO_Init+0x324>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_GPIO_Init+0x324>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022f2:	4a61      	ldr	r2, [pc, #388]	; (8002478 <HAL_GPIO_Init+0x328>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a58      	ldr	r2, [pc, #352]	; (800247c <HAL_GPIO_Init+0x32c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d037      	beq.n	800238e <HAL_GPIO_Init+0x23e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a57      	ldr	r2, [pc, #348]	; (8002480 <HAL_GPIO_Init+0x330>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d031      	beq.n	800238a <HAL_GPIO_Init+0x23a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_GPIO_Init+0x334>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d02b      	beq.n	8002386 <HAL_GPIO_Init+0x236>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_GPIO_Init+0x338>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d025      	beq.n	8002382 <HAL_GPIO_Init+0x232>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_GPIO_Init+0x33c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_GPIO_Init+0x22e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <HAL_GPIO_Init+0x340>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x22a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_GPIO_Init+0x344>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x226>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a51      	ldr	r2, [pc, #324]	; (8002498 <HAL_GPIO_Init+0x348>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x222>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_GPIO_Init+0x34c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x21e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	; (80024a0 <HAL_GPIO_Init+0x350>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x21a>
 8002366:	2309      	movs	r3, #9
 8002368:	e012      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800236a:	230a      	movs	r3, #10
 800236c:	e010      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800236e:	2308      	movs	r3, #8
 8002370:	e00e      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002372:	2307      	movs	r3, #7
 8002374:	e00c      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002376:	2306      	movs	r3, #6
 8002378:	e00a      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800237a:	2305      	movs	r3, #5
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800237e:	2304      	movs	r3, #4
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x240>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x240>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x328>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_GPIO_Init+0x354>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_GPIO_Init+0x354>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_GPIO_Init+0x354>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_GPIO_Init+0x354>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_GPIO_Init+0x354>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f ae86 	bls.w	8002170 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40021400 	.word	0x40021400
 8002494:	40021800 	.word	0x40021800
 8002498:	40021c00 	.word	0x40021c00
 800249c:	40022000 	.word	0x40022000
 80024a0:	40022400 	.word	0x40022400
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024c4:	e003      	b.n	80024ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	619a      	str	r2, [r3, #24]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e29b      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b96      	ldr	r3, [pc, #600]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250c:	4b93      	ldr	r3, [pc, #588]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
 8002518:	4b90      	ldr	r3, [pc, #576]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b8d      	ldr	r3, [pc, #564]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06c      	beq.n	800260c <HAL_RCC_OscConfig+0x130>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d168      	bne.n	800260c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e275      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x7a>
 8002548:	4b84      	ldr	r3, [pc, #528]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a83      	ldr	r2, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x9c>
 800255e:	4b7f      	ldr	r3, [pc, #508]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7e      	ldr	r2, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b7c      	ldr	r3, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7b      	ldr	r2, [pc, #492]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xc0>
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a72      	ldr	r2, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 800259c:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6e      	ldr	r2, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6b      	ldr	r2, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcea 	bl	8000f94 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fce6 	bl	8000f94 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e229      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b61      	ldr	r3, [pc, #388]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fcd6 	bl	8000f94 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fcd2 	bl	8000f94 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e215      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b57      	ldr	r3, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x110>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d069      	beq.n	80026ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x190>
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1e9      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	493d      	ldr	r1, [pc, #244]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e040      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fc88 	bl	8000f94 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fc84 	bl	8000f94 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1c7      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4929      	ldr	r1, [pc, #164]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a26      	ldr	r2, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fc64 	bl	8000f94 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc60 	bl	8000f94 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1a3      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d038      	beq.n	800276c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fc41 	bl	8000f94 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fc3d 	bl	8000f94 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e180      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x23a>
 8002734:	e01a      	b.n	800276c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_RCC_OscConfig+0x280>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fc27 	bl	8000f94 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fc23 	bl	8000f94 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d903      	bls.n	8002760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e166      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
 800275c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b92      	ldr	r3, [pc, #584]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a4 	beq.w	80028c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b8c      	ldr	r3, [pc, #560]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a88      	ldr	r2, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b86      	ldr	r3, [pc, #536]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	4b83      	ldr	r3, [pc, #524]	; (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ae:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7f      	ldr	r2, [pc, #508]	; (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fbeb 	bl	8000f94 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fbe7 	bl	8000f94 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e12a      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x31a>
 80027e8:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a6f      	ldr	r2, [pc, #444]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x33c>
 80027fe:	4b6b      	ldr	r3, [pc, #428]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a6a      	ldr	r2, [pc, #424]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a67      	ldr	r2, [pc, #412]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x35e>
 8002820:	4b62      	ldr	r3, [pc, #392]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a61      	ldr	r2, [pc, #388]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a5e      	ldr	r2, [pc, #376]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fb9b 	bl	8000f94 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fb97 	bl	8000f94 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0d8      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x386>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fb85 	bl	8000f94 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fb81 	bl	8000f94 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0c2      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80ae 	beq.w	8002a28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d06d      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d14b      	bne.n	8002978 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b32      	ldr	r3, [pc, #200]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a31      	ldr	r2, [pc, #196]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fb52 	bl	8000f94 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fb4e 	bl	8000f94 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e091      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	071b      	lsls	r3, r3, #28
 800293e:	491b      	ldr	r1, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fb20 	bl	8000f94 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fb1c 	bl	8000f94 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e05f      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x47c>
 8002976:	e057      	b.n	8002a28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800297e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fb06 	bl	8000f94 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe fb02 	bl	8000f94 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e045      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x4b0>
 80029aa:	e03d      	b.n	8002a28 <HAL_RCC_OscConfig+0x54c>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HAL_RCC_OscConfig+0x558>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d030      	beq.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d129      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d122      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d119      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d10f      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d0      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d910      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 020f 	bic.w	r2, r3, #15
 8002a66:	4965      	ldr	r1, [pc, #404]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d040      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e073      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06b      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4936      	ldr	r1, [pc, #216]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fa32 	bl	8000f94 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fa2e 	bl	8000f94 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e053      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d210      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1cc>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1d0>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1d4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f98e 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08006db0 	.word	0x08006db0
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b090      	sub	sp, #64	; 0x40
 8002c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	f200 80a1 	bhi.w	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c42:	e09b      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c48:	e09b      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4e:	e098      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	627a      	str	r2, [r7, #36]	; 0x24
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c7c:	fb03 f201 	mul.w	r2, r3, r1
 8002c80:	2300      	movs	r3, #0
 8002c82:	fb00 f303 	mul.w	r3, r0, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	460a      	mov	r2, r1
 8002c92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	4413      	add	r3, r2
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	61fa      	str	r2, [r7, #28]
 8002ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002caa:	f7fd fb21 	bl	80002f0 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb6:	e053      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	617a      	str	r2, [r7, #20]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cca:	f04f 0b00 	mov.w	fp, #0
 8002cce:	4652      	mov	r2, sl
 8002cd0:	465b      	mov	r3, fp
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	0159      	lsls	r1, r3, #5
 8002cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce0:	0150      	lsls	r0, r2, #5
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8002cea:	eb63 090b 	sbc.w	r9, r3, fp
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d02:	ebb2 0408 	subs.w	r4, r2, r8
 8002d06:	eb63 0509 	sbc.w	r5, r3, r9
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	00eb      	lsls	r3, r5, #3
 8002d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d18:	00e2      	lsls	r2, r4, #3
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	eb14 030a 	adds.w	r3, r4, sl
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	eb45 030b 	adc.w	r3, r5, fp
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d36:	4629      	mov	r1, r5
 8002d38:	028b      	lsls	r3, r1, #10
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d40:	4621      	mov	r1, r4
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d54:	f7fd facc 	bl	80002f0 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3740      	adds	r7, #64	; 0x40
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	017d7840 	.word	0x017d7840

08002d9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08006dc0 	.word	0x08006dc0

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffdc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08006dc0 	.word	0x08006dc0

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d012      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e2c:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a68      	ldr	r2, [pc, #416]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e36:	6093      	str	r3, [r2, #8]
 8002e38:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	4964      	ldr	r1, [pc, #400]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	4959      	ldr	r1, [pc, #356]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d017      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	494a      	ldr	r1, [pc, #296]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 808b 	beq.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	4a39      	ldr	r2, [pc, #228]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef4:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0c:	f7fe f842 	bl	8000f94 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fe f83e 	bl	8000f94 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e38f      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f32:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d035      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d02e      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d114      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe f806 	bl	8000f94 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f802 	bl	8000f94 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e351      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ee      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	4901      	ldr	r1, [pc, #4]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
 8002fd2:	e00b      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	0ffffcff 	.word	0x0ffffcff
 8002fe0:	4bac      	ldr	r3, [pc, #688]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4aab      	ldr	r2, [pc, #684]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	4ba9      	ldr	r3, [pc, #676]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	49a6      	ldr	r1, [pc, #664]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800300a:	4ba2      	ldr	r3, [pc, #648]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003010:	4aa0      	ldr	r2, [pc, #640]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003016:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800301a:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	499b      	ldr	r1, [pc, #620]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003046:	4993      	ldr	r1, [pc, #588]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800305a:	4b8e      	ldr	r3, [pc, #568]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003068:	498a      	ldr	r1, [pc, #552]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800307c:	4b85      	ldr	r3, [pc, #532]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308a:	4982      	ldr	r1, [pc, #520]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4979      	ldr	r1, [pc, #484]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c0:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f023 0203 	bic.w	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	4971      	ldr	r1, [pc, #452]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030e2:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f023 020c 	bic.w	r2, r3, #12
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	4968      	ldr	r1, [pc, #416]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003104:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	4960      	ldr	r1, [pc, #384]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003134:	4957      	ldr	r1, [pc, #348]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003148:	4b52      	ldr	r3, [pc, #328]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	494f      	ldr	r1, [pc, #316]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800316a:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	4946      	ldr	r1, [pc, #280]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	493e      	ldr	r1, [pc, #248]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031bc:	4935      	ldr	r1, [pc, #212]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	492d      	ldr	r1, [pc, #180]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d011      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031f2:	4b28      	ldr	r3, [pc, #160]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003200:	4924      	ldr	r1, [pc, #144]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003240:	4914      	ldr	r1, [pc, #80]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00b      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00f      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003288:	4902      	ldr	r1, [pc, #8]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003290:	e002      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032a4:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	4986      	ldr	r1, [pc, #536]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032c8:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d8:	497d      	ldr	r1, [pc, #500]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d006      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80d6 	beq.w	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032f4:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fd fe48 	bl	8000f94 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003308:	f7fd fe44 	bl	8000f94 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e195      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800331a:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d021      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d11d      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003348:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334e:	0e1b      	lsrs	r3, r3, #24
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	019a      	lsls	r2, r3, #6
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	071b      	lsls	r3, r3, #28
 800336e:	4958      	ldr	r1, [pc, #352]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02e      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a0:	d129      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033a2:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b0:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	0f1b      	lsrs	r3, r3, #28
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	019a      	lsls	r2, r3, #6
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	061b      	lsls	r3, r3, #24
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	071b      	lsls	r3, r3, #28
 80033d6:	493e      	ldr	r1, [pc, #248]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033de:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e4:	f023 021f 	bic.w	r2, r3, #31
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	3b01      	subs	r3, #1
 80033ee:	4938      	ldr	r1, [pc, #224]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01d      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003408:	0e1b      	lsrs	r3, r3, #24
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003416:	0f1b      	lsrs	r3, r3, #28
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	019a      	lsls	r2, r3, #6
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	431a      	orrs	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	071b      	lsls	r3, r3, #28
 8003436:	4926      	ldr	r1, [pc, #152]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d011      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	019a      	lsls	r2, r3, #6
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	491a      	ldr	r1, [pc, #104]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347a:	f7fd fd8b 	bl	8000f94 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003482:	f7fd fd87 	bl	8000f94 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d901      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0d8      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	f040 80ce 	bne.w	8003644 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd fd6e 	bl	8000f94 <HAL_GetTick>
 80034b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034bc:	f7fd fd6a 	bl	8000f94 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d904      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0bb      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034d4:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e0:	d0ec      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02e      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d12a      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800350a:	4b51      	ldr	r3, [pc, #324]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003518:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	0f1b      	lsrs	r3, r3, #28
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	019a      	lsls	r2, r3, #6
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	071b      	lsls	r3, r3, #28
 800353e:	4944      	ldr	r1, [pc, #272]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003546:	4b42      	ldr	r3, [pc, #264]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	493d      	ldr	r1, [pc, #244]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003574:	d11d      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	0e1b      	lsrs	r3, r3, #24
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003584:	4b32      	ldr	r3, [pc, #200]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	0f1b      	lsrs	r3, r3, #28
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	019a      	lsls	r2, r3, #6
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	071b      	lsls	r3, r3, #28
 80035aa:	4929      	ldr	r1, [pc, #164]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d028      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035be:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	0e1b      	lsrs	r3, r3, #24
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	019a      	lsls	r2, r3, #6
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	071b      	lsls	r3, r3, #28
 80035f2:	4917      	ldr	r1, [pc, #92]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4911      	ldr	r1, [pc, #68]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0e      	ldr	r2, [pc, #56]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fd fcba 	bl	8000f94 <HAL_GetTick>
 8003620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003624:	f7fd fcb6 	bl	8000f94 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e007      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800363e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003642:	d1ef      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800

08003654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e040      	b.n	80036e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fbb2 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8b0 	bl	80037f8 <UART_SetConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e022      	b.n	80036e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fb08 	bl	8003cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb8f 	bl	8003e04 <UART_CheckIdleState>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003704:	2b20      	cmp	r3, #32
 8003706:	d171      	bne.n	80037ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UART_Transmit+0x24>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e06a      	b.n	80037ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2221      	movs	r2, #33	; 0x21
 8003724:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003726:	f7fd fc35 	bl	8000f94 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d108      	bne.n	8003758 <HAL_UART_Transmit+0x68>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e003      	b.n	8003760 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003760:	e02c      	b.n	80037bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fb96 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e038      	b.n	80037ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	3302      	adds	r3, #2
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	e007      	b.n	80037aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1cc      	bne.n	8003762 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	2140      	movs	r1, #64	; 0x40
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fb63 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e005      	b.n	80037ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4ba6      	ldr	r3, [pc, #664]	; (8003abc <UART_SetConfig+0x2c4>)
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	430b      	orrs	r3, r1
 800382e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a94      	ldr	r2, [pc, #592]	; (8003ac0 <UART_SetConfig+0x2c8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d120      	bne.n	80038b6 <UART_SetConfig+0xbe>
 8003874:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <UART_SetConfig+0x2cc>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b03      	cmp	r3, #3
 8003880:	d816      	bhi.n	80038b0 <UART_SetConfig+0xb8>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0x90>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a5 	.word	0x080038a5
 8003890:	0800389f 	.word	0x0800389f
 8003894:	080038ab 	.word	0x080038ab
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e150      	b.n	8003b40 <UART_SetConfig+0x348>
 800389e:	2302      	movs	r3, #2
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e14d      	b.n	8003b40 <UART_SetConfig+0x348>
 80038a4:	2304      	movs	r3, #4
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e14a      	b.n	8003b40 <UART_SetConfig+0x348>
 80038aa:	2308      	movs	r3, #8
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e147      	b.n	8003b40 <UART_SetConfig+0x348>
 80038b0:	2310      	movs	r3, #16
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e144      	b.n	8003b40 <UART_SetConfig+0x348>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a83      	ldr	r2, [pc, #524]	; (8003ac8 <UART_SetConfig+0x2d0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d132      	bne.n	8003926 <UART_SetConfig+0x12e>
 80038c0:	4b80      	ldr	r3, [pc, #512]	; (8003ac4 <UART_SetConfig+0x2cc>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d828      	bhi.n	8003920 <UART_SetConfig+0x128>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0xdc>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	08003909 	.word	0x08003909
 80038d8:	08003921 	.word	0x08003921
 80038dc:	08003921 	.word	0x08003921
 80038e0:	08003921 	.word	0x08003921
 80038e4:	08003915 	.word	0x08003915
 80038e8:	08003921 	.word	0x08003921
 80038ec:	08003921 	.word	0x08003921
 80038f0:	08003921 	.word	0x08003921
 80038f4:	0800390f 	.word	0x0800390f
 80038f8:	08003921 	.word	0x08003921
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003921 	.word	0x08003921
 8003904:	0800391b 	.word	0x0800391b
 8003908:	2300      	movs	r3, #0
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e118      	b.n	8003b40 <UART_SetConfig+0x348>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e115      	b.n	8003b40 <UART_SetConfig+0x348>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e112      	b.n	8003b40 <UART_SetConfig+0x348>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e10f      	b.n	8003b40 <UART_SetConfig+0x348>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e10c      	b.n	8003b40 <UART_SetConfig+0x348>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a68      	ldr	r2, [pc, #416]	; (8003acc <UART_SetConfig+0x2d4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d120      	bne.n	8003972 <UART_SetConfig+0x17a>
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <UART_SetConfig+0x2cc>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800393a:	2b30      	cmp	r3, #48	; 0x30
 800393c:	d013      	beq.n	8003966 <UART_SetConfig+0x16e>
 800393e:	2b30      	cmp	r3, #48	; 0x30
 8003940:	d814      	bhi.n	800396c <UART_SetConfig+0x174>
 8003942:	2b20      	cmp	r3, #32
 8003944:	d009      	beq.n	800395a <UART_SetConfig+0x162>
 8003946:	2b20      	cmp	r3, #32
 8003948:	d810      	bhi.n	800396c <UART_SetConfig+0x174>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <UART_SetConfig+0x15c>
 800394e:	2b10      	cmp	r3, #16
 8003950:	d006      	beq.n	8003960 <UART_SetConfig+0x168>
 8003952:	e00b      	b.n	800396c <UART_SetConfig+0x174>
 8003954:	2300      	movs	r3, #0
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e0f2      	b.n	8003b40 <UART_SetConfig+0x348>
 800395a:	2302      	movs	r3, #2
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e0ef      	b.n	8003b40 <UART_SetConfig+0x348>
 8003960:	2304      	movs	r3, #4
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e0ec      	b.n	8003b40 <UART_SetConfig+0x348>
 8003966:	2308      	movs	r3, #8
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e0e9      	b.n	8003b40 <UART_SetConfig+0x348>
 800396c:	2310      	movs	r3, #16
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e0e6      	b.n	8003b40 <UART_SetConfig+0x348>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <UART_SetConfig+0x2d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d120      	bne.n	80039be <UART_SetConfig+0x1c6>
 800397c:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <UART_SetConfig+0x2cc>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003986:	2bc0      	cmp	r3, #192	; 0xc0
 8003988:	d013      	beq.n	80039b2 <UART_SetConfig+0x1ba>
 800398a:	2bc0      	cmp	r3, #192	; 0xc0
 800398c:	d814      	bhi.n	80039b8 <UART_SetConfig+0x1c0>
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d009      	beq.n	80039a6 <UART_SetConfig+0x1ae>
 8003992:	2b80      	cmp	r3, #128	; 0x80
 8003994:	d810      	bhi.n	80039b8 <UART_SetConfig+0x1c0>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <UART_SetConfig+0x1a8>
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d006      	beq.n	80039ac <UART_SetConfig+0x1b4>
 800399e:	e00b      	b.n	80039b8 <UART_SetConfig+0x1c0>
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e0cc      	b.n	8003b40 <UART_SetConfig+0x348>
 80039a6:	2302      	movs	r3, #2
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e0c9      	b.n	8003b40 <UART_SetConfig+0x348>
 80039ac:	2304      	movs	r3, #4
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e0c6      	b.n	8003b40 <UART_SetConfig+0x348>
 80039b2:	2308      	movs	r3, #8
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e0c3      	b.n	8003b40 <UART_SetConfig+0x348>
 80039b8:	2310      	movs	r3, #16
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e0c0      	b.n	8003b40 <UART_SetConfig+0x348>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a44      	ldr	r2, [pc, #272]	; (8003ad4 <UART_SetConfig+0x2dc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d125      	bne.n	8003a14 <UART_SetConfig+0x21c>
 80039c8:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <UART_SetConfig+0x2cc>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d6:	d017      	beq.n	8003a08 <UART_SetConfig+0x210>
 80039d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039dc:	d817      	bhi.n	8003a0e <UART_SetConfig+0x216>
 80039de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e2:	d00b      	beq.n	80039fc <UART_SetConfig+0x204>
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d811      	bhi.n	8003a0e <UART_SetConfig+0x216>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <UART_SetConfig+0x1fe>
 80039ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f2:	d006      	beq.n	8003a02 <UART_SetConfig+0x20a>
 80039f4:	e00b      	b.n	8003a0e <UART_SetConfig+0x216>
 80039f6:	2300      	movs	r3, #0
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e0a1      	b.n	8003b40 <UART_SetConfig+0x348>
 80039fc:	2302      	movs	r3, #2
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e09e      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a02:	2304      	movs	r3, #4
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e09b      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e098      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a0e:	2310      	movs	r3, #16
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e095      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2f      	ldr	r2, [pc, #188]	; (8003ad8 <UART_SetConfig+0x2e0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d125      	bne.n	8003a6a <UART_SetConfig+0x272>
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <UART_SetConfig+0x2cc>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a2c:	d017      	beq.n	8003a5e <UART_SetConfig+0x266>
 8003a2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a32:	d817      	bhi.n	8003a64 <UART_SetConfig+0x26c>
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a38:	d00b      	beq.n	8003a52 <UART_SetConfig+0x25a>
 8003a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3e:	d811      	bhi.n	8003a64 <UART_SetConfig+0x26c>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <UART_SetConfig+0x254>
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a48:	d006      	beq.n	8003a58 <UART_SetConfig+0x260>
 8003a4a:	e00b      	b.n	8003a64 <UART_SetConfig+0x26c>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e076      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a52:	2302      	movs	r3, #2
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e073      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e070      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e06d      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a64:	2310      	movs	r3, #16
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e06a      	b.n	8003b40 <UART_SetConfig+0x348>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <UART_SetConfig+0x2e4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d138      	bne.n	8003ae6 <UART_SetConfig+0x2ee>
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <UART_SetConfig+0x2cc>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a82:	d017      	beq.n	8003ab4 <UART_SetConfig+0x2bc>
 8003a84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a88:	d82a      	bhi.n	8003ae0 <UART_SetConfig+0x2e8>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	d00b      	beq.n	8003aa8 <UART_SetConfig+0x2b0>
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d824      	bhi.n	8003ae0 <UART_SetConfig+0x2e8>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <UART_SetConfig+0x2aa>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d006      	beq.n	8003aae <UART_SetConfig+0x2b6>
 8003aa0:	e01e      	b.n	8003ae0 <UART_SetConfig+0x2e8>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e04b      	b.n	8003b40 <UART_SetConfig+0x348>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e048      	b.n	8003b40 <UART_SetConfig+0x348>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e045      	b.n	8003b40 <UART_SetConfig+0x348>
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e042      	b.n	8003b40 <UART_SetConfig+0x348>
 8003aba:	bf00      	nop
 8003abc:	efff69f3 	.word	0xefff69f3
 8003ac0:	40011000 	.word	0x40011000
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	40004800 	.word	0x40004800
 8003ad0:	40004c00 	.word	0x40004c00
 8003ad4:	40005000 	.word	0x40005000
 8003ad8:	40011400 	.word	0x40011400
 8003adc:	40007800 	.word	0x40007800
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e02c      	b.n	8003b40 <UART_SetConfig+0x348>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a72      	ldr	r2, [pc, #456]	; (8003cb4 <UART_SetConfig+0x4bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d125      	bne.n	8003b3c <UART_SetConfig+0x344>
 8003af0:	4b71      	ldr	r3, [pc, #452]	; (8003cb8 <UART_SetConfig+0x4c0>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003afe:	d017      	beq.n	8003b30 <UART_SetConfig+0x338>
 8003b00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b04:	d817      	bhi.n	8003b36 <UART_SetConfig+0x33e>
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d00b      	beq.n	8003b24 <UART_SetConfig+0x32c>
 8003b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b10:	d811      	bhi.n	8003b36 <UART_SetConfig+0x33e>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <UART_SetConfig+0x326>
 8003b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1a:	d006      	beq.n	8003b2a <UART_SetConfig+0x332>
 8003b1c:	e00b      	b.n	8003b36 <UART_SetConfig+0x33e>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e00d      	b.n	8003b40 <UART_SetConfig+0x348>
 8003b24:	2302      	movs	r3, #2
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e00a      	b.n	8003b40 <UART_SetConfig+0x348>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e007      	b.n	8003b40 <UART_SetConfig+0x348>
 8003b30:	2308      	movs	r3, #8
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e004      	b.n	8003b40 <UART_SetConfig+0x348>
 8003b36:	2310      	movs	r3, #16
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e001      	b.n	8003b40 <UART_SetConfig+0x348>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b48:	d15b      	bne.n	8003c02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d828      	bhi.n	8003ba2 <UART_SetConfig+0x3aa>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0x360>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	08003ba3 	.word	0x08003ba3
 8003b68:	08003b93 	.word	0x08003b93
 8003b6c:	08003ba3 	.word	0x08003ba3
 8003b70:	08003ba3 	.word	0x08003ba3
 8003b74:	08003ba3 	.word	0x08003ba3
 8003b78:	08003b9b 	.word	0x08003b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7ff f91a 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8003b80:	61b8      	str	r0, [r7, #24]
        break;
 8003b82:	e013      	b.n	8003bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7ff f92a 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003b88:	61b8      	str	r0, [r7, #24]
        break;
 8003b8a:	e00f      	b.n	8003bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b8c:	4b4b      	ldr	r3, [pc, #300]	; (8003cbc <UART_SetConfig+0x4c4>)
 8003b8e:	61bb      	str	r3, [r7, #24]
        break;
 8003b90:	e00c      	b.n	8003bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b92:	f7ff f83d 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8003b96:	61b8      	str	r0, [r7, #24]
        break;
 8003b98:	e008      	b.n	8003bac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ba0:	e004      	b.n	8003bac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8003baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d074      	beq.n	8003c9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	005a      	lsls	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	d916      	bls.n	8003bfc <UART_SetConfig+0x404>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d212      	bcs.n	8003bfc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f023 030f 	bic.w	r3, r3, #15
 8003bde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	89fb      	ldrh	r3, [r7, #14]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	89fa      	ldrh	r2, [r7, #14]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e04f      	b.n	8003c9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77bb      	strb	r3, [r7, #30]
 8003c00:	e04c      	b.n	8003c9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d828      	bhi.n	8003c5a <UART_SetConfig+0x462>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0x418>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c45 	.word	0x08003c45
 8003c1c:	08003c5b 	.word	0x08003c5b
 8003c20:	08003c4b 	.word	0x08003c4b
 8003c24:	08003c5b 	.word	0x08003c5b
 8003c28:	08003c5b 	.word	0x08003c5b
 8003c2c:	08003c5b 	.word	0x08003c5b
 8003c30:	08003c53 	.word	0x08003c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c34:	f7ff f8be 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8003c38:	61b8      	str	r0, [r7, #24]
        break;
 8003c3a:	e013      	b.n	8003c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c3c:	f7ff f8ce 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003c40:	61b8      	str	r0, [r7, #24]
        break;
 8003c42:	e00f      	b.n	8003c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <UART_SetConfig+0x4c4>)
 8003c46:	61bb      	str	r3, [r7, #24]
        break;
 8003c48:	e00c      	b.n	8003c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4a:	f7fe ffe1 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8003c4e:	61b8      	str	r0, [r7, #24]
        break;
 8003c50:	e008      	b.n	8003c64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e004      	b.n	8003c64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	77bb      	strb	r3, [r7, #30]
        break;
 8003c62:	bf00      	nop
    }

    if (pclk != 0U)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085a      	lsrs	r2, r3, #1
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	441a      	add	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b0f      	cmp	r3, #15
 8003c82:	d909      	bls.n	8003c98 <UART_SetConfig+0x4a0>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8a:	d205      	bcs.n	8003c98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	e001      	b.n	8003c9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ca8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40007c00 	.word	0x40007c00
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	00f42400 	.word	0x00f42400

08003cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbe:	d10a      	bne.n	8003dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e14:	f7fd f8be 	bl	8000f94 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d10e      	bne.n	8003e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f831 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e027      	b.n	8003e96 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d10e      	bne.n	8003e72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f81b 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e011      	b.n	8003e96 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b09c      	sub	sp, #112	; 0x70
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eae:	e0a7      	b.n	8004000 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	f000 80a3 	beq.w	8004000 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fd f86b 	bl	8000f94 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13f      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ef4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f22:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e068      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d050      	beq.n	8004000 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6c:	d148      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
 8003f98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fca:	623a      	str	r2, [r7, #32]
 8003fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	69f9      	ldr	r1, [r7, #28]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e010      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	429a      	cmp	r2, r3
 800401c:	f43f af48 	beq.w	8003eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3770      	adds	r7, #112	; 0x70
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <__errno>:
 800402c:	4b01      	ldr	r3, [pc, #4]	; (8004034 <__errno+0x8>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4d0d      	ldr	r5, [pc, #52]	; (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2600      	movs	r6, #0
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4d0b      	ldr	r5, [pc, #44]	; (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	; (800407c <__libc_init_array+0x44>)
 800404c:	f002 fe5c 	bl	8006d08 <_init>
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2600      	movs	r6, #0
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	080071b4 	.word	0x080071b4
 8004074:	080071b4 	.word	0x080071b4
 8004078:	080071b4 	.word	0x080071b4
 800407c:	080071b8 	.word	0x080071b8

08004080 <memset>:
 8004080:	4402      	add	r2, r0
 8004082:	4603      	mov	r3, r0
 8004084:	4293      	cmp	r3, r2
 8004086:	d100      	bne.n	800408a <memset+0xa>
 8004088:	4770      	bx	lr
 800408a:	f803 1b01 	strb.w	r1, [r3], #1
 800408e:	e7f9      	b.n	8004084 <memset+0x4>

08004090 <__cvt>:
 8004090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004092:	ed2d 8b02 	vpush	{d8}
 8004096:	eeb0 8b40 	vmov.f64	d8, d0
 800409a:	b085      	sub	sp, #20
 800409c:	4617      	mov	r7, r2
 800409e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80040a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80040a2:	ee18 2a90 	vmov	r2, s17
 80040a6:	f025 0520 	bic.w	r5, r5, #32
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	bfb6      	itet	lt
 80040ae:	222d      	movlt	r2, #45	; 0x2d
 80040b0:	2200      	movge	r2, #0
 80040b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80040b6:	2d46      	cmp	r5, #70	; 0x46
 80040b8:	460c      	mov	r4, r1
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	d004      	beq.n	80040c8 <__cvt+0x38>
 80040be:	2d45      	cmp	r5, #69	; 0x45
 80040c0:	d100      	bne.n	80040c4 <__cvt+0x34>
 80040c2:	3401      	adds	r4, #1
 80040c4:	2102      	movs	r1, #2
 80040c6:	e000      	b.n	80040ca <__cvt+0x3a>
 80040c8:	2103      	movs	r1, #3
 80040ca:	ab03      	add	r3, sp, #12
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	ab02      	add	r3, sp, #8
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4622      	mov	r2, r4
 80040d4:	4633      	mov	r3, r6
 80040d6:	eeb0 0b48 	vmov.f64	d0, d8
 80040da:	f000 fcc9 	bl	8004a70 <_dtoa_r>
 80040de:	2d47      	cmp	r5, #71	; 0x47
 80040e0:	d101      	bne.n	80040e6 <__cvt+0x56>
 80040e2:	07fb      	lsls	r3, r7, #31
 80040e4:	d51a      	bpl.n	800411c <__cvt+0x8c>
 80040e6:	2d46      	cmp	r5, #70	; 0x46
 80040e8:	eb00 0204 	add.w	r2, r0, r4
 80040ec:	d10c      	bne.n	8004108 <__cvt+0x78>
 80040ee:	7803      	ldrb	r3, [r0, #0]
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d107      	bne.n	8004104 <__cvt+0x74>
 80040f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fc:	bf1c      	itt	ne
 80040fe:	f1c4 0401 	rsbne	r4, r4, #1
 8004102:	6034      	strne	r4, [r6, #0]
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	441a      	add	r2, r3
 8004108:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	bf08      	it	eq
 8004112:	9203      	streq	r2, [sp, #12]
 8004114:	2130      	movs	r1, #48	; 0x30
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	4293      	cmp	r3, r2
 800411a:	d307      	bcc.n	800412c <__cvt+0x9c>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004120:	1a1b      	subs	r3, r3, r0
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	b005      	add	sp, #20
 8004126:	ecbd 8b02 	vpop	{d8}
 800412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412c:	1c5c      	adds	r4, r3, #1
 800412e:	9403      	str	r4, [sp, #12]
 8004130:	7019      	strb	r1, [r3, #0]
 8004132:	e7f0      	b.n	8004116 <__cvt+0x86>

08004134 <__exponent>:
 8004134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004136:	4603      	mov	r3, r0
 8004138:	2900      	cmp	r1, #0
 800413a:	bfb8      	it	lt
 800413c:	4249      	neglt	r1, r1
 800413e:	f803 2b02 	strb.w	r2, [r3], #2
 8004142:	bfb4      	ite	lt
 8004144:	222d      	movlt	r2, #45	; 0x2d
 8004146:	222b      	movge	r2, #43	; 0x2b
 8004148:	2909      	cmp	r1, #9
 800414a:	7042      	strb	r2, [r0, #1]
 800414c:	dd2a      	ble.n	80041a4 <__exponent+0x70>
 800414e:	f10d 0407 	add.w	r4, sp, #7
 8004152:	46a4      	mov	ip, r4
 8004154:	270a      	movs	r7, #10
 8004156:	46a6      	mov	lr, r4
 8004158:	460a      	mov	r2, r1
 800415a:	fb91 f6f7 	sdiv	r6, r1, r7
 800415e:	fb07 1516 	mls	r5, r7, r6, r1
 8004162:	3530      	adds	r5, #48	; 0x30
 8004164:	2a63      	cmp	r2, #99	; 0x63
 8004166:	f104 34ff 	add.w	r4, r4, #4294967295
 800416a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800416e:	4631      	mov	r1, r6
 8004170:	dcf1      	bgt.n	8004156 <__exponent+0x22>
 8004172:	3130      	adds	r1, #48	; 0x30
 8004174:	f1ae 0502 	sub.w	r5, lr, #2
 8004178:	f804 1c01 	strb.w	r1, [r4, #-1]
 800417c:	1c44      	adds	r4, r0, #1
 800417e:	4629      	mov	r1, r5
 8004180:	4561      	cmp	r1, ip
 8004182:	d30a      	bcc.n	800419a <__exponent+0x66>
 8004184:	f10d 0209 	add.w	r2, sp, #9
 8004188:	eba2 020e 	sub.w	r2, r2, lr
 800418c:	4565      	cmp	r5, ip
 800418e:	bf88      	it	hi
 8004190:	2200      	movhi	r2, #0
 8004192:	4413      	add	r3, r2
 8004194:	1a18      	subs	r0, r3, r0
 8004196:	b003      	add	sp, #12
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800419e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041a2:	e7ed      	b.n	8004180 <__exponent+0x4c>
 80041a4:	2330      	movs	r3, #48	; 0x30
 80041a6:	3130      	adds	r1, #48	; 0x30
 80041a8:	7083      	strb	r3, [r0, #2]
 80041aa:	70c1      	strb	r1, [r0, #3]
 80041ac:	1d03      	adds	r3, r0, #4
 80041ae:	e7f1      	b.n	8004194 <__exponent+0x60>

080041b0 <_printf_float>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	b08b      	sub	sp, #44	; 0x2c
 80041b6:	460c      	mov	r4, r1
 80041b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80041bc:	4616      	mov	r6, r2
 80041be:	461f      	mov	r7, r3
 80041c0:	4605      	mov	r5, r0
 80041c2:	f001 f9c3 	bl	800554c <_localeconv_r>
 80041c6:	f8d0 b000 	ldr.w	fp, [r0]
 80041ca:	4658      	mov	r0, fp
 80041cc:	f7fc f838 	bl	8000240 <strlen>
 80041d0:	2300      	movs	r3, #0
 80041d2:	9308      	str	r3, [sp, #32]
 80041d4:	f8d8 3000 	ldr.w	r3, [r8]
 80041d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	3307      	adds	r3, #7
 80041e0:	f023 0307 	bic.w	r3, r3, #7
 80041e4:	f103 0108 	add.w	r1, r3, #8
 80041e8:	f8c8 1000 	str.w	r1, [r8]
 80041ec:	4682      	mov	sl, r0
 80041ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80041f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004458 <_printf_float+0x2a8>
 80041fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80041fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8004202:	eeb4 6b47 	vcmp.f64	d6, d7
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	dd24      	ble.n	8004256 <_printf_float+0xa6>
 800420c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004214:	d502      	bpl.n	800421c <_printf_float+0x6c>
 8004216:	232d      	movs	r3, #45	; 0x2d
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421c:	4b90      	ldr	r3, [pc, #576]	; (8004460 <_printf_float+0x2b0>)
 800421e:	4891      	ldr	r0, [pc, #580]	; (8004464 <_printf_float+0x2b4>)
 8004220:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004224:	bf94      	ite	ls
 8004226:	4698      	movls	r8, r3
 8004228:	4680      	movhi	r8, r0
 800422a:	2303      	movs	r3, #3
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	f022 0204 	bic.w	r2, r2, #4
 8004232:	2300      	movs	r3, #0
 8004234:	6022      	str	r2, [r4, #0]
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	9700      	str	r7, [sp, #0]
 800423a:	4633      	mov	r3, r6
 800423c:	aa09      	add	r2, sp, #36	; 0x24
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 f9d3 	bl	80045ec <_printf_common>
 8004246:	3001      	adds	r0, #1
 8004248:	f040 808a 	bne.w	8004360 <_printf_float+0x1b0>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	b00b      	add	sp, #44	; 0x2c
 8004252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004256:	eeb4 0b40 	vcmp.f64	d0, d0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d709      	bvc.n	8004274 <_printf_float+0xc4>
 8004260:	ee10 3a90 	vmov	r3, s1
 8004264:	2b00      	cmp	r3, #0
 8004266:	bfbc      	itt	lt
 8004268:	232d      	movlt	r3, #45	; 0x2d
 800426a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800426e:	487e      	ldr	r0, [pc, #504]	; (8004468 <_printf_float+0x2b8>)
 8004270:	4b7e      	ldr	r3, [pc, #504]	; (800446c <_printf_float+0x2bc>)
 8004272:	e7d5      	b.n	8004220 <_printf_float+0x70>
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800427a:	9104      	str	r1, [sp, #16]
 800427c:	1c59      	adds	r1, r3, #1
 800427e:	d13c      	bne.n	80042fa <_printf_float+0x14a>
 8004280:	2306      	movs	r3, #6
 8004282:	6063      	str	r3, [r4, #4]
 8004284:	2300      	movs	r3, #0
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	ab08      	add	r3, sp, #32
 800428a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800428e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004292:	ab07      	add	r3, sp, #28
 8004294:	6861      	ldr	r1, [r4, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	6022      	str	r2, [r4, #0]
 800429a:	f10d 031b 	add.w	r3, sp, #27
 800429e:	4628      	mov	r0, r5
 80042a0:	f7ff fef6 	bl	8004090 <__cvt>
 80042a4:	9b04      	ldr	r3, [sp, #16]
 80042a6:	9907      	ldr	r1, [sp, #28]
 80042a8:	2b47      	cmp	r3, #71	; 0x47
 80042aa:	4680      	mov	r8, r0
 80042ac:	d108      	bne.n	80042c0 <_printf_float+0x110>
 80042ae:	1cc8      	adds	r0, r1, #3
 80042b0:	db02      	blt.n	80042b8 <_printf_float+0x108>
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	4299      	cmp	r1, r3
 80042b6:	dd41      	ble.n	800433c <_printf_float+0x18c>
 80042b8:	f1a9 0902 	sub.w	r9, r9, #2
 80042bc:	fa5f f989 	uxtb.w	r9, r9
 80042c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042c4:	d820      	bhi.n	8004308 <_printf_float+0x158>
 80042c6:	3901      	subs	r1, #1
 80042c8:	464a      	mov	r2, r9
 80042ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042ce:	9107      	str	r1, [sp, #28]
 80042d0:	f7ff ff30 	bl	8004134 <__exponent>
 80042d4:	9a08      	ldr	r2, [sp, #32]
 80042d6:	9004      	str	r0, [sp, #16]
 80042d8:	1813      	adds	r3, r2, r0
 80042da:	2a01      	cmp	r2, #1
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	dc02      	bgt.n	80042e6 <_printf_float+0x136>
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	07d2      	lsls	r2, r2, #31
 80042e4:	d501      	bpl.n	80042ea <_printf_float+0x13a>
 80042e6:	3301      	adds	r3, #1
 80042e8:	6123      	str	r3, [r4, #16]
 80042ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0a2      	beq.n	8004238 <_printf_float+0x88>
 80042f2:	232d      	movs	r3, #45	; 0x2d
 80042f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f8:	e79e      	b.n	8004238 <_printf_float+0x88>
 80042fa:	9904      	ldr	r1, [sp, #16]
 80042fc:	2947      	cmp	r1, #71	; 0x47
 80042fe:	d1c1      	bne.n	8004284 <_printf_float+0xd4>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1bf      	bne.n	8004284 <_printf_float+0xd4>
 8004304:	2301      	movs	r3, #1
 8004306:	e7bc      	b.n	8004282 <_printf_float+0xd2>
 8004308:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800430c:	d118      	bne.n	8004340 <_printf_float+0x190>
 800430e:	2900      	cmp	r1, #0
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	dd0b      	ble.n	800432c <_printf_float+0x17c>
 8004314:	6121      	str	r1, [r4, #16]
 8004316:	b913      	cbnz	r3, 800431e <_printf_float+0x16e>
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	07d0      	lsls	r0, r2, #31
 800431c:	d502      	bpl.n	8004324 <_printf_float+0x174>
 800431e:	3301      	adds	r3, #1
 8004320:	440b      	add	r3, r1
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	2300      	movs	r3, #0
 8004326:	65a1      	str	r1, [r4, #88]	; 0x58
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	e7de      	b.n	80042ea <_printf_float+0x13a>
 800432c:	b913      	cbnz	r3, 8004334 <_printf_float+0x184>
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	07d2      	lsls	r2, r2, #31
 8004332:	d501      	bpl.n	8004338 <_printf_float+0x188>
 8004334:	3302      	adds	r3, #2
 8004336:	e7f4      	b.n	8004322 <_printf_float+0x172>
 8004338:	2301      	movs	r3, #1
 800433a:	e7f2      	b.n	8004322 <_printf_float+0x172>
 800433c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004340:	9b08      	ldr	r3, [sp, #32]
 8004342:	4299      	cmp	r1, r3
 8004344:	db05      	blt.n	8004352 <_printf_float+0x1a2>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	6121      	str	r1, [r4, #16]
 800434a:	07d8      	lsls	r0, r3, #31
 800434c:	d5ea      	bpl.n	8004324 <_printf_float+0x174>
 800434e:	1c4b      	adds	r3, r1, #1
 8004350:	e7e7      	b.n	8004322 <_printf_float+0x172>
 8004352:	2900      	cmp	r1, #0
 8004354:	bfd4      	ite	le
 8004356:	f1c1 0202 	rsble	r2, r1, #2
 800435a:	2201      	movgt	r2, #1
 800435c:	4413      	add	r3, r2
 800435e:	e7e0      	b.n	8004322 <_printf_float+0x172>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	055a      	lsls	r2, r3, #21
 8004364:	d407      	bmi.n	8004376 <_printf_float+0x1c6>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	4642      	mov	r2, r8
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	d12a      	bne.n	80043ca <_printf_float+0x21a>
 8004374:	e76a      	b.n	800424c <_printf_float+0x9c>
 8004376:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800437a:	f240 80e2 	bls.w	8004542 <_printf_float+0x392>
 800437e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004382:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438a:	d133      	bne.n	80043f4 <_printf_float+0x244>
 800438c:	4a38      	ldr	r2, [pc, #224]	; (8004470 <_printf_float+0x2c0>)
 800438e:	2301      	movs	r3, #1
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	f43f af58 	beq.w	800424c <_printf_float+0x9c>
 800439c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	db02      	blt.n	80043aa <_printf_float+0x1fa>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	07d8      	lsls	r0, r3, #31
 80043a8:	d50f      	bpl.n	80043ca <_printf_float+0x21a>
 80043aa:	4653      	mov	r3, sl
 80043ac:	465a      	mov	r2, fp
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f af49 	beq.w	800424c <_printf_float+0x9c>
 80043ba:	f04f 0800 	mov.w	r8, #0
 80043be:	f104 091a 	add.w	r9, r4, #26
 80043c2:	9b08      	ldr	r3, [sp, #32]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	4543      	cmp	r3, r8
 80043c8:	dc09      	bgt.n	80043de <_printf_float+0x22e>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	079b      	lsls	r3, r3, #30
 80043ce:	f100 8108 	bmi.w	80045e2 <_printf_float+0x432>
 80043d2:	68e0      	ldr	r0, [r4, #12]
 80043d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d6:	4298      	cmp	r0, r3
 80043d8:	bfb8      	it	lt
 80043da:	4618      	movlt	r0, r3
 80043dc:	e738      	b.n	8004250 <_printf_float+0xa0>
 80043de:	2301      	movs	r3, #1
 80043e0:	464a      	mov	r2, r9
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f af2f 	beq.w	800424c <_printf_float+0x9c>
 80043ee:	f108 0801 	add.w	r8, r8, #1
 80043f2:	e7e6      	b.n	80043c2 <_printf_float+0x212>
 80043f4:	9b07      	ldr	r3, [sp, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dc3c      	bgt.n	8004474 <_printf_float+0x2c4>
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <_printf_float+0x2c0>)
 80043fc:	2301      	movs	r3, #1
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f af21 	beq.w	800424c <_printf_float+0x9c>
 800440a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800440e:	4313      	orrs	r3, r2
 8004410:	d102      	bne.n	8004418 <_printf_float+0x268>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	07d9      	lsls	r1, r3, #31
 8004416:	d5d8      	bpl.n	80043ca <_printf_float+0x21a>
 8004418:	4653      	mov	r3, sl
 800441a:	465a      	mov	r2, fp
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f af12 	beq.w	800424c <_printf_float+0x9c>
 8004428:	f04f 0900 	mov.w	r9, #0
 800442c:	f104 0a1a 	add.w	sl, r4, #26
 8004430:	9b07      	ldr	r3, [sp, #28]
 8004432:	425b      	negs	r3, r3
 8004434:	454b      	cmp	r3, r9
 8004436:	dc01      	bgt.n	800443c <_printf_float+0x28c>
 8004438:	9b08      	ldr	r3, [sp, #32]
 800443a:	e795      	b.n	8004368 <_printf_float+0x1b8>
 800443c:	2301      	movs	r3, #1
 800443e:	4652      	mov	r2, sl
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	f43f af00 	beq.w	800424c <_printf_float+0x9c>
 800444c:	f109 0901 	add.w	r9, r9, #1
 8004450:	e7ee      	b.n	8004430 <_printf_float+0x280>
 8004452:	bf00      	nop
 8004454:	f3af 8000 	nop.w
 8004458:	ffffffff 	.word	0xffffffff
 800445c:	7fefffff 	.word	0x7fefffff
 8004460:	08006dd4 	.word	0x08006dd4
 8004464:	08006dd8 	.word	0x08006dd8
 8004468:	08006de0 	.word	0x08006de0
 800446c:	08006ddc 	.word	0x08006ddc
 8004470:	08006de4 	.word	0x08006de4
 8004474:	9a08      	ldr	r2, [sp, #32]
 8004476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004478:	429a      	cmp	r2, r3
 800447a:	bfa8      	it	ge
 800447c:	461a      	movge	r2, r3
 800447e:	2a00      	cmp	r2, #0
 8004480:	4691      	mov	r9, r2
 8004482:	dc38      	bgt.n	80044f6 <_printf_float+0x346>
 8004484:	2300      	movs	r3, #0
 8004486:	9305      	str	r3, [sp, #20]
 8004488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800448c:	f104 021a 	add.w	r2, r4, #26
 8004490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004492:	9905      	ldr	r1, [sp, #20]
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	eba3 0309 	sub.w	r3, r3, r9
 800449a:	428b      	cmp	r3, r1
 800449c:	dc33      	bgt.n	8004506 <_printf_float+0x356>
 800449e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	db3c      	blt.n	8004520 <_printf_float+0x370>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	07da      	lsls	r2, r3, #31
 80044aa:	d439      	bmi.n	8004520 <_printf_float+0x370>
 80044ac:	9b08      	ldr	r3, [sp, #32]
 80044ae:	9a04      	ldr	r2, [sp, #16]
 80044b0:	9907      	ldr	r1, [sp, #28]
 80044b2:	1a9a      	subs	r2, r3, r2
 80044b4:	eba3 0901 	sub.w	r9, r3, r1
 80044b8:	4591      	cmp	r9, r2
 80044ba:	bfa8      	it	ge
 80044bc:	4691      	movge	r9, r2
 80044be:	f1b9 0f00 	cmp.w	r9, #0
 80044c2:	dc35      	bgt.n	8004530 <_printf_float+0x380>
 80044c4:	f04f 0800 	mov.w	r8, #0
 80044c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044cc:	f104 0a1a 	add.w	sl, r4, #26
 80044d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	eba3 0309 	sub.w	r3, r3, r9
 80044da:	4543      	cmp	r3, r8
 80044dc:	f77f af75 	ble.w	80043ca <_printf_float+0x21a>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4652      	mov	r2, sl
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f aeae 	beq.w	800424c <_printf_float+0x9c>
 80044f0:	f108 0801 	add.w	r8, r8, #1
 80044f4:	e7ec      	b.n	80044d0 <_printf_float+0x320>
 80044f6:	4613      	mov	r3, r2
 80044f8:	4631      	mov	r1, r6
 80044fa:	4642      	mov	r2, r8
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b8      	blx	r7
 8004500:	3001      	adds	r0, #1
 8004502:	d1bf      	bne.n	8004484 <_printf_float+0x2d4>
 8004504:	e6a2      	b.n	800424c <_printf_float+0x9c>
 8004506:	2301      	movs	r3, #1
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	9204      	str	r2, [sp, #16]
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	f43f ae9b 	beq.w	800424c <_printf_float+0x9c>
 8004516:	9b05      	ldr	r3, [sp, #20]
 8004518:	9a04      	ldr	r2, [sp, #16]
 800451a:	3301      	adds	r3, #1
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	e7b7      	b.n	8004490 <_printf_float+0x2e0>
 8004520:	4653      	mov	r3, sl
 8004522:	465a      	mov	r2, fp
 8004524:	4631      	mov	r1, r6
 8004526:	4628      	mov	r0, r5
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	d1be      	bne.n	80044ac <_printf_float+0x2fc>
 800452e:	e68d      	b.n	800424c <_printf_float+0x9c>
 8004530:	9a04      	ldr	r2, [sp, #16]
 8004532:	464b      	mov	r3, r9
 8004534:	4442      	add	r2, r8
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	d1c1      	bne.n	80044c4 <_printf_float+0x314>
 8004540:	e684      	b.n	800424c <_printf_float+0x9c>
 8004542:	9a08      	ldr	r2, [sp, #32]
 8004544:	2a01      	cmp	r2, #1
 8004546:	dc01      	bgt.n	800454c <_printf_float+0x39c>
 8004548:	07db      	lsls	r3, r3, #31
 800454a:	d537      	bpl.n	80045bc <_printf_float+0x40c>
 800454c:	2301      	movs	r3, #1
 800454e:	4642      	mov	r2, r8
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f ae78 	beq.w	800424c <_printf_float+0x9c>
 800455c:	4653      	mov	r3, sl
 800455e:	465a      	mov	r2, fp
 8004560:	4631      	mov	r1, r6
 8004562:	4628      	mov	r0, r5
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	f43f ae70 	beq.w	800424c <_printf_float+0x9c>
 800456c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004570:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004578:	d01b      	beq.n	80045b2 <_printf_float+0x402>
 800457a:	9b08      	ldr	r3, [sp, #32]
 800457c:	f108 0201 	add.w	r2, r8, #1
 8004580:	3b01      	subs	r3, #1
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	d10e      	bne.n	80045aa <_printf_float+0x3fa>
 800458c:	e65e      	b.n	800424c <_printf_float+0x9c>
 800458e:	2301      	movs	r3, #1
 8004590:	464a      	mov	r2, r9
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae57 	beq.w	800424c <_printf_float+0x9c>
 800459e:	f108 0801 	add.w	r8, r8, #1
 80045a2:	9b08      	ldr	r3, [sp, #32]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	4543      	cmp	r3, r8
 80045a8:	dcf1      	bgt.n	800458e <_printf_float+0x3de>
 80045aa:	9b04      	ldr	r3, [sp, #16]
 80045ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045b0:	e6db      	b.n	800436a <_printf_float+0x1ba>
 80045b2:	f04f 0800 	mov.w	r8, #0
 80045b6:	f104 091a 	add.w	r9, r4, #26
 80045ba:	e7f2      	b.n	80045a2 <_printf_float+0x3f2>
 80045bc:	2301      	movs	r3, #1
 80045be:	4642      	mov	r2, r8
 80045c0:	e7df      	b.n	8004582 <_printf_float+0x3d2>
 80045c2:	2301      	movs	r3, #1
 80045c4:	464a      	mov	r2, r9
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	f43f ae3d 	beq.w	800424c <_printf_float+0x9c>
 80045d2:	f108 0801 	add.w	r8, r8, #1
 80045d6:	68e3      	ldr	r3, [r4, #12]
 80045d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045da:	1a5b      	subs	r3, r3, r1
 80045dc:	4543      	cmp	r3, r8
 80045de:	dcf0      	bgt.n	80045c2 <_printf_float+0x412>
 80045e0:	e6f7      	b.n	80043d2 <_printf_float+0x222>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	f104 0919 	add.w	r9, r4, #25
 80045ea:	e7f4      	b.n	80045d6 <_printf_float+0x426>

080045ec <_printf_common>:
 80045ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	4616      	mov	r6, r2
 80045f2:	4699      	mov	r9, r3
 80045f4:	688a      	ldr	r2, [r1, #8]
 80045f6:	690b      	ldr	r3, [r1, #16]
 80045f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bfb8      	it	lt
 8004600:	4613      	movlt	r3, r2
 8004602:	6033      	str	r3, [r6, #0]
 8004604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004608:	4607      	mov	r7, r0
 800460a:	460c      	mov	r4, r1
 800460c:	b10a      	cbz	r2, 8004612 <_printf_common+0x26>
 800460e:	3301      	adds	r3, #1
 8004610:	6033      	str	r3, [r6, #0]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	0699      	lsls	r1, r3, #26
 8004616:	bf42      	ittt	mi
 8004618:	6833      	ldrmi	r3, [r6, #0]
 800461a:	3302      	addmi	r3, #2
 800461c:	6033      	strmi	r3, [r6, #0]
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	f015 0506 	ands.w	r5, r5, #6
 8004624:	d106      	bne.n	8004634 <_printf_common+0x48>
 8004626:	f104 0a19 	add.w	sl, r4, #25
 800462a:	68e3      	ldr	r3, [r4, #12]
 800462c:	6832      	ldr	r2, [r6, #0]
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	42ab      	cmp	r3, r5
 8004632:	dc26      	bgt.n	8004682 <_printf_common+0x96>
 8004634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004638:	1e13      	subs	r3, r2, #0
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	bf18      	it	ne
 800463e:	2301      	movne	r3, #1
 8004640:	0692      	lsls	r2, r2, #26
 8004642:	d42b      	bmi.n	800469c <_printf_common+0xb0>
 8004644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004648:	4649      	mov	r1, r9
 800464a:	4638      	mov	r0, r7
 800464c:	47c0      	blx	r8
 800464e:	3001      	adds	r0, #1
 8004650:	d01e      	beq.n	8004690 <_printf_common+0xa4>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	68e5      	ldr	r5, [r4, #12]
 8004656:	6832      	ldr	r2, [r6, #0]
 8004658:	f003 0306 	and.w	r3, r3, #6
 800465c:	2b04      	cmp	r3, #4
 800465e:	bf08      	it	eq
 8004660:	1aad      	subeq	r5, r5, r2
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	6922      	ldr	r2, [r4, #16]
 8004666:	bf0c      	ite	eq
 8004668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800466c:	2500      	movne	r5, #0
 800466e:	4293      	cmp	r3, r2
 8004670:	bfc4      	itt	gt
 8004672:	1a9b      	subgt	r3, r3, r2
 8004674:	18ed      	addgt	r5, r5, r3
 8004676:	2600      	movs	r6, #0
 8004678:	341a      	adds	r4, #26
 800467a:	42b5      	cmp	r5, r6
 800467c:	d11a      	bne.n	80046b4 <_printf_common+0xc8>
 800467e:	2000      	movs	r0, #0
 8004680:	e008      	b.n	8004694 <_printf_common+0xa8>
 8004682:	2301      	movs	r3, #1
 8004684:	4652      	mov	r2, sl
 8004686:	4649      	mov	r1, r9
 8004688:	4638      	mov	r0, r7
 800468a:	47c0      	blx	r8
 800468c:	3001      	adds	r0, #1
 800468e:	d103      	bne.n	8004698 <_printf_common+0xac>
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004698:	3501      	adds	r5, #1
 800469a:	e7c6      	b.n	800462a <_printf_common+0x3e>
 800469c:	18e1      	adds	r1, r4, r3
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	2030      	movs	r0, #48	; 0x30
 80046a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046a6:	4422      	add	r2, r4
 80046a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046b0:	3302      	adds	r3, #2
 80046b2:	e7c7      	b.n	8004644 <_printf_common+0x58>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4622      	mov	r2, r4
 80046b8:	4649      	mov	r1, r9
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d0e6      	beq.n	8004690 <_printf_common+0xa4>
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7d9      	b.n	800467a <_printf_common+0x8e>
	...

080046c8 <_printf_i>:
 80046c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	7e0f      	ldrb	r7, [r1, #24]
 80046ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046d0:	2f78      	cmp	r7, #120	; 0x78
 80046d2:	4691      	mov	r9, r2
 80046d4:	4680      	mov	r8, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	469a      	mov	sl, r3
 80046da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046de:	d807      	bhi.n	80046f0 <_printf_i+0x28>
 80046e0:	2f62      	cmp	r7, #98	; 0x62
 80046e2:	d80a      	bhi.n	80046fa <_printf_i+0x32>
 80046e4:	2f00      	cmp	r7, #0
 80046e6:	f000 80d8 	beq.w	800489a <_printf_i+0x1d2>
 80046ea:	2f58      	cmp	r7, #88	; 0x58
 80046ec:	f000 80a3 	beq.w	8004836 <_printf_i+0x16e>
 80046f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046f8:	e03a      	b.n	8004770 <_printf_i+0xa8>
 80046fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046fe:	2b15      	cmp	r3, #21
 8004700:	d8f6      	bhi.n	80046f0 <_printf_i+0x28>
 8004702:	a101      	add	r1, pc, #4	; (adr r1, 8004708 <_printf_i+0x40>)
 8004704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004708:	08004761 	.word	0x08004761
 800470c:	08004775 	.word	0x08004775
 8004710:	080046f1 	.word	0x080046f1
 8004714:	080046f1 	.word	0x080046f1
 8004718:	080046f1 	.word	0x080046f1
 800471c:	080046f1 	.word	0x080046f1
 8004720:	08004775 	.word	0x08004775
 8004724:	080046f1 	.word	0x080046f1
 8004728:	080046f1 	.word	0x080046f1
 800472c:	080046f1 	.word	0x080046f1
 8004730:	080046f1 	.word	0x080046f1
 8004734:	08004881 	.word	0x08004881
 8004738:	080047a5 	.word	0x080047a5
 800473c:	08004863 	.word	0x08004863
 8004740:	080046f1 	.word	0x080046f1
 8004744:	080046f1 	.word	0x080046f1
 8004748:	080048a3 	.word	0x080048a3
 800474c:	080046f1 	.word	0x080046f1
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080046f1 	.word	0x080046f1
 8004758:	080046f1 	.word	0x080046f1
 800475c:	0800486b 	.word	0x0800486b
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	602a      	str	r2, [r5, #0]
 8004768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800476c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004770:	2301      	movs	r3, #1
 8004772:	e0a3      	b.n	80048bc <_printf_i+0x1f4>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	6829      	ldr	r1, [r5, #0]
 8004778:	0606      	lsls	r6, r0, #24
 800477a:	f101 0304 	add.w	r3, r1, #4
 800477e:	d50a      	bpl.n	8004796 <_printf_i+0xce>
 8004780:	680e      	ldr	r6, [r1, #0]
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	2e00      	cmp	r6, #0
 8004786:	da03      	bge.n	8004790 <_printf_i+0xc8>
 8004788:	232d      	movs	r3, #45	; 0x2d
 800478a:	4276      	negs	r6, r6
 800478c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004790:	485e      	ldr	r0, [pc, #376]	; (800490c <_printf_i+0x244>)
 8004792:	230a      	movs	r3, #10
 8004794:	e019      	b.n	80047ca <_printf_i+0x102>
 8004796:	680e      	ldr	r6, [r1, #0]
 8004798:	602b      	str	r3, [r5, #0]
 800479a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800479e:	bf18      	it	ne
 80047a0:	b236      	sxthne	r6, r6
 80047a2:	e7ef      	b.n	8004784 <_printf_i+0xbc>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	6029      	str	r1, [r5, #0]
 80047ac:	0601      	lsls	r1, r0, #24
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0xec>
 80047b0:	681e      	ldr	r6, [r3, #0]
 80047b2:	e002      	b.n	80047ba <_printf_i+0xf2>
 80047b4:	0646      	lsls	r6, r0, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0xe8>
 80047b8:	881e      	ldrh	r6, [r3, #0]
 80047ba:	4854      	ldr	r0, [pc, #336]	; (800490c <_printf_i+0x244>)
 80047bc:	2f6f      	cmp	r7, #111	; 0x6f
 80047be:	bf0c      	ite	eq
 80047c0:	2308      	moveq	r3, #8
 80047c2:	230a      	movne	r3, #10
 80047c4:	2100      	movs	r1, #0
 80047c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ca:	6865      	ldr	r5, [r4, #4]
 80047cc:	60a5      	str	r5, [r4, #8]
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	bfa2      	ittt	ge
 80047d2:	6821      	ldrge	r1, [r4, #0]
 80047d4:	f021 0104 	bicge.w	r1, r1, #4
 80047d8:	6021      	strge	r1, [r4, #0]
 80047da:	b90e      	cbnz	r6, 80047e0 <_printf_i+0x118>
 80047dc:	2d00      	cmp	r5, #0
 80047de:	d04d      	beq.n	800487c <_printf_i+0x1b4>
 80047e0:	4615      	mov	r5, r2
 80047e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047e6:	fb03 6711 	mls	r7, r3, r1, r6
 80047ea:	5dc7      	ldrb	r7, [r0, r7]
 80047ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047f0:	4637      	mov	r7, r6
 80047f2:	42bb      	cmp	r3, r7
 80047f4:	460e      	mov	r6, r1
 80047f6:	d9f4      	bls.n	80047e2 <_printf_i+0x11a>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10b      	bne.n	8004814 <_printf_i+0x14c>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	07de      	lsls	r6, r3, #31
 8004800:	d508      	bpl.n	8004814 <_printf_i+0x14c>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	6861      	ldr	r1, [r4, #4]
 8004806:	4299      	cmp	r1, r3
 8004808:	bfde      	ittt	le
 800480a:	2330      	movle	r3, #48	; 0x30
 800480c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004810:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004814:	1b52      	subs	r2, r2, r5
 8004816:	6122      	str	r2, [r4, #16]
 8004818:	f8cd a000 	str.w	sl, [sp]
 800481c:	464b      	mov	r3, r9
 800481e:	aa03      	add	r2, sp, #12
 8004820:	4621      	mov	r1, r4
 8004822:	4640      	mov	r0, r8
 8004824:	f7ff fee2 	bl	80045ec <_printf_common>
 8004828:	3001      	adds	r0, #1
 800482a:	d14c      	bne.n	80048c6 <_printf_i+0x1fe>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b004      	add	sp, #16
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	4835      	ldr	r0, [pc, #212]	; (800490c <_printf_i+0x244>)
 8004838:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800483c:	6829      	ldr	r1, [r5, #0]
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	f851 6b04 	ldr.w	r6, [r1], #4
 8004844:	6029      	str	r1, [r5, #0]
 8004846:	061d      	lsls	r5, r3, #24
 8004848:	d514      	bpl.n	8004874 <_printf_i+0x1ac>
 800484a:	07df      	lsls	r7, r3, #31
 800484c:	bf44      	itt	mi
 800484e:	f043 0320 	orrmi.w	r3, r3, #32
 8004852:	6023      	strmi	r3, [r4, #0]
 8004854:	b91e      	cbnz	r6, 800485e <_printf_i+0x196>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f023 0320 	bic.w	r3, r3, #32
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	2310      	movs	r3, #16
 8004860:	e7b0      	b.n	80047c4 <_printf_i+0xfc>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f043 0320 	orr.w	r3, r3, #32
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	2378      	movs	r3, #120	; 0x78
 800486c:	4828      	ldr	r0, [pc, #160]	; (8004910 <_printf_i+0x248>)
 800486e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004872:	e7e3      	b.n	800483c <_printf_i+0x174>
 8004874:	0659      	lsls	r1, r3, #25
 8004876:	bf48      	it	mi
 8004878:	b2b6      	uxthmi	r6, r6
 800487a:	e7e6      	b.n	800484a <_printf_i+0x182>
 800487c:	4615      	mov	r5, r2
 800487e:	e7bb      	b.n	80047f8 <_printf_i+0x130>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	6826      	ldr	r6, [r4, #0]
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6028      	str	r0, [r5, #0]
 800488a:	0635      	lsls	r5, r6, #24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	d501      	bpl.n	8004894 <_printf_i+0x1cc>
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0x1d2>
 8004894:	0670      	lsls	r0, r6, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0x1c8>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4615      	mov	r5, r2
 80048a0:	e7ba      	b.n	8004818 <_printf_i+0x150>
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	602a      	str	r2, [r5, #0]
 80048a8:	681d      	ldr	r5, [r3, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4628      	mov	r0, r5
 80048b0:	f7fb fcce 	bl	8000250 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1f2>
 80048b6:	1b40      	subs	r0, r0, r5
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c4:	e7a8      	b.n	8004818 <_printf_i+0x150>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	462a      	mov	r2, r5
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0ab      	beq.n	800482c <_printf_i+0x164>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d413      	bmi.n	8004902 <_printf_i+0x23a>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e7a4      	b.n	8004830 <_printf_i+0x168>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d09b      	beq.n	800482c <_printf_i+0x164>
 80048f4:	3501      	adds	r5, #1
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	9903      	ldr	r1, [sp, #12]
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dcf2      	bgt.n	80048e6 <_printf_i+0x21e>
 8004900:	e7eb      	b.n	80048da <_printf_i+0x212>
 8004902:	2500      	movs	r5, #0
 8004904:	f104 0619 	add.w	r6, r4, #25
 8004908:	e7f5      	b.n	80048f6 <_printf_i+0x22e>
 800490a:	bf00      	nop
 800490c:	08006de6 	.word	0x08006de6
 8004910:	08006df7 	.word	0x08006df7

08004914 <siprintf>:
 8004914:	b40e      	push	{r1, r2, r3}
 8004916:	b500      	push	{lr}
 8004918:	b09c      	sub	sp, #112	; 0x70
 800491a:	ab1d      	add	r3, sp, #116	; 0x74
 800491c:	9002      	str	r0, [sp, #8]
 800491e:	9006      	str	r0, [sp, #24]
 8004920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004924:	4809      	ldr	r0, [pc, #36]	; (800494c <siprintf+0x38>)
 8004926:	9107      	str	r1, [sp, #28]
 8004928:	9104      	str	r1, [sp, #16]
 800492a:	4909      	ldr	r1, [pc, #36]	; (8004950 <siprintf+0x3c>)
 800492c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004930:	9105      	str	r1, [sp, #20]
 8004932:	6800      	ldr	r0, [r0, #0]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	a902      	add	r1, sp, #8
 8004938:	f001 faf8 	bl	8005f2c <_svfiprintf_r>
 800493c:	9b02      	ldr	r3, [sp, #8]
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	b01c      	add	sp, #112	; 0x70
 8004944:	f85d eb04 	ldr.w	lr, [sp], #4
 8004948:	b003      	add	sp, #12
 800494a:	4770      	bx	lr
 800494c:	2000000c 	.word	0x2000000c
 8004950:	ffff0208 	.word	0xffff0208

08004954 <quorem>:
 8004954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	6903      	ldr	r3, [r0, #16]
 800495a:	690c      	ldr	r4, [r1, #16]
 800495c:	42a3      	cmp	r3, r4
 800495e:	4607      	mov	r7, r0
 8004960:	f2c0 8081 	blt.w	8004a66 <quorem+0x112>
 8004964:	3c01      	subs	r4, #1
 8004966:	f101 0814 	add.w	r8, r1, #20
 800496a:	f100 0514 	add.w	r5, r0, #20
 800496e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800497c:	3301      	adds	r3, #1
 800497e:	429a      	cmp	r2, r3
 8004980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004988:	fbb2 f6f3 	udiv	r6, r2, r3
 800498c:	d331      	bcc.n	80049f2 <quorem+0x9e>
 800498e:	f04f 0e00 	mov.w	lr, #0
 8004992:	4640      	mov	r0, r8
 8004994:	46ac      	mov	ip, r5
 8004996:	46f2      	mov	sl, lr
 8004998:	f850 2b04 	ldr.w	r2, [r0], #4
 800499c:	b293      	uxth	r3, r2
 800499e:	fb06 e303 	mla	r3, r6, r3, lr
 80049a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ebaa 0303 	sub.w	r3, sl, r3
 80049ac:	f8dc a000 	ldr.w	sl, [ip]
 80049b0:	0c12      	lsrs	r2, r2, #16
 80049b2:	fa13 f38a 	uxtah	r3, r3, sl
 80049b6:	fb06 e202 	mla	r2, r6, r2, lr
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	9b00      	ldr	r3, [sp, #0]
 80049be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049c2:	b292      	uxth	r2, r2
 80049c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80049c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80049d0:	4581      	cmp	r9, r0
 80049d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049d6:	f84c 3b04 	str.w	r3, [ip], #4
 80049da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049de:	d2db      	bcs.n	8004998 <quorem+0x44>
 80049e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80049e4:	b92b      	cbnz	r3, 80049f2 <quorem+0x9e>
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	429d      	cmp	r5, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	d32e      	bcc.n	8004a4e <quorem+0xfa>
 80049f0:	613c      	str	r4, [r7, #16]
 80049f2:	4638      	mov	r0, r7
 80049f4:	f001 f846 	bl	8005a84 <__mcmp>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	db24      	blt.n	8004a46 <quorem+0xf2>
 80049fc:	3601      	adds	r6, #1
 80049fe:	4628      	mov	r0, r5
 8004a00:	f04f 0c00 	mov.w	ip, #0
 8004a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a08:	f8d0 e000 	ldr.w	lr, [r0]
 8004a0c:	b293      	uxth	r3, r2
 8004a0e:	ebac 0303 	sub.w	r3, ip, r3
 8004a12:	0c12      	lsrs	r2, r2, #16
 8004a14:	fa13 f38e 	uxtah	r3, r3, lr
 8004a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a26:	45c1      	cmp	r9, r8
 8004a28:	f840 3b04 	str.w	r3, [r0], #4
 8004a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a30:	d2e8      	bcs.n	8004a04 <quorem+0xb0>
 8004a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a3a:	b922      	cbnz	r2, 8004a46 <quorem+0xf2>
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	429d      	cmp	r5, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	d30a      	bcc.n	8004a5a <quorem+0x106>
 8004a44:	613c      	str	r4, [r7, #16]
 8004a46:	4630      	mov	r0, r6
 8004a48:	b003      	add	sp, #12
 8004a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d1cc      	bne.n	80049f0 <quorem+0x9c>
 8004a56:	3c01      	subs	r4, #1
 8004a58:	e7c7      	b.n	80049ea <quorem+0x96>
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	d1f0      	bne.n	8004a44 <quorem+0xf0>
 8004a62:	3c01      	subs	r4, #1
 8004a64:	e7eb      	b.n	8004a3e <quorem+0xea>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e7ee      	b.n	8004a48 <quorem+0xf4>
 8004a6a:	0000      	movs	r0, r0
 8004a6c:	0000      	movs	r0, r0
	...

08004a70 <_dtoa_r>:
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	ed2d 8b02 	vpush	{d8}
 8004a78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a7a:	b091      	sub	sp, #68	; 0x44
 8004a7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004a80:	ec59 8b10 	vmov	r8, r9, d0
 8004a84:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004a86:	9106      	str	r1, [sp, #24]
 8004a88:	4606      	mov	r6, r0
 8004a8a:	9208      	str	r2, [sp, #32]
 8004a8c:	930c      	str	r3, [sp, #48]	; 0x30
 8004a8e:	b975      	cbnz	r5, 8004aae <_dtoa_r+0x3e>
 8004a90:	2010      	movs	r0, #16
 8004a92:	f000 fd5f 	bl	8005554 <malloc>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6270      	str	r0, [r6, #36]	; 0x24
 8004a9a:	b920      	cbnz	r0, 8004aa6 <_dtoa_r+0x36>
 8004a9c:	4baa      	ldr	r3, [pc, #680]	; (8004d48 <_dtoa_r+0x2d8>)
 8004a9e:	21ea      	movs	r1, #234	; 0xea
 8004aa0:	48aa      	ldr	r0, [pc, #680]	; (8004d4c <_dtoa_r+0x2dc>)
 8004aa2:	f001 fb53 	bl	800614c <__assert_func>
 8004aa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004aaa:	6005      	str	r5, [r0, #0]
 8004aac:	60c5      	str	r5, [r0, #12]
 8004aae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	b151      	cbz	r1, 8004aca <_dtoa_r+0x5a>
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	604a      	str	r2, [r1, #4]
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4093      	lsls	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 fd9e 	bl	8005600 <_Bfree>
 8004ac4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f1b9 0300 	subs.w	r3, r9, #0
 8004ace:	bfbb      	ittet	lt
 8004ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ad4:	9303      	strlt	r3, [sp, #12]
 8004ad6:	2300      	movge	r3, #0
 8004ad8:	2201      	movlt	r2, #1
 8004ada:	bfac      	ite	ge
 8004adc:	6023      	strge	r3, [r4, #0]
 8004ade:	6022      	strlt	r2, [r4, #0]
 8004ae0:	4b9b      	ldr	r3, [pc, #620]	; (8004d50 <_dtoa_r+0x2e0>)
 8004ae2:	9c03      	ldr	r4, [sp, #12]
 8004ae4:	43a3      	bics	r3, r4
 8004ae6:	d11c      	bne.n	8004b22 <_dtoa_r+0xb2>
 8004ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aea:	f242 730f 	movw	r3, #9999	; 0x270f
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004af4:	ea53 0308 	orrs.w	r3, r3, r8
 8004af8:	f000 84fd 	beq.w	80054f6 <_dtoa_r+0xa86>
 8004afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004afe:	b963      	cbnz	r3, 8004b1a <_dtoa_r+0xaa>
 8004b00:	4b94      	ldr	r3, [pc, #592]	; (8004d54 <_dtoa_r+0x2e4>)
 8004b02:	e01f      	b.n	8004b44 <_dtoa_r+0xd4>
 8004b04:	4b94      	ldr	r3, [pc, #592]	; (8004d58 <_dtoa_r+0x2e8>)
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	9801      	ldr	r0, [sp, #4]
 8004b10:	b011      	add	sp, #68	; 0x44
 8004b12:	ecbd 8b02 	vpop	{d8}
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	4b8e      	ldr	r3, [pc, #568]	; (8004d54 <_dtoa_r+0x2e4>)
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	3303      	adds	r3, #3
 8004b20:	e7f3      	b.n	8004b0a <_dtoa_r+0x9a>
 8004b22:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004b26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	d10b      	bne.n	8004b48 <_dtoa_r+0xd8>
 8004b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b32:	2301      	movs	r3, #1
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 84d9 	beq.w	80054f0 <_dtoa_r+0xa80>
 8004b3e:	4887      	ldr	r0, [pc, #540]	; (8004d5c <_dtoa_r+0x2ec>)
 8004b40:	6018      	str	r0, [r3, #0]
 8004b42:	1e43      	subs	r3, r0, #1
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	e7e2      	b.n	8004b0e <_dtoa_r+0x9e>
 8004b48:	a90f      	add	r1, sp, #60	; 0x3c
 8004b4a:	aa0e      	add	r2, sp, #56	; 0x38
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	eeb0 0b48 	vmov.f64	d0, d8
 8004b52:	f001 f83d 	bl	8005bd0 <__d2b>
 8004b56:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b5e:	2900      	cmp	r1, #0
 8004b60:	d046      	beq.n	8004bf0 <_dtoa_r+0x180>
 8004b62:	ee18 4a90 	vmov	r4, s17
 8004b66:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b6a:	ec53 2b18 	vmov	r2, r3, d8
 8004b6e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8004b72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004b7a:	2400      	movs	r4, #0
 8004b7c:	ec43 2b16 	vmov	d6, r2, r3
 8004b80:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004b84:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8004d30 <_dtoa_r+0x2c0>
 8004b88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b8c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004d38 <_dtoa_r+0x2c8>
 8004b90:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004b94:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8004d40 <_dtoa_r+0x2d0>
 8004b98:	ee07 1a90 	vmov	s15, r1
 8004b9c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004ba0:	eeb0 7b46 	vmov.f64	d7, d6
 8004ba4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004ba8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004bac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	ee16 ba90 	vmov	fp, s13
 8004bb8:	940a      	str	r4, [sp, #40]	; 0x28
 8004bba:	d508      	bpl.n	8004bce <_dtoa_r+0x15e>
 8004bbc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004bc0:	eeb4 6b47 	vcmp.f64	d6, d7
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	bf18      	it	ne
 8004bca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004bce:	f1bb 0f16 	cmp.w	fp, #22
 8004bd2:	d82f      	bhi.n	8004c34 <_dtoa_r+0x1c4>
 8004bd4:	4b62      	ldr	r3, [pc, #392]	; (8004d60 <_dtoa_r+0x2f0>)
 8004bd6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004bda:	ed93 7b00 	vldr	d7, [r3]
 8004bde:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d501      	bpl.n	8004bec <_dtoa_r+0x17c>
 8004be8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004bec:	2300      	movs	r3, #0
 8004bee:	e022      	b.n	8004c36 <_dtoa_r+0x1c6>
 8004bf0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004bf2:	4401      	add	r1, r0
 8004bf4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	bfc1      	itttt	gt
 8004bfc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c00:	fa04 f303 	lslgt.w	r3, r4, r3
 8004c04:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8004c08:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004c0c:	bfd6      	itet	le
 8004c0e:	f1c3 0320 	rsble	r3, r3, #32
 8004c12:	ea43 0808 	orrgt.w	r8, r3, r8
 8004c16:	fa08 f803 	lslle.w	r8, r8, r3
 8004c1a:	ee07 8a90 	vmov	s15, r8
 8004c1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004c22:	3901      	subs	r1, #1
 8004c24:	ee17 4a90 	vmov	r4, s15
 8004c28:	ec53 2b17 	vmov	r2, r3, d7
 8004c2c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8004c30:	2401      	movs	r4, #1
 8004c32:	e7a3      	b.n	8004b7c <_dtoa_r+0x10c>
 8004c34:	2301      	movs	r3, #1
 8004c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c38:	1a43      	subs	r3, r0, r1
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	bf45      	ittet	mi
 8004c3e:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c42:	9304      	strmi	r3, [sp, #16]
 8004c44:	2300      	movpl	r3, #0
 8004c46:	2300      	movmi	r3, #0
 8004c48:	9205      	str	r2, [sp, #20]
 8004c4a:	bf54      	ite	pl
 8004c4c:	9304      	strpl	r3, [sp, #16]
 8004c4e:	9305      	strmi	r3, [sp, #20]
 8004c50:	f1bb 0f00 	cmp.w	fp, #0
 8004c54:	db18      	blt.n	8004c88 <_dtoa_r+0x218>
 8004c56:	9b05      	ldr	r3, [sp, #20]
 8004c58:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8004c5c:	445b      	add	r3, fp
 8004c5e:	9305      	str	r3, [sp, #20]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9a06      	ldr	r2, [sp, #24]
 8004c64:	2a09      	cmp	r2, #9
 8004c66:	d849      	bhi.n	8004cfc <_dtoa_r+0x28c>
 8004c68:	2a05      	cmp	r2, #5
 8004c6a:	bfc4      	itt	gt
 8004c6c:	3a04      	subgt	r2, #4
 8004c6e:	9206      	strgt	r2, [sp, #24]
 8004c70:	9a06      	ldr	r2, [sp, #24]
 8004c72:	f1a2 0202 	sub.w	r2, r2, #2
 8004c76:	bfcc      	ite	gt
 8004c78:	2400      	movgt	r4, #0
 8004c7a:	2401      	movle	r4, #1
 8004c7c:	2a03      	cmp	r2, #3
 8004c7e:	d848      	bhi.n	8004d12 <_dtoa_r+0x2a2>
 8004c80:	e8df f002 	tbb	[pc, r2]
 8004c84:	3a2c2e0b 	.word	0x3a2c2e0b
 8004c88:	9b04      	ldr	r3, [sp, #16]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	eba3 030b 	sub.w	r3, r3, fp
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	9209      	str	r2, [sp, #36]	; 0x24
 8004c94:	f1cb 0300 	rsb	r3, fp, #0
 8004c98:	e7e3      	b.n	8004c62 <_dtoa_r+0x1f2>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	9207      	str	r2, [sp, #28]
 8004c9e:	9a08      	ldr	r2, [sp, #32]
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	dc39      	bgt.n	8004d18 <_dtoa_r+0x2a8>
 8004ca4:	f04f 0a01 	mov.w	sl, #1
 8004ca8:	46d1      	mov	r9, sl
 8004caa:	4652      	mov	r2, sl
 8004cac:	f8cd a020 	str.w	sl, [sp, #32]
 8004cb0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6079      	str	r1, [r7, #4]
 8004cb6:	2004      	movs	r0, #4
 8004cb8:	f100 0c14 	add.w	ip, r0, #20
 8004cbc:	4594      	cmp	ip, r2
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	d92f      	bls.n	8004d22 <_dtoa_r+0x2b2>
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8004cc6:	f000 fc5b 	bl	8005580 <_Balloc>
 8004cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ccc:	9001      	str	r0, [sp, #4]
 8004cce:	4602      	mov	r2, r0
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d149      	bne.n	8004d68 <_dtoa_r+0x2f8>
 8004cd4:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <_dtoa_r+0x2f4>)
 8004cd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cda:	e6e1      	b.n	8004aa0 <_dtoa_r+0x30>
 8004cdc:	2201      	movs	r2, #1
 8004cde:	e7dd      	b.n	8004c9c <_dtoa_r+0x22c>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	9207      	str	r2, [sp, #28]
 8004ce4:	9a08      	ldr	r2, [sp, #32]
 8004ce6:	eb0b 0a02 	add.w	sl, fp, r2
 8004cea:	f10a 0901 	add.w	r9, sl, #1
 8004cee:	464a      	mov	r2, r9
 8004cf0:	2a01      	cmp	r2, #1
 8004cf2:	bfb8      	it	lt
 8004cf4:	2201      	movlt	r2, #1
 8004cf6:	e7db      	b.n	8004cb0 <_dtoa_r+0x240>
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	e7f2      	b.n	8004ce2 <_dtoa_r+0x272>
 8004cfc:	2401      	movs	r4, #1
 8004cfe:	2200      	movs	r2, #0
 8004d00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004d04:	f04f 3aff 	mov.w	sl, #4294967295
 8004d08:	2100      	movs	r1, #0
 8004d0a:	46d1      	mov	r9, sl
 8004d0c:	2212      	movs	r2, #18
 8004d0e:	9108      	str	r1, [sp, #32]
 8004d10:	e7ce      	b.n	8004cb0 <_dtoa_r+0x240>
 8004d12:	2201      	movs	r2, #1
 8004d14:	9207      	str	r2, [sp, #28]
 8004d16:	e7f5      	b.n	8004d04 <_dtoa_r+0x294>
 8004d18:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004d1c:	46d1      	mov	r9, sl
 8004d1e:	4652      	mov	r2, sl
 8004d20:	e7c6      	b.n	8004cb0 <_dtoa_r+0x240>
 8004d22:	3101      	adds	r1, #1
 8004d24:	6079      	str	r1, [r7, #4]
 8004d26:	0040      	lsls	r0, r0, #1
 8004d28:	e7c6      	b.n	8004cb8 <_dtoa_r+0x248>
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	636f4361 	.word	0x636f4361
 8004d34:	3fd287a7 	.word	0x3fd287a7
 8004d38:	8b60c8b3 	.word	0x8b60c8b3
 8004d3c:	3fc68a28 	.word	0x3fc68a28
 8004d40:	509f79fb 	.word	0x509f79fb
 8004d44:	3fd34413 	.word	0x3fd34413
 8004d48:	08006e15 	.word	0x08006e15
 8004d4c:	08006e2c 	.word	0x08006e2c
 8004d50:	7ff00000 	.word	0x7ff00000
 8004d54:	08006e11 	.word	0x08006e11
 8004d58:	08006e08 	.word	0x08006e08
 8004d5c:	08006de5 	.word	0x08006de5
 8004d60:	08006f20 	.word	0x08006f20
 8004d64:	08006e87 	.word	0x08006e87
 8004d68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004d6a:	9901      	ldr	r1, [sp, #4]
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	f1b9 0f0e 	cmp.w	r9, #14
 8004d72:	d86c      	bhi.n	8004e4e <_dtoa_r+0x3de>
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	d06a      	beq.n	8004e4e <_dtoa_r+0x3de>
 8004d78:	f1bb 0f00 	cmp.w	fp, #0
 8004d7c:	f340 80a0 	ble.w	8004ec0 <_dtoa_r+0x450>
 8004d80:	49c1      	ldr	r1, [pc, #772]	; (8005088 <_dtoa_r+0x618>)
 8004d82:	f00b 020f 	and.w	r2, fp, #15
 8004d86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8004d8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004d8e:	ed92 7b00 	vldr	d7, [r2]
 8004d92:	ea4f 112b 	mov.w	r1, fp, asr #4
 8004d96:	f000 8087 	beq.w	8004ea8 <_dtoa_r+0x438>
 8004d9a:	4abc      	ldr	r2, [pc, #752]	; (800508c <_dtoa_r+0x61c>)
 8004d9c:	ed92 6b08 	vldr	d6, [r2, #32]
 8004da0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004da4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004da8:	f001 010f 	and.w	r1, r1, #15
 8004dac:	2203      	movs	r2, #3
 8004dae:	48b7      	ldr	r0, [pc, #732]	; (800508c <_dtoa_r+0x61c>)
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d17b      	bne.n	8004eac <_dtoa_r+0x43c>
 8004db4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004db8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	f000 80a2 	beq.w	8004f0c <_dtoa_r+0x49c>
 8004dc8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004dcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004dd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	f140 8098 	bpl.w	8004f0c <_dtoa_r+0x49c>
 8004ddc:	f1b9 0f00 	cmp.w	r9, #0
 8004de0:	f000 8094 	beq.w	8004f0c <_dtoa_r+0x49c>
 8004de4:	f1ba 0f00 	cmp.w	sl, #0
 8004de8:	dd2f      	ble.n	8004e4a <_dtoa_r+0x3da>
 8004dea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004dee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004df2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004df6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004dfa:	3201      	adds	r2, #1
 8004dfc:	4650      	mov	r0, sl
 8004dfe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004e02:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004e06:	ee07 2a90 	vmov	s15, r2
 8004e0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e0e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004e12:	ee15 4a90 	vmov	r4, s11
 8004e16:	ec52 1b15 	vmov	r1, r2, d5
 8004e1a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d177      	bne.n	8004f12 <_dtoa_r+0x4a2>
 8004e22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004e26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e2a:	ec42 1b17 	vmov	d7, r1, r2
 8004e2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	f300 8263 	bgt.w	8005300 <_dtoa_r+0x890>
 8004e3a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	f100 8258 	bmi.w	80052fa <_dtoa_r+0x88a>
 8004e4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	f2c0 811d 	blt.w	8005090 <_dtoa_r+0x620>
 8004e56:	f1bb 0f0e 	cmp.w	fp, #14
 8004e5a:	f300 8119 	bgt.w	8005090 <_dtoa_r+0x620>
 8004e5e:	4b8a      	ldr	r3, [pc, #552]	; (8005088 <_dtoa_r+0x618>)
 8004e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e64:	ed93 6b00 	vldr	d6, [r3]
 8004e68:	9b08      	ldr	r3, [sp, #32]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f280 80b7 	bge.w	8004fde <_dtoa_r+0x56e>
 8004e70:	f1b9 0f00 	cmp.w	r9, #0
 8004e74:	f300 80b3 	bgt.w	8004fde <_dtoa_r+0x56e>
 8004e78:	f040 823f 	bne.w	80052fa <_dtoa_r+0x88a>
 8004e7c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004e80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	464c      	mov	r4, r9
 8004e92:	464f      	mov	r7, r9
 8004e94:	f280 8215 	bge.w	80052c2 <_dtoa_r+0x852>
 8004e98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004e9c:	2331      	movs	r3, #49	; 0x31
 8004e9e:	f808 3b01 	strb.w	r3, [r8], #1
 8004ea2:	f10b 0b01 	add.w	fp, fp, #1
 8004ea6:	e211      	b.n	80052cc <_dtoa_r+0x85c>
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	e780      	b.n	8004dae <_dtoa_r+0x33e>
 8004eac:	07cc      	lsls	r4, r1, #31
 8004eae:	d504      	bpl.n	8004eba <_dtoa_r+0x44a>
 8004eb0:	ed90 6b00 	vldr	d6, [r0]
 8004eb4:	3201      	adds	r2, #1
 8004eb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004eba:	1049      	asrs	r1, r1, #1
 8004ebc:	3008      	adds	r0, #8
 8004ebe:	e777      	b.n	8004db0 <_dtoa_r+0x340>
 8004ec0:	d022      	beq.n	8004f08 <_dtoa_r+0x498>
 8004ec2:	f1cb 0100 	rsb	r1, fp, #0
 8004ec6:	4a70      	ldr	r2, [pc, #448]	; (8005088 <_dtoa_r+0x618>)
 8004ec8:	f001 000f 	and.w	r0, r1, #15
 8004ecc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004ed0:	ed92 7b00 	vldr	d7, [r2]
 8004ed4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004ed8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004edc:	486b      	ldr	r0, [pc, #428]	; (800508c <_dtoa_r+0x61c>)
 8004ede:	1109      	asrs	r1, r1, #4
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	b929      	cbnz	r1, 8004ef2 <_dtoa_r+0x482>
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	f43f af6a 	beq.w	8004dc0 <_dtoa_r+0x350>
 8004eec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ef0:	e766      	b.n	8004dc0 <_dtoa_r+0x350>
 8004ef2:	07cf      	lsls	r7, r1, #31
 8004ef4:	d505      	bpl.n	8004f02 <_dtoa_r+0x492>
 8004ef6:	ed90 6b00 	vldr	d6, [r0]
 8004efa:	3201      	adds	r2, #1
 8004efc:	2401      	movs	r4, #1
 8004efe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f02:	1049      	asrs	r1, r1, #1
 8004f04:	3008      	adds	r0, #8
 8004f06:	e7ed      	b.n	8004ee4 <_dtoa_r+0x474>
 8004f08:	2202      	movs	r2, #2
 8004f0a:	e759      	b.n	8004dc0 <_dtoa_r+0x350>
 8004f0c:	465f      	mov	r7, fp
 8004f0e:	4648      	mov	r0, r9
 8004f10:	e775      	b.n	8004dfe <_dtoa_r+0x38e>
 8004f12:	ec42 1b17 	vmov	d7, r1, r2
 8004f16:	4a5c      	ldr	r2, [pc, #368]	; (8005088 <_dtoa_r+0x618>)
 8004f18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004f1c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004f20:	9a01      	ldr	r2, [sp, #4]
 8004f22:	1814      	adds	r4, r2, r0
 8004f24:	9a07      	ldr	r2, [sp, #28]
 8004f26:	b352      	cbz	r2, 8004f7e <_dtoa_r+0x50e>
 8004f28:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004f2c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004f30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004f34:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004f38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004f3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004f40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004f44:	ee14 2a90 	vmov	r2, s9
 8004f48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004f4c:	3230      	adds	r2, #48	; 0x30
 8004f4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004f52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	f808 2b01 	strb.w	r2, [r8], #1
 8004f5e:	d439      	bmi.n	8004fd4 <_dtoa_r+0x564>
 8004f60:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004f64:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	d472      	bmi.n	8005054 <_dtoa_r+0x5e4>
 8004f6e:	45a0      	cmp	r8, r4
 8004f70:	f43f af6b 	beq.w	8004e4a <_dtoa_r+0x3da>
 8004f74:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004f78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004f7c:	e7e0      	b.n	8004f40 <_dtoa_r+0x4d0>
 8004f7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004f82:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004f86:	4621      	mov	r1, r4
 8004f88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004f8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004f90:	ee14 2a90 	vmov	r2, s9
 8004f94:	3230      	adds	r2, #48	; 0x30
 8004f96:	f808 2b01 	strb.w	r2, [r8], #1
 8004f9a:	45a0      	cmp	r8, r4
 8004f9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004fa0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004fa4:	d118      	bne.n	8004fd8 <_dtoa_r+0x568>
 8004fa6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004faa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004fae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	dc4d      	bgt.n	8005054 <_dtoa_r+0x5e4>
 8004fb8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004fbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc4:	f57f af41 	bpl.w	8004e4a <_dtoa_r+0x3da>
 8004fc8:	4688      	mov	r8, r1
 8004fca:	3901      	subs	r1, #1
 8004fcc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004fd0:	2b30      	cmp	r3, #48	; 0x30
 8004fd2:	d0f9      	beq.n	8004fc8 <_dtoa_r+0x558>
 8004fd4:	46bb      	mov	fp, r7
 8004fd6:	e02a      	b.n	800502e <_dtoa_r+0x5be>
 8004fd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004fdc:	e7d6      	b.n	8004f8c <_dtoa_r+0x51c>
 8004fde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fe2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004fe6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004fea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004fee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004ff2:	ee15 3a10 	vmov	r3, s10
 8004ff6:	3330      	adds	r3, #48	; 0x30
 8004ff8:	f808 3b01 	strb.w	r3, [r8], #1
 8004ffc:	9b01      	ldr	r3, [sp, #4]
 8004ffe:	eba8 0303 	sub.w	r3, r8, r3
 8005002:	4599      	cmp	r9, r3
 8005004:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005008:	eea3 7b46 	vfms.f64	d7, d3, d6
 800500c:	d133      	bne.n	8005076 <_dtoa_r+0x606>
 800500e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005012:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501a:	dc1a      	bgt.n	8005052 <_dtoa_r+0x5e2>
 800501c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005024:	d103      	bne.n	800502e <_dtoa_r+0x5be>
 8005026:	ee15 3a10 	vmov	r3, s10
 800502a:	07d9      	lsls	r1, r3, #31
 800502c:	d411      	bmi.n	8005052 <_dtoa_r+0x5e2>
 800502e:	4629      	mov	r1, r5
 8005030:	4630      	mov	r0, r6
 8005032:	f000 fae5 	bl	8005600 <_Bfree>
 8005036:	2300      	movs	r3, #0
 8005038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800503a:	f888 3000 	strb.w	r3, [r8]
 800503e:	f10b 0301 	add.w	r3, fp, #1
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005046:	2b00      	cmp	r3, #0
 8005048:	f43f ad61 	beq.w	8004b0e <_dtoa_r+0x9e>
 800504c:	f8c3 8000 	str.w	r8, [r3]
 8005050:	e55d      	b.n	8004b0e <_dtoa_r+0x9e>
 8005052:	465f      	mov	r7, fp
 8005054:	4643      	mov	r3, r8
 8005056:	4698      	mov	r8, r3
 8005058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800505c:	2a39      	cmp	r2, #57	; 0x39
 800505e:	d106      	bne.n	800506e <_dtoa_r+0x5fe>
 8005060:	9a01      	ldr	r2, [sp, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d1f7      	bne.n	8005056 <_dtoa_r+0x5e6>
 8005066:	9901      	ldr	r1, [sp, #4]
 8005068:	2230      	movs	r2, #48	; 0x30
 800506a:	3701      	adds	r7, #1
 800506c:	700a      	strb	r2, [r1, #0]
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	3201      	adds	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e7ae      	b.n	8004fd4 <_dtoa_r+0x564>
 8005076:	ee27 7b04 	vmul.f64	d7, d7, d4
 800507a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	d1b2      	bne.n	8004fea <_dtoa_r+0x57a>
 8005084:	e7d3      	b.n	800502e <_dtoa_r+0x5be>
 8005086:	bf00      	nop
 8005088:	08006f20 	.word	0x08006f20
 800508c:	08006ef8 	.word	0x08006ef8
 8005090:	9907      	ldr	r1, [sp, #28]
 8005092:	2900      	cmp	r1, #0
 8005094:	f000 80d0 	beq.w	8005238 <_dtoa_r+0x7c8>
 8005098:	9906      	ldr	r1, [sp, #24]
 800509a:	2901      	cmp	r1, #1
 800509c:	f300 80b4 	bgt.w	8005208 <_dtoa_r+0x798>
 80050a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050a2:	2900      	cmp	r1, #0
 80050a4:	f000 80ac 	beq.w	8005200 <_dtoa_r+0x790>
 80050a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80050ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80050b0:	461c      	mov	r4, r3
 80050b2:	930a      	str	r3, [sp, #40]	; 0x28
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	2101      	movs	r1, #1
 80050be:	4413      	add	r3, r2
 80050c0:	4630      	mov	r0, r6
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	f000 fb54 	bl	8005770 <__i2b>
 80050c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ca:	4607      	mov	r7, r0
 80050cc:	f1b8 0f00 	cmp.w	r8, #0
 80050d0:	dd0d      	ble.n	80050ee <_dtoa_r+0x67e>
 80050d2:	9a05      	ldr	r2, [sp, #20]
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	dd0a      	ble.n	80050ee <_dtoa_r+0x67e>
 80050d8:	4542      	cmp	r2, r8
 80050da:	9904      	ldr	r1, [sp, #16]
 80050dc:	bfa8      	it	ge
 80050de:	4642      	movge	r2, r8
 80050e0:	1a89      	subs	r1, r1, r2
 80050e2:	9104      	str	r1, [sp, #16]
 80050e4:	9905      	ldr	r1, [sp, #20]
 80050e6:	eba8 0802 	sub.w	r8, r8, r2
 80050ea:	1a8a      	subs	r2, r1, r2
 80050ec:	9205      	str	r2, [sp, #20]
 80050ee:	b303      	cbz	r3, 8005132 <_dtoa_r+0x6c2>
 80050f0:	9a07      	ldr	r2, [sp, #28]
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	f000 80a5 	beq.w	8005242 <_dtoa_r+0x7d2>
 80050f8:	2c00      	cmp	r4, #0
 80050fa:	dd13      	ble.n	8005124 <_dtoa_r+0x6b4>
 80050fc:	4639      	mov	r1, r7
 80050fe:	4622      	mov	r2, r4
 8005100:	4630      	mov	r0, r6
 8005102:	930d      	str	r3, [sp, #52]	; 0x34
 8005104:	f000 fbf4 	bl	80058f0 <__pow5mult>
 8005108:	462a      	mov	r2, r5
 800510a:	4601      	mov	r1, r0
 800510c:	4607      	mov	r7, r0
 800510e:	4630      	mov	r0, r6
 8005110:	f000 fb44 	bl	800579c <__multiply>
 8005114:	4629      	mov	r1, r5
 8005116:	900a      	str	r0, [sp, #40]	; 0x28
 8005118:	4630      	mov	r0, r6
 800511a:	f000 fa71 	bl	8005600 <_Bfree>
 800511e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005122:	4615      	mov	r5, r2
 8005124:	1b1a      	subs	r2, r3, r4
 8005126:	d004      	beq.n	8005132 <_dtoa_r+0x6c2>
 8005128:	4629      	mov	r1, r5
 800512a:	4630      	mov	r0, r6
 800512c:	f000 fbe0 	bl	80058f0 <__pow5mult>
 8005130:	4605      	mov	r5, r0
 8005132:	2101      	movs	r1, #1
 8005134:	4630      	mov	r0, r6
 8005136:	f000 fb1b 	bl	8005770 <__i2b>
 800513a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	4604      	mov	r4, r0
 8005140:	f340 8081 	ble.w	8005246 <_dtoa_r+0x7d6>
 8005144:	461a      	mov	r2, r3
 8005146:	4601      	mov	r1, r0
 8005148:	4630      	mov	r0, r6
 800514a:	f000 fbd1 	bl	80058f0 <__pow5mult>
 800514e:	9b06      	ldr	r3, [sp, #24]
 8005150:	2b01      	cmp	r3, #1
 8005152:	4604      	mov	r4, r0
 8005154:	dd7a      	ble.n	800524c <_dtoa_r+0x7dc>
 8005156:	2300      	movs	r3, #0
 8005158:	930a      	str	r3, [sp, #40]	; 0x28
 800515a:	6922      	ldr	r2, [r4, #16]
 800515c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005160:	6910      	ldr	r0, [r2, #16]
 8005162:	f000 fab5 	bl	80056d0 <__hi0bits>
 8005166:	f1c0 0020 	rsb	r0, r0, #32
 800516a:	9b05      	ldr	r3, [sp, #20]
 800516c:	4418      	add	r0, r3
 800516e:	f010 001f 	ands.w	r0, r0, #31
 8005172:	f000 808c 	beq.w	800528e <_dtoa_r+0x81e>
 8005176:	f1c0 0220 	rsb	r2, r0, #32
 800517a:	2a04      	cmp	r2, #4
 800517c:	f340 8085 	ble.w	800528a <_dtoa_r+0x81a>
 8005180:	f1c0 001c 	rsb	r0, r0, #28
 8005184:	9b04      	ldr	r3, [sp, #16]
 8005186:	4403      	add	r3, r0
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	9b05      	ldr	r3, [sp, #20]
 800518c:	4403      	add	r3, r0
 800518e:	4480      	add	r8, r0
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	9b04      	ldr	r3, [sp, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	dd05      	ble.n	80051a4 <_dtoa_r+0x734>
 8005198:	4629      	mov	r1, r5
 800519a:	461a      	mov	r2, r3
 800519c:	4630      	mov	r0, r6
 800519e:	f000 fc01 	bl	80059a4 <__lshift>
 80051a2:	4605      	mov	r5, r0
 80051a4:	9b05      	ldr	r3, [sp, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dd05      	ble.n	80051b6 <_dtoa_r+0x746>
 80051aa:	4621      	mov	r1, r4
 80051ac:	461a      	mov	r2, r3
 80051ae:	4630      	mov	r0, r6
 80051b0:	f000 fbf8 	bl	80059a4 <__lshift>
 80051b4:	4604      	mov	r4, r0
 80051b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d06a      	beq.n	8005292 <_dtoa_r+0x822>
 80051bc:	4621      	mov	r1, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 fc60 	bl	8005a84 <__mcmp>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	da64      	bge.n	8005292 <_dtoa_r+0x822>
 80051c8:	2300      	movs	r3, #0
 80051ca:	4629      	mov	r1, r5
 80051cc:	220a      	movs	r2, #10
 80051ce:	4630      	mov	r0, r6
 80051d0:	f000 fa38 	bl	8005644 <__multadd>
 80051d4:	9b07      	ldr	r3, [sp, #28]
 80051d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051da:	4605      	mov	r5, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8191 	beq.w	8005504 <_dtoa_r+0xa94>
 80051e2:	4639      	mov	r1, r7
 80051e4:	2300      	movs	r3, #0
 80051e6:	220a      	movs	r2, #10
 80051e8:	4630      	mov	r0, r6
 80051ea:	f000 fa2b 	bl	8005644 <__multadd>
 80051ee:	f1ba 0f00 	cmp.w	sl, #0
 80051f2:	4607      	mov	r7, r0
 80051f4:	f300 808d 	bgt.w	8005312 <_dtoa_r+0x8a2>
 80051f8:	9b06      	ldr	r3, [sp, #24]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	dc50      	bgt.n	80052a0 <_dtoa_r+0x830>
 80051fe:	e088      	b.n	8005312 <_dtoa_r+0x8a2>
 8005200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005202:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005206:	e751      	b.n	80050ac <_dtoa_r+0x63c>
 8005208:	f109 34ff 	add.w	r4, r9, #4294967295
 800520c:	42a3      	cmp	r3, r4
 800520e:	bfbf      	itttt	lt
 8005210:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8005212:	1ae3      	sublt	r3, r4, r3
 8005214:	18d2      	addlt	r2, r2, r3
 8005216:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005218:	bfb6      	itet	lt
 800521a:	4623      	movlt	r3, r4
 800521c:	1b1c      	subge	r4, r3, r4
 800521e:	2400      	movlt	r4, #0
 8005220:	f1b9 0f00 	cmp.w	r9, #0
 8005224:	bfb5      	itete	lt
 8005226:	9a04      	ldrlt	r2, [sp, #16]
 8005228:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800522c:	eba2 0809 	sublt.w	r8, r2, r9
 8005230:	464a      	movge	r2, r9
 8005232:	bfb8      	it	lt
 8005234:	2200      	movlt	r2, #0
 8005236:	e73c      	b.n	80050b2 <_dtoa_r+0x642>
 8005238:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800523c:	9f07      	ldr	r7, [sp, #28]
 800523e:	461c      	mov	r4, r3
 8005240:	e744      	b.n	80050cc <_dtoa_r+0x65c>
 8005242:	461a      	mov	r2, r3
 8005244:	e770      	b.n	8005128 <_dtoa_r+0x6b8>
 8005246:	9b06      	ldr	r3, [sp, #24]
 8005248:	2b01      	cmp	r3, #1
 800524a:	dc18      	bgt.n	800527e <_dtoa_r+0x80e>
 800524c:	9b02      	ldr	r3, [sp, #8]
 800524e:	b9b3      	cbnz	r3, 800527e <_dtoa_r+0x80e>
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005256:	b9a2      	cbnz	r2, 8005282 <_dtoa_r+0x812>
 8005258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800525c:	0d12      	lsrs	r2, r2, #20
 800525e:	0512      	lsls	r2, r2, #20
 8005260:	b18a      	cbz	r2, 8005286 <_dtoa_r+0x816>
 8005262:	9b04      	ldr	r3, [sp, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	9b05      	ldr	r3, [sp, #20]
 800526a:	3301      	adds	r3, #1
 800526c:	9305      	str	r3, [sp, #20]
 800526e:	2301      	movs	r3, #1
 8005270:	930a      	str	r3, [sp, #40]	; 0x28
 8005272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	f47f af70 	bne.w	800515a <_dtoa_r+0x6ea>
 800527a:	2001      	movs	r0, #1
 800527c:	e775      	b.n	800516a <_dtoa_r+0x6fa>
 800527e:	2300      	movs	r3, #0
 8005280:	e7f6      	b.n	8005270 <_dtoa_r+0x800>
 8005282:	9b02      	ldr	r3, [sp, #8]
 8005284:	e7f4      	b.n	8005270 <_dtoa_r+0x800>
 8005286:	920a      	str	r2, [sp, #40]	; 0x28
 8005288:	e7f3      	b.n	8005272 <_dtoa_r+0x802>
 800528a:	d082      	beq.n	8005192 <_dtoa_r+0x722>
 800528c:	4610      	mov	r0, r2
 800528e:	301c      	adds	r0, #28
 8005290:	e778      	b.n	8005184 <_dtoa_r+0x714>
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	dc37      	bgt.n	8005308 <_dtoa_r+0x898>
 8005298:	9b06      	ldr	r3, [sp, #24]
 800529a:	2b02      	cmp	r3, #2
 800529c:	dd34      	ble.n	8005308 <_dtoa_r+0x898>
 800529e:	46ca      	mov	sl, r9
 80052a0:	f1ba 0f00 	cmp.w	sl, #0
 80052a4:	d10d      	bne.n	80052c2 <_dtoa_r+0x852>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4653      	mov	r3, sl
 80052aa:	2205      	movs	r2, #5
 80052ac:	4630      	mov	r0, r6
 80052ae:	f000 f9c9 	bl	8005644 <__multadd>
 80052b2:	4601      	mov	r1, r0
 80052b4:	4604      	mov	r4, r0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 fbe4 	bl	8005a84 <__mcmp>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f73f adeb 	bgt.w	8004e98 <_dtoa_r+0x428>
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80052c8:	ea6f 0b03 	mvn.w	fp, r3
 80052cc:	f04f 0900 	mov.w	r9, #0
 80052d0:	4621      	mov	r1, r4
 80052d2:	4630      	mov	r0, r6
 80052d4:	f000 f994 	bl	8005600 <_Bfree>
 80052d8:	2f00      	cmp	r7, #0
 80052da:	f43f aea8 	beq.w	800502e <_dtoa_r+0x5be>
 80052de:	f1b9 0f00 	cmp.w	r9, #0
 80052e2:	d005      	beq.n	80052f0 <_dtoa_r+0x880>
 80052e4:	45b9      	cmp	r9, r7
 80052e6:	d003      	beq.n	80052f0 <_dtoa_r+0x880>
 80052e8:	4649      	mov	r1, r9
 80052ea:	4630      	mov	r0, r6
 80052ec:	f000 f988 	bl	8005600 <_Bfree>
 80052f0:	4639      	mov	r1, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f984 	bl	8005600 <_Bfree>
 80052f8:	e699      	b.n	800502e <_dtoa_r+0x5be>
 80052fa:	2400      	movs	r4, #0
 80052fc:	4627      	mov	r7, r4
 80052fe:	e7e0      	b.n	80052c2 <_dtoa_r+0x852>
 8005300:	46bb      	mov	fp, r7
 8005302:	4604      	mov	r4, r0
 8005304:	4607      	mov	r7, r0
 8005306:	e5c7      	b.n	8004e98 <_dtoa_r+0x428>
 8005308:	9b07      	ldr	r3, [sp, #28]
 800530a:	46ca      	mov	sl, r9
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8100 	beq.w	8005512 <_dtoa_r+0xaa2>
 8005312:	f1b8 0f00 	cmp.w	r8, #0
 8005316:	dd05      	ble.n	8005324 <_dtoa_r+0x8b4>
 8005318:	4639      	mov	r1, r7
 800531a:	4642      	mov	r2, r8
 800531c:	4630      	mov	r0, r6
 800531e:	f000 fb41 	bl	80059a4 <__lshift>
 8005322:	4607      	mov	r7, r0
 8005324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d05d      	beq.n	80053e6 <_dtoa_r+0x976>
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4630      	mov	r0, r6
 800532e:	f000 f927 	bl	8005580 <_Balloc>
 8005332:	4680      	mov	r8, r0
 8005334:	b928      	cbnz	r0, 8005342 <_dtoa_r+0x8d2>
 8005336:	4b82      	ldr	r3, [pc, #520]	; (8005540 <_dtoa_r+0xad0>)
 8005338:	4602      	mov	r2, r0
 800533a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800533e:	f7ff bbaf 	b.w	8004aa0 <_dtoa_r+0x30>
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	3202      	adds	r2, #2
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	f107 010c 	add.w	r1, r7, #12
 800534c:	300c      	adds	r0, #12
 800534e:	f000 f909 	bl	8005564 <memcpy>
 8005352:	2201      	movs	r2, #1
 8005354:	4641      	mov	r1, r8
 8005356:	4630      	mov	r0, r6
 8005358:	f000 fb24 	bl	80059a4 <__lshift>
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	3301      	adds	r3, #1
 8005360:	9304      	str	r3, [sp, #16]
 8005362:	9b01      	ldr	r3, [sp, #4]
 8005364:	4453      	add	r3, sl
 8005366:	9308      	str	r3, [sp, #32]
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	46b9      	mov	r9, r7
 8005370:	9307      	str	r3, [sp, #28]
 8005372:	4607      	mov	r7, r0
 8005374:	9b04      	ldr	r3, [sp, #16]
 8005376:	4621      	mov	r1, r4
 8005378:	3b01      	subs	r3, #1
 800537a:	4628      	mov	r0, r5
 800537c:	9302      	str	r3, [sp, #8]
 800537e:	f7ff fae9 	bl	8004954 <quorem>
 8005382:	4603      	mov	r3, r0
 8005384:	3330      	adds	r3, #48	; 0x30
 8005386:	9005      	str	r0, [sp, #20]
 8005388:	4649      	mov	r1, r9
 800538a:	4628      	mov	r0, r5
 800538c:	9309      	str	r3, [sp, #36]	; 0x24
 800538e:	f000 fb79 	bl	8005a84 <__mcmp>
 8005392:	463a      	mov	r2, r7
 8005394:	4682      	mov	sl, r0
 8005396:	4621      	mov	r1, r4
 8005398:	4630      	mov	r0, r6
 800539a:	f000 fb8f 	bl	8005abc <__mdiff>
 800539e:	68c2      	ldr	r2, [r0, #12]
 80053a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a2:	4680      	mov	r8, r0
 80053a4:	bb0a      	cbnz	r2, 80053ea <_dtoa_r+0x97a>
 80053a6:	4601      	mov	r1, r0
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 fb6b 	bl	8005a84 <__mcmp>
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	4602      	mov	r2, r0
 80053b2:	4641      	mov	r1, r8
 80053b4:	4630      	mov	r0, r6
 80053b6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80053ba:	f000 f921 	bl	8005600 <_Bfree>
 80053be:	9b06      	ldr	r3, [sp, #24]
 80053c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053c2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80053c6:	ea43 0102 	orr.w	r1, r3, r2
 80053ca:	9b07      	ldr	r3, [sp, #28]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d0:	d10d      	bne.n	80053ee <_dtoa_r+0x97e>
 80053d2:	2b39      	cmp	r3, #57	; 0x39
 80053d4:	d029      	beq.n	800542a <_dtoa_r+0x9ba>
 80053d6:	f1ba 0f00 	cmp.w	sl, #0
 80053da:	dd01      	ble.n	80053e0 <_dtoa_r+0x970>
 80053dc:	9b05      	ldr	r3, [sp, #20]
 80053de:	3331      	adds	r3, #49	; 0x31
 80053e0:	9a02      	ldr	r2, [sp, #8]
 80053e2:	7013      	strb	r3, [r2, #0]
 80053e4:	e774      	b.n	80052d0 <_dtoa_r+0x860>
 80053e6:	4638      	mov	r0, r7
 80053e8:	e7b8      	b.n	800535c <_dtoa_r+0x8ec>
 80053ea:	2201      	movs	r2, #1
 80053ec:	e7e1      	b.n	80053b2 <_dtoa_r+0x942>
 80053ee:	f1ba 0f00 	cmp.w	sl, #0
 80053f2:	db06      	blt.n	8005402 <_dtoa_r+0x992>
 80053f4:	9906      	ldr	r1, [sp, #24]
 80053f6:	ea41 0a0a 	orr.w	sl, r1, sl
 80053fa:	9907      	ldr	r1, [sp, #28]
 80053fc:	ea5a 0101 	orrs.w	r1, sl, r1
 8005400:	d120      	bne.n	8005444 <_dtoa_r+0x9d4>
 8005402:	2a00      	cmp	r2, #0
 8005404:	ddec      	ble.n	80053e0 <_dtoa_r+0x970>
 8005406:	4629      	mov	r1, r5
 8005408:	2201      	movs	r2, #1
 800540a:	4630      	mov	r0, r6
 800540c:	9304      	str	r3, [sp, #16]
 800540e:	f000 fac9 	bl	80059a4 <__lshift>
 8005412:	4621      	mov	r1, r4
 8005414:	4605      	mov	r5, r0
 8005416:	f000 fb35 	bl	8005a84 <__mcmp>
 800541a:	2800      	cmp	r0, #0
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	dc02      	bgt.n	8005426 <_dtoa_r+0x9b6>
 8005420:	d1de      	bne.n	80053e0 <_dtoa_r+0x970>
 8005422:	07da      	lsls	r2, r3, #31
 8005424:	d5dc      	bpl.n	80053e0 <_dtoa_r+0x970>
 8005426:	2b39      	cmp	r3, #57	; 0x39
 8005428:	d1d8      	bne.n	80053dc <_dtoa_r+0x96c>
 800542a:	9a02      	ldr	r2, [sp, #8]
 800542c:	2339      	movs	r3, #57	; 0x39
 800542e:	7013      	strb	r3, [r2, #0]
 8005430:	4643      	mov	r3, r8
 8005432:	4698      	mov	r8, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800543a:	2a39      	cmp	r2, #57	; 0x39
 800543c:	d051      	beq.n	80054e2 <_dtoa_r+0xa72>
 800543e:	3201      	adds	r2, #1
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	e745      	b.n	80052d0 <_dtoa_r+0x860>
 8005444:	2a00      	cmp	r2, #0
 8005446:	dd03      	ble.n	8005450 <_dtoa_r+0x9e0>
 8005448:	2b39      	cmp	r3, #57	; 0x39
 800544a:	d0ee      	beq.n	800542a <_dtoa_r+0x9ba>
 800544c:	3301      	adds	r3, #1
 800544e:	e7c7      	b.n	80053e0 <_dtoa_r+0x970>
 8005450:	9a04      	ldr	r2, [sp, #16]
 8005452:	9908      	ldr	r1, [sp, #32]
 8005454:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005458:	428a      	cmp	r2, r1
 800545a:	d02b      	beq.n	80054b4 <_dtoa_r+0xa44>
 800545c:	4629      	mov	r1, r5
 800545e:	2300      	movs	r3, #0
 8005460:	220a      	movs	r2, #10
 8005462:	4630      	mov	r0, r6
 8005464:	f000 f8ee 	bl	8005644 <__multadd>
 8005468:	45b9      	cmp	r9, r7
 800546a:	4605      	mov	r5, r0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f04f 020a 	mov.w	r2, #10
 8005474:	4649      	mov	r1, r9
 8005476:	4630      	mov	r0, r6
 8005478:	d107      	bne.n	800548a <_dtoa_r+0xa1a>
 800547a:	f000 f8e3 	bl	8005644 <__multadd>
 800547e:	4681      	mov	r9, r0
 8005480:	4607      	mov	r7, r0
 8005482:	9b04      	ldr	r3, [sp, #16]
 8005484:	3301      	adds	r3, #1
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	e774      	b.n	8005374 <_dtoa_r+0x904>
 800548a:	f000 f8db 	bl	8005644 <__multadd>
 800548e:	4639      	mov	r1, r7
 8005490:	4681      	mov	r9, r0
 8005492:	2300      	movs	r3, #0
 8005494:	220a      	movs	r2, #10
 8005496:	4630      	mov	r0, r6
 8005498:	f000 f8d4 	bl	8005644 <__multadd>
 800549c:	4607      	mov	r7, r0
 800549e:	e7f0      	b.n	8005482 <_dtoa_r+0xa12>
 80054a0:	f1ba 0f00 	cmp.w	sl, #0
 80054a4:	9a01      	ldr	r2, [sp, #4]
 80054a6:	bfcc      	ite	gt
 80054a8:	46d0      	movgt	r8, sl
 80054aa:	f04f 0801 	movle.w	r8, #1
 80054ae:	4490      	add	r8, r2
 80054b0:	f04f 0900 	mov.w	r9, #0
 80054b4:	4629      	mov	r1, r5
 80054b6:	2201      	movs	r2, #1
 80054b8:	4630      	mov	r0, r6
 80054ba:	9302      	str	r3, [sp, #8]
 80054bc:	f000 fa72 	bl	80059a4 <__lshift>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4605      	mov	r5, r0
 80054c4:	f000 fade 	bl	8005a84 <__mcmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	dcb1      	bgt.n	8005430 <_dtoa_r+0x9c0>
 80054cc:	d102      	bne.n	80054d4 <_dtoa_r+0xa64>
 80054ce:	9b02      	ldr	r3, [sp, #8]
 80054d0:	07db      	lsls	r3, r3, #31
 80054d2:	d4ad      	bmi.n	8005430 <_dtoa_r+0x9c0>
 80054d4:	4643      	mov	r3, r8
 80054d6:	4698      	mov	r8, r3
 80054d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054dc:	2a30      	cmp	r2, #48	; 0x30
 80054de:	d0fa      	beq.n	80054d6 <_dtoa_r+0xa66>
 80054e0:	e6f6      	b.n	80052d0 <_dtoa_r+0x860>
 80054e2:	9a01      	ldr	r2, [sp, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d1a4      	bne.n	8005432 <_dtoa_r+0x9c2>
 80054e8:	f10b 0b01 	add.w	fp, fp, #1
 80054ec:	2331      	movs	r3, #49	; 0x31
 80054ee:	e778      	b.n	80053e2 <_dtoa_r+0x972>
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <_dtoa_r+0xad4>)
 80054f2:	f7ff bb27 	b.w	8004b44 <_dtoa_r+0xd4>
 80054f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f ab03 	bne.w	8004b04 <_dtoa_r+0x94>
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <_dtoa_r+0xad8>)
 8005500:	f7ff bb20 	b.w	8004b44 <_dtoa_r+0xd4>
 8005504:	f1ba 0f00 	cmp.w	sl, #0
 8005508:	dc03      	bgt.n	8005512 <_dtoa_r+0xaa2>
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	2b02      	cmp	r3, #2
 800550e:	f73f aec7 	bgt.w	80052a0 <_dtoa_r+0x830>
 8005512:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005516:	4621      	mov	r1, r4
 8005518:	4628      	mov	r0, r5
 800551a:	f7ff fa1b 	bl	8004954 <quorem>
 800551e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005522:	f808 3b01 	strb.w	r3, [r8], #1
 8005526:	9a01      	ldr	r2, [sp, #4]
 8005528:	eba8 0202 	sub.w	r2, r8, r2
 800552c:	4592      	cmp	sl, r2
 800552e:	ddb7      	ble.n	80054a0 <_dtoa_r+0xa30>
 8005530:	4629      	mov	r1, r5
 8005532:	2300      	movs	r3, #0
 8005534:	220a      	movs	r2, #10
 8005536:	4630      	mov	r0, r6
 8005538:	f000 f884 	bl	8005644 <__multadd>
 800553c:	4605      	mov	r5, r0
 800553e:	e7ea      	b.n	8005516 <_dtoa_r+0xaa6>
 8005540:	08006e87 	.word	0x08006e87
 8005544:	08006de4 	.word	0x08006de4
 8005548:	08006e08 	.word	0x08006e08

0800554c <_localeconv_r>:
 800554c:	4800      	ldr	r0, [pc, #0]	; (8005550 <_localeconv_r+0x4>)
 800554e:	4770      	bx	lr
 8005550:	20000160 	.word	0x20000160

08005554 <malloc>:
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <malloc+0xc>)
 8005556:	4601      	mov	r1, r0
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	f000 bc17 	b.w	8005d8c <_malloc_r>
 800555e:	bf00      	nop
 8005560:	2000000c 	.word	0x2000000c

08005564 <memcpy>:
 8005564:	440a      	add	r2, r1
 8005566:	4291      	cmp	r1, r2
 8005568:	f100 33ff 	add.w	r3, r0, #4294967295
 800556c:	d100      	bne.n	8005570 <memcpy+0xc>
 800556e:	4770      	bx	lr
 8005570:	b510      	push	{r4, lr}
 8005572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800557a:	4291      	cmp	r1, r2
 800557c:	d1f9      	bne.n	8005572 <memcpy+0xe>
 800557e:	bd10      	pop	{r4, pc}

08005580 <_Balloc>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005584:	4604      	mov	r4, r0
 8005586:	460d      	mov	r5, r1
 8005588:	b976      	cbnz	r6, 80055a8 <_Balloc+0x28>
 800558a:	2010      	movs	r0, #16
 800558c:	f7ff ffe2 	bl	8005554 <malloc>
 8005590:	4602      	mov	r2, r0
 8005592:	6260      	str	r0, [r4, #36]	; 0x24
 8005594:	b920      	cbnz	r0, 80055a0 <_Balloc+0x20>
 8005596:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <_Balloc+0x78>)
 8005598:	4818      	ldr	r0, [pc, #96]	; (80055fc <_Balloc+0x7c>)
 800559a:	2166      	movs	r1, #102	; 0x66
 800559c:	f000 fdd6 	bl	800614c <__assert_func>
 80055a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055a4:	6006      	str	r6, [r0, #0]
 80055a6:	60c6      	str	r6, [r0, #12]
 80055a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055aa:	68f3      	ldr	r3, [r6, #12]
 80055ac:	b183      	cbz	r3, 80055d0 <_Balloc+0x50>
 80055ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055b6:	b9b8      	cbnz	r0, 80055e8 <_Balloc+0x68>
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f605 	lsl.w	r6, r1, r5
 80055be:	1d72      	adds	r2, r6, #5
 80055c0:	0092      	lsls	r2, r2, #2
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 fb60 	bl	8005c88 <_calloc_r>
 80055c8:	b160      	cbz	r0, 80055e4 <_Balloc+0x64>
 80055ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055ce:	e00e      	b.n	80055ee <_Balloc+0x6e>
 80055d0:	2221      	movs	r2, #33	; 0x21
 80055d2:	2104      	movs	r1, #4
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fb57 	bl	8005c88 <_calloc_r>
 80055da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055dc:	60f0      	str	r0, [r6, #12]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e4      	bne.n	80055ae <_Balloc+0x2e>
 80055e4:	2000      	movs	r0, #0
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055ee:	2300      	movs	r3, #0
 80055f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055f4:	e7f7      	b.n	80055e6 <_Balloc+0x66>
 80055f6:	bf00      	nop
 80055f8:	08006e15 	.word	0x08006e15
 80055fc:	08006e98 	.word	0x08006e98

08005600 <_Bfree>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005604:	4605      	mov	r5, r0
 8005606:	460c      	mov	r4, r1
 8005608:	b976      	cbnz	r6, 8005628 <_Bfree+0x28>
 800560a:	2010      	movs	r0, #16
 800560c:	f7ff ffa2 	bl	8005554 <malloc>
 8005610:	4602      	mov	r2, r0
 8005612:	6268      	str	r0, [r5, #36]	; 0x24
 8005614:	b920      	cbnz	r0, 8005620 <_Bfree+0x20>
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <_Bfree+0x3c>)
 8005618:	4809      	ldr	r0, [pc, #36]	; (8005640 <_Bfree+0x40>)
 800561a:	218a      	movs	r1, #138	; 0x8a
 800561c:	f000 fd96 	bl	800614c <__assert_func>
 8005620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005624:	6006      	str	r6, [r0, #0]
 8005626:	60c6      	str	r6, [r0, #12]
 8005628:	b13c      	cbz	r4, 800563a <_Bfree+0x3a>
 800562a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800562c:	6862      	ldr	r2, [r4, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005634:	6021      	str	r1, [r4, #0]
 8005636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	08006e15 	.word	0x08006e15
 8005640:	08006e98 	.word	0x08006e98

08005644 <__multadd>:
 8005644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005648:	690d      	ldr	r5, [r1, #16]
 800564a:	4607      	mov	r7, r0
 800564c:	460c      	mov	r4, r1
 800564e:	461e      	mov	r6, r3
 8005650:	f101 0c14 	add.w	ip, r1, #20
 8005654:	2000      	movs	r0, #0
 8005656:	f8dc 3000 	ldr.w	r3, [ip]
 800565a:	b299      	uxth	r1, r3
 800565c:	fb02 6101 	mla	r1, r2, r1, r6
 8005660:	0c1e      	lsrs	r6, r3, #16
 8005662:	0c0b      	lsrs	r3, r1, #16
 8005664:	fb02 3306 	mla	r3, r2, r6, r3
 8005668:	b289      	uxth	r1, r1
 800566a:	3001      	adds	r0, #1
 800566c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005670:	4285      	cmp	r5, r0
 8005672:	f84c 1b04 	str.w	r1, [ip], #4
 8005676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800567a:	dcec      	bgt.n	8005656 <__multadd+0x12>
 800567c:	b30e      	cbz	r6, 80056c2 <__multadd+0x7e>
 800567e:	68a3      	ldr	r3, [r4, #8]
 8005680:	42ab      	cmp	r3, r5
 8005682:	dc19      	bgt.n	80056b8 <__multadd+0x74>
 8005684:	6861      	ldr	r1, [r4, #4]
 8005686:	4638      	mov	r0, r7
 8005688:	3101      	adds	r1, #1
 800568a:	f7ff ff79 	bl	8005580 <_Balloc>
 800568e:	4680      	mov	r8, r0
 8005690:	b928      	cbnz	r0, 800569e <__multadd+0x5a>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <__multadd+0x84>)
 8005696:	480d      	ldr	r0, [pc, #52]	; (80056cc <__multadd+0x88>)
 8005698:	21b5      	movs	r1, #181	; 0xb5
 800569a:	f000 fd57 	bl	800614c <__assert_func>
 800569e:	6922      	ldr	r2, [r4, #16]
 80056a0:	3202      	adds	r2, #2
 80056a2:	f104 010c 	add.w	r1, r4, #12
 80056a6:	0092      	lsls	r2, r2, #2
 80056a8:	300c      	adds	r0, #12
 80056aa:	f7ff ff5b 	bl	8005564 <memcpy>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff ffa5 	bl	8005600 <_Bfree>
 80056b6:	4644      	mov	r4, r8
 80056b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056bc:	3501      	adds	r5, #1
 80056be:	615e      	str	r6, [r3, #20]
 80056c0:	6125      	str	r5, [r4, #16]
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c8:	08006e87 	.word	0x08006e87
 80056cc:	08006e98 	.word	0x08006e98

080056d0 <__hi0bits>:
 80056d0:	0c03      	lsrs	r3, r0, #16
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	b9d3      	cbnz	r3, 800570c <__hi0bits+0x3c>
 80056d6:	0400      	lsls	r0, r0, #16
 80056d8:	2310      	movs	r3, #16
 80056da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80056de:	bf04      	itt	eq
 80056e0:	0200      	lsleq	r0, r0, #8
 80056e2:	3308      	addeq	r3, #8
 80056e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80056e8:	bf04      	itt	eq
 80056ea:	0100      	lsleq	r0, r0, #4
 80056ec:	3304      	addeq	r3, #4
 80056ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80056f2:	bf04      	itt	eq
 80056f4:	0080      	lsleq	r0, r0, #2
 80056f6:	3302      	addeq	r3, #2
 80056f8:	2800      	cmp	r0, #0
 80056fa:	db05      	blt.n	8005708 <__hi0bits+0x38>
 80056fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005700:	f103 0301 	add.w	r3, r3, #1
 8005704:	bf08      	it	eq
 8005706:	2320      	moveq	r3, #32
 8005708:	4618      	mov	r0, r3
 800570a:	4770      	bx	lr
 800570c:	2300      	movs	r3, #0
 800570e:	e7e4      	b.n	80056da <__hi0bits+0xa>

08005710 <__lo0bits>:
 8005710:	6803      	ldr	r3, [r0, #0]
 8005712:	f013 0207 	ands.w	r2, r3, #7
 8005716:	4601      	mov	r1, r0
 8005718:	d00b      	beq.n	8005732 <__lo0bits+0x22>
 800571a:	07da      	lsls	r2, r3, #31
 800571c:	d423      	bmi.n	8005766 <__lo0bits+0x56>
 800571e:	0798      	lsls	r0, r3, #30
 8005720:	bf49      	itett	mi
 8005722:	085b      	lsrmi	r3, r3, #1
 8005724:	089b      	lsrpl	r3, r3, #2
 8005726:	2001      	movmi	r0, #1
 8005728:	600b      	strmi	r3, [r1, #0]
 800572a:	bf5c      	itt	pl
 800572c:	600b      	strpl	r3, [r1, #0]
 800572e:	2002      	movpl	r0, #2
 8005730:	4770      	bx	lr
 8005732:	b298      	uxth	r0, r3
 8005734:	b9a8      	cbnz	r0, 8005762 <__lo0bits+0x52>
 8005736:	0c1b      	lsrs	r3, r3, #16
 8005738:	2010      	movs	r0, #16
 800573a:	b2da      	uxtb	r2, r3
 800573c:	b90a      	cbnz	r2, 8005742 <__lo0bits+0x32>
 800573e:	3008      	adds	r0, #8
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	071a      	lsls	r2, r3, #28
 8005744:	bf04      	itt	eq
 8005746:	091b      	lsreq	r3, r3, #4
 8005748:	3004      	addeq	r0, #4
 800574a:	079a      	lsls	r2, r3, #30
 800574c:	bf04      	itt	eq
 800574e:	089b      	lsreq	r3, r3, #2
 8005750:	3002      	addeq	r0, #2
 8005752:	07da      	lsls	r2, r3, #31
 8005754:	d403      	bmi.n	800575e <__lo0bits+0x4e>
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	f100 0001 	add.w	r0, r0, #1
 800575c:	d005      	beq.n	800576a <__lo0bits+0x5a>
 800575e:	600b      	str	r3, [r1, #0]
 8005760:	4770      	bx	lr
 8005762:	4610      	mov	r0, r2
 8005764:	e7e9      	b.n	800573a <__lo0bits+0x2a>
 8005766:	2000      	movs	r0, #0
 8005768:	4770      	bx	lr
 800576a:	2020      	movs	r0, #32
 800576c:	4770      	bx	lr
	...

08005770 <__i2b>:
 8005770:	b510      	push	{r4, lr}
 8005772:	460c      	mov	r4, r1
 8005774:	2101      	movs	r1, #1
 8005776:	f7ff ff03 	bl	8005580 <_Balloc>
 800577a:	4602      	mov	r2, r0
 800577c:	b928      	cbnz	r0, 800578a <__i2b+0x1a>
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <__i2b+0x24>)
 8005780:	4805      	ldr	r0, [pc, #20]	; (8005798 <__i2b+0x28>)
 8005782:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005786:	f000 fce1 	bl	800614c <__assert_func>
 800578a:	2301      	movs	r3, #1
 800578c:	6144      	str	r4, [r0, #20]
 800578e:	6103      	str	r3, [r0, #16]
 8005790:	bd10      	pop	{r4, pc}
 8005792:	bf00      	nop
 8005794:	08006e87 	.word	0x08006e87
 8005798:	08006e98 	.word	0x08006e98

0800579c <__multiply>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	4691      	mov	r9, r2
 80057a2:	690a      	ldr	r2, [r1, #16]
 80057a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	bfb8      	it	lt
 80057ac:	460b      	movlt	r3, r1
 80057ae:	460c      	mov	r4, r1
 80057b0:	bfbc      	itt	lt
 80057b2:	464c      	movlt	r4, r9
 80057b4:	4699      	movlt	r9, r3
 80057b6:	6927      	ldr	r7, [r4, #16]
 80057b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057bc:	68a3      	ldr	r3, [r4, #8]
 80057be:	6861      	ldr	r1, [r4, #4]
 80057c0:	eb07 060a 	add.w	r6, r7, sl
 80057c4:	42b3      	cmp	r3, r6
 80057c6:	b085      	sub	sp, #20
 80057c8:	bfb8      	it	lt
 80057ca:	3101      	addlt	r1, #1
 80057cc:	f7ff fed8 	bl	8005580 <_Balloc>
 80057d0:	b930      	cbnz	r0, 80057e0 <__multiply+0x44>
 80057d2:	4602      	mov	r2, r0
 80057d4:	4b44      	ldr	r3, [pc, #272]	; (80058e8 <__multiply+0x14c>)
 80057d6:	4845      	ldr	r0, [pc, #276]	; (80058ec <__multiply+0x150>)
 80057d8:	f240 115d 	movw	r1, #349	; 0x15d
 80057dc:	f000 fcb6 	bl	800614c <__assert_func>
 80057e0:	f100 0514 	add.w	r5, r0, #20
 80057e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057e8:	462b      	mov	r3, r5
 80057ea:	2200      	movs	r2, #0
 80057ec:	4543      	cmp	r3, r8
 80057ee:	d321      	bcc.n	8005834 <__multiply+0x98>
 80057f0:	f104 0314 	add.w	r3, r4, #20
 80057f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057f8:	f109 0314 	add.w	r3, r9, #20
 80057fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005800:	9202      	str	r2, [sp, #8]
 8005802:	1b3a      	subs	r2, r7, r4
 8005804:	3a15      	subs	r2, #21
 8005806:	f022 0203 	bic.w	r2, r2, #3
 800580a:	3204      	adds	r2, #4
 800580c:	f104 0115 	add.w	r1, r4, #21
 8005810:	428f      	cmp	r7, r1
 8005812:	bf38      	it	cc
 8005814:	2204      	movcc	r2, #4
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	9a02      	ldr	r2, [sp, #8]
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d80c      	bhi.n	800583a <__multiply+0x9e>
 8005820:	2e00      	cmp	r6, #0
 8005822:	dd03      	ble.n	800582c <__multiply+0x90>
 8005824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005828:	2b00      	cmp	r3, #0
 800582a:	d05a      	beq.n	80058e2 <__multiply+0x146>
 800582c:	6106      	str	r6, [r0, #16]
 800582e:	b005      	add	sp, #20
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005834:	f843 2b04 	str.w	r2, [r3], #4
 8005838:	e7d8      	b.n	80057ec <__multiply+0x50>
 800583a:	f8b3 a000 	ldrh.w	sl, [r3]
 800583e:	f1ba 0f00 	cmp.w	sl, #0
 8005842:	d024      	beq.n	800588e <__multiply+0xf2>
 8005844:	f104 0e14 	add.w	lr, r4, #20
 8005848:	46a9      	mov	r9, r5
 800584a:	f04f 0c00 	mov.w	ip, #0
 800584e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005852:	f8d9 1000 	ldr.w	r1, [r9]
 8005856:	fa1f fb82 	uxth.w	fp, r2
 800585a:	b289      	uxth	r1, r1
 800585c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005860:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005864:	f8d9 2000 	ldr.w	r2, [r9]
 8005868:	4461      	add	r1, ip
 800586a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800586e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005872:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005876:	b289      	uxth	r1, r1
 8005878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800587c:	4577      	cmp	r7, lr
 800587e:	f849 1b04 	str.w	r1, [r9], #4
 8005882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005886:	d8e2      	bhi.n	800584e <__multiply+0xb2>
 8005888:	9a01      	ldr	r2, [sp, #4]
 800588a:	f845 c002 	str.w	ip, [r5, r2]
 800588e:	9a03      	ldr	r2, [sp, #12]
 8005890:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005894:	3304      	adds	r3, #4
 8005896:	f1b9 0f00 	cmp.w	r9, #0
 800589a:	d020      	beq.n	80058de <__multiply+0x142>
 800589c:	6829      	ldr	r1, [r5, #0]
 800589e:	f104 0c14 	add.w	ip, r4, #20
 80058a2:	46ae      	mov	lr, r5
 80058a4:	f04f 0a00 	mov.w	sl, #0
 80058a8:	f8bc b000 	ldrh.w	fp, [ip]
 80058ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058b0:	fb09 220b 	mla	r2, r9, fp, r2
 80058b4:	4492      	add	sl, r2
 80058b6:	b289      	uxth	r1, r1
 80058b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80058bc:	f84e 1b04 	str.w	r1, [lr], #4
 80058c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80058c4:	f8be 1000 	ldrh.w	r1, [lr]
 80058c8:	0c12      	lsrs	r2, r2, #16
 80058ca:	fb09 1102 	mla	r1, r9, r2, r1
 80058ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80058d2:	4567      	cmp	r7, ip
 80058d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058d8:	d8e6      	bhi.n	80058a8 <__multiply+0x10c>
 80058da:	9a01      	ldr	r2, [sp, #4]
 80058dc:	50a9      	str	r1, [r5, r2]
 80058de:	3504      	adds	r5, #4
 80058e0:	e79a      	b.n	8005818 <__multiply+0x7c>
 80058e2:	3e01      	subs	r6, #1
 80058e4:	e79c      	b.n	8005820 <__multiply+0x84>
 80058e6:	bf00      	nop
 80058e8:	08006e87 	.word	0x08006e87
 80058ec:	08006e98 	.word	0x08006e98

080058f0 <__pow5mult>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	4615      	mov	r5, r2
 80058f6:	f012 0203 	ands.w	r2, r2, #3
 80058fa:	4606      	mov	r6, r0
 80058fc:	460f      	mov	r7, r1
 80058fe:	d007      	beq.n	8005910 <__pow5mult+0x20>
 8005900:	4c25      	ldr	r4, [pc, #148]	; (8005998 <__pow5mult+0xa8>)
 8005902:	3a01      	subs	r2, #1
 8005904:	2300      	movs	r3, #0
 8005906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800590a:	f7ff fe9b 	bl	8005644 <__multadd>
 800590e:	4607      	mov	r7, r0
 8005910:	10ad      	asrs	r5, r5, #2
 8005912:	d03d      	beq.n	8005990 <__pow5mult+0xa0>
 8005914:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005916:	b97c      	cbnz	r4, 8005938 <__pow5mult+0x48>
 8005918:	2010      	movs	r0, #16
 800591a:	f7ff fe1b 	bl	8005554 <malloc>
 800591e:	4602      	mov	r2, r0
 8005920:	6270      	str	r0, [r6, #36]	; 0x24
 8005922:	b928      	cbnz	r0, 8005930 <__pow5mult+0x40>
 8005924:	4b1d      	ldr	r3, [pc, #116]	; (800599c <__pow5mult+0xac>)
 8005926:	481e      	ldr	r0, [pc, #120]	; (80059a0 <__pow5mult+0xb0>)
 8005928:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800592c:	f000 fc0e 	bl	800614c <__assert_func>
 8005930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005934:	6004      	str	r4, [r0, #0]
 8005936:	60c4      	str	r4, [r0, #12]
 8005938:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800593c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005940:	b94c      	cbnz	r4, 8005956 <__pow5mult+0x66>
 8005942:	f240 2171 	movw	r1, #625	; 0x271
 8005946:	4630      	mov	r0, r6
 8005948:	f7ff ff12 	bl	8005770 <__i2b>
 800594c:	2300      	movs	r3, #0
 800594e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005952:	4604      	mov	r4, r0
 8005954:	6003      	str	r3, [r0, #0]
 8005956:	f04f 0900 	mov.w	r9, #0
 800595a:	07eb      	lsls	r3, r5, #31
 800595c:	d50a      	bpl.n	8005974 <__pow5mult+0x84>
 800595e:	4639      	mov	r1, r7
 8005960:	4622      	mov	r2, r4
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ff1a 	bl	800579c <__multiply>
 8005968:	4639      	mov	r1, r7
 800596a:	4680      	mov	r8, r0
 800596c:	4630      	mov	r0, r6
 800596e:	f7ff fe47 	bl	8005600 <_Bfree>
 8005972:	4647      	mov	r7, r8
 8005974:	106d      	asrs	r5, r5, #1
 8005976:	d00b      	beq.n	8005990 <__pow5mult+0xa0>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	b938      	cbnz	r0, 800598c <__pow5mult+0x9c>
 800597c:	4622      	mov	r2, r4
 800597e:	4621      	mov	r1, r4
 8005980:	4630      	mov	r0, r6
 8005982:	f7ff ff0b 	bl	800579c <__multiply>
 8005986:	6020      	str	r0, [r4, #0]
 8005988:	f8c0 9000 	str.w	r9, [r0]
 800598c:	4604      	mov	r4, r0
 800598e:	e7e4      	b.n	800595a <__pow5mult+0x6a>
 8005990:	4638      	mov	r0, r7
 8005992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005996:	bf00      	nop
 8005998:	08006fe8 	.word	0x08006fe8
 800599c:	08006e15 	.word	0x08006e15
 80059a0:	08006e98 	.word	0x08006e98

080059a4 <__lshift>:
 80059a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	460c      	mov	r4, r1
 80059aa:	6849      	ldr	r1, [r1, #4]
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	4607      	mov	r7, r0
 80059b6:	4691      	mov	r9, r2
 80059b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059bc:	f108 0601 	add.w	r6, r8, #1
 80059c0:	42b3      	cmp	r3, r6
 80059c2:	db0b      	blt.n	80059dc <__lshift+0x38>
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff fddb 	bl	8005580 <_Balloc>
 80059ca:	4605      	mov	r5, r0
 80059cc:	b948      	cbnz	r0, 80059e2 <__lshift+0x3e>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <__lshift+0xd8>)
 80059d2:	482b      	ldr	r0, [pc, #172]	; (8005a80 <__lshift+0xdc>)
 80059d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80059d8:	f000 fbb8 	bl	800614c <__assert_func>
 80059dc:	3101      	adds	r1, #1
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	e7ee      	b.n	80059c0 <__lshift+0x1c>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f100 0114 	add.w	r1, r0, #20
 80059e8:	f100 0210 	add.w	r2, r0, #16
 80059ec:	4618      	mov	r0, r3
 80059ee:	4553      	cmp	r3, sl
 80059f0:	db37      	blt.n	8005a62 <__lshift+0xbe>
 80059f2:	6920      	ldr	r0, [r4, #16]
 80059f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059f8:	f104 0314 	add.w	r3, r4, #20
 80059fc:	f019 091f 	ands.w	r9, r9, #31
 8005a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a08:	d02f      	beq.n	8005a6a <__lshift+0xc6>
 8005a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a0e:	468a      	mov	sl, r1
 8005a10:	f04f 0c00 	mov.w	ip, #0
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	fa02 f209 	lsl.w	r2, r2, r9
 8005a1a:	ea42 020c 	orr.w	r2, r2, ip
 8005a1e:	f84a 2b04 	str.w	r2, [sl], #4
 8005a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a26:	4298      	cmp	r0, r3
 8005a28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a2c:	d8f2      	bhi.n	8005a14 <__lshift+0x70>
 8005a2e:	1b03      	subs	r3, r0, r4
 8005a30:	3b15      	subs	r3, #21
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	3304      	adds	r3, #4
 8005a38:	f104 0215 	add.w	r2, r4, #21
 8005a3c:	4290      	cmp	r0, r2
 8005a3e:	bf38      	it	cc
 8005a40:	2304      	movcc	r3, #4
 8005a42:	f841 c003 	str.w	ip, [r1, r3]
 8005a46:	f1bc 0f00 	cmp.w	ip, #0
 8005a4a:	d001      	beq.n	8005a50 <__lshift+0xac>
 8005a4c:	f108 0602 	add.w	r6, r8, #2
 8005a50:	3e01      	subs	r6, #1
 8005a52:	4638      	mov	r0, r7
 8005a54:	612e      	str	r6, [r5, #16]
 8005a56:	4621      	mov	r1, r4
 8005a58:	f7ff fdd2 	bl	8005600 <_Bfree>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a66:	3301      	adds	r3, #1
 8005a68:	e7c1      	b.n	80059ee <__lshift+0x4a>
 8005a6a:	3904      	subs	r1, #4
 8005a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a74:	4298      	cmp	r0, r3
 8005a76:	d8f9      	bhi.n	8005a6c <__lshift+0xc8>
 8005a78:	e7ea      	b.n	8005a50 <__lshift+0xac>
 8005a7a:	bf00      	nop
 8005a7c:	08006e87 	.word	0x08006e87
 8005a80:	08006e98 	.word	0x08006e98

08005a84 <__mcmp>:
 8005a84:	b530      	push	{r4, r5, lr}
 8005a86:	6902      	ldr	r2, [r0, #16]
 8005a88:	690c      	ldr	r4, [r1, #16]
 8005a8a:	1b12      	subs	r2, r2, r4
 8005a8c:	d10e      	bne.n	8005aac <__mcmp+0x28>
 8005a8e:	f100 0314 	add.w	r3, r0, #20
 8005a92:	3114      	adds	r1, #20
 8005a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005aa4:	42a5      	cmp	r5, r4
 8005aa6:	d003      	beq.n	8005ab0 <__mcmp+0x2c>
 8005aa8:	d305      	bcc.n	8005ab6 <__mcmp+0x32>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4610      	mov	r0, r2
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	4283      	cmp	r3, r0
 8005ab2:	d3f3      	bcc.n	8005a9c <__mcmp+0x18>
 8005ab4:	e7fa      	b.n	8005aac <__mcmp+0x28>
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	e7f7      	b.n	8005aac <__mcmp+0x28>

08005abc <__mdiff>:
 8005abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4690      	mov	r8, r2
 8005aca:	f7ff ffdb 	bl	8005a84 <__mcmp>
 8005ace:	1e05      	subs	r5, r0, #0
 8005ad0:	d110      	bne.n	8005af4 <__mdiff+0x38>
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff fd53 	bl	8005580 <_Balloc>
 8005ada:	b930      	cbnz	r0, 8005aea <__mdiff+0x2e>
 8005adc:	4b3a      	ldr	r3, [pc, #232]	; (8005bc8 <__mdiff+0x10c>)
 8005ade:	4602      	mov	r2, r0
 8005ae0:	f240 2132 	movw	r1, #562	; 0x232
 8005ae4:	4839      	ldr	r0, [pc, #228]	; (8005bcc <__mdiff+0x110>)
 8005ae6:	f000 fb31 	bl	800614c <__assert_func>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	bfa4      	itt	ge
 8005af6:	4643      	movge	r3, r8
 8005af8:	46a0      	movge	r8, r4
 8005afa:	4630      	mov	r0, r6
 8005afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b00:	bfa6      	itte	ge
 8005b02:	461c      	movge	r4, r3
 8005b04:	2500      	movge	r5, #0
 8005b06:	2501      	movlt	r5, #1
 8005b08:	f7ff fd3a 	bl	8005580 <_Balloc>
 8005b0c:	b920      	cbnz	r0, 8005b18 <__mdiff+0x5c>
 8005b0e:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <__mdiff+0x10c>)
 8005b10:	4602      	mov	r2, r0
 8005b12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b16:	e7e5      	b.n	8005ae4 <__mdiff+0x28>
 8005b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b1c:	6926      	ldr	r6, [r4, #16]
 8005b1e:	60c5      	str	r5, [r0, #12]
 8005b20:	f104 0914 	add.w	r9, r4, #20
 8005b24:	f108 0514 	add.w	r5, r8, #20
 8005b28:	f100 0e14 	add.w	lr, r0, #20
 8005b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b34:	f108 0210 	add.w	r2, r8, #16
 8005b38:	46f2      	mov	sl, lr
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b44:	fa1f f883 	uxth.w	r8, r3
 8005b48:	fa11 f18b 	uxtah	r1, r1, fp
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	eba1 0808 	sub.w	r8, r1, r8
 8005b52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b5a:	fa1f f888 	uxth.w	r8, r8
 8005b5e:	1419      	asrs	r1, r3, #16
 8005b60:	454e      	cmp	r6, r9
 8005b62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b66:	f84a 3b04 	str.w	r3, [sl], #4
 8005b6a:	d8e7      	bhi.n	8005b3c <__mdiff+0x80>
 8005b6c:	1b33      	subs	r3, r6, r4
 8005b6e:	3b15      	subs	r3, #21
 8005b70:	f023 0303 	bic.w	r3, r3, #3
 8005b74:	3304      	adds	r3, #4
 8005b76:	3415      	adds	r4, #21
 8005b78:	42a6      	cmp	r6, r4
 8005b7a:	bf38      	it	cc
 8005b7c:	2304      	movcc	r3, #4
 8005b7e:	441d      	add	r5, r3
 8005b80:	4473      	add	r3, lr
 8005b82:	469e      	mov	lr, r3
 8005b84:	462e      	mov	r6, r5
 8005b86:	4566      	cmp	r6, ip
 8005b88:	d30e      	bcc.n	8005ba8 <__mdiff+0xec>
 8005b8a:	f10c 0203 	add.w	r2, ip, #3
 8005b8e:	1b52      	subs	r2, r2, r5
 8005b90:	f022 0203 	bic.w	r2, r2, #3
 8005b94:	3d03      	subs	r5, #3
 8005b96:	45ac      	cmp	ip, r5
 8005b98:	bf38      	it	cc
 8005b9a:	2200      	movcc	r2, #0
 8005b9c:	441a      	add	r2, r3
 8005b9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005ba2:	b17b      	cbz	r3, 8005bc4 <__mdiff+0x108>
 8005ba4:	6107      	str	r7, [r0, #16]
 8005ba6:	e7a3      	b.n	8005af0 <__mdiff+0x34>
 8005ba8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005bac:	fa11 f288 	uxtah	r2, r1, r8
 8005bb0:	1414      	asrs	r4, r2, #16
 8005bb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bbc:	f84e 2b04 	str.w	r2, [lr], #4
 8005bc0:	1421      	asrs	r1, r4, #16
 8005bc2:	e7e0      	b.n	8005b86 <__mdiff+0xca>
 8005bc4:	3f01      	subs	r7, #1
 8005bc6:	e7ea      	b.n	8005b9e <__mdiff+0xe2>
 8005bc8:	08006e87 	.word	0x08006e87
 8005bcc:	08006e98 	.word	0x08006e98

08005bd0 <__d2b>:
 8005bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	4689      	mov	r9, r1
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	ec57 6b10 	vmov	r6, r7, d0
 8005bdc:	4690      	mov	r8, r2
 8005bde:	f7ff fccf 	bl	8005580 <_Balloc>
 8005be2:	4604      	mov	r4, r0
 8005be4:	b930      	cbnz	r0, 8005bf4 <__d2b+0x24>
 8005be6:	4602      	mov	r2, r0
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <__d2b+0xb0>)
 8005bea:	4826      	ldr	r0, [pc, #152]	; (8005c84 <__d2b+0xb4>)
 8005bec:	f240 310a 	movw	r1, #778	; 0x30a
 8005bf0:	f000 faac 	bl	800614c <__assert_func>
 8005bf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bfc:	bb35      	cbnz	r5, 8005c4c <__d2b+0x7c>
 8005bfe:	2e00      	cmp	r6, #0
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	d028      	beq.n	8005c56 <__d2b+0x86>
 8005c04:	4668      	mov	r0, sp
 8005c06:	9600      	str	r6, [sp, #0]
 8005c08:	f7ff fd82 	bl	8005710 <__lo0bits>
 8005c0c:	9900      	ldr	r1, [sp, #0]
 8005c0e:	b300      	cbz	r0, 8005c52 <__d2b+0x82>
 8005c10:	9a01      	ldr	r2, [sp, #4]
 8005c12:	f1c0 0320 	rsb	r3, r0, #32
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	40c2      	lsrs	r2, r0
 8005c1e:	6163      	str	r3, [r4, #20]
 8005c20:	9201      	str	r2, [sp, #4]
 8005c22:	9b01      	ldr	r3, [sp, #4]
 8005c24:	61a3      	str	r3, [r4, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bf14      	ite	ne
 8005c2a:	2202      	movne	r2, #2
 8005c2c:	2201      	moveq	r2, #1
 8005c2e:	6122      	str	r2, [r4, #16]
 8005c30:	b1d5      	cbz	r5, 8005c68 <__d2b+0x98>
 8005c32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c36:	4405      	add	r5, r0
 8005c38:	f8c9 5000 	str.w	r5, [r9]
 8005c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c40:	f8c8 0000 	str.w	r0, [r8]
 8005c44:	4620      	mov	r0, r4
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c50:	e7d5      	b.n	8005bfe <__d2b+0x2e>
 8005c52:	6161      	str	r1, [r4, #20]
 8005c54:	e7e5      	b.n	8005c22 <__d2b+0x52>
 8005c56:	a801      	add	r0, sp, #4
 8005c58:	f7ff fd5a 	bl	8005710 <__lo0bits>
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	6163      	str	r3, [r4, #20]
 8005c60:	2201      	movs	r2, #1
 8005c62:	6122      	str	r2, [r4, #16]
 8005c64:	3020      	adds	r0, #32
 8005c66:	e7e3      	b.n	8005c30 <__d2b+0x60>
 8005c68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c70:	f8c9 0000 	str.w	r0, [r9]
 8005c74:	6918      	ldr	r0, [r3, #16]
 8005c76:	f7ff fd2b 	bl	80056d0 <__hi0bits>
 8005c7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c7e:	e7df      	b.n	8005c40 <__d2b+0x70>
 8005c80:	08006e87 	.word	0x08006e87
 8005c84:	08006e98 	.word	0x08006e98

08005c88 <_calloc_r>:
 8005c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c8a:	fba1 2402 	umull	r2, r4, r1, r2
 8005c8e:	b94c      	cbnz	r4, 8005ca4 <_calloc_r+0x1c>
 8005c90:	4611      	mov	r1, r2
 8005c92:	9201      	str	r2, [sp, #4]
 8005c94:	f000 f87a 	bl	8005d8c <_malloc_r>
 8005c98:	9a01      	ldr	r2, [sp, #4]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b930      	cbnz	r0, 8005cac <_calloc_r+0x24>
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	b003      	add	sp, #12
 8005ca2:	bd30      	pop	{r4, r5, pc}
 8005ca4:	220c      	movs	r2, #12
 8005ca6:	6002      	str	r2, [r0, #0]
 8005ca8:	2500      	movs	r5, #0
 8005caa:	e7f8      	b.n	8005c9e <_calloc_r+0x16>
 8005cac:	4621      	mov	r1, r4
 8005cae:	f7fe f9e7 	bl	8004080 <memset>
 8005cb2:	e7f4      	b.n	8005c9e <_calloc_r+0x16>

08005cb4 <_free_r>:
 8005cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	d044      	beq.n	8005d44 <_free_r+0x90>
 8005cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cbe:	9001      	str	r0, [sp, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f1a1 0404 	sub.w	r4, r1, #4
 8005cc6:	bfb8      	it	lt
 8005cc8:	18e4      	addlt	r4, r4, r3
 8005cca:	f000 fa9b 	bl	8006204 <__malloc_lock>
 8005cce:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <_free_r+0x94>)
 8005cd0:	9801      	ldr	r0, [sp, #4]
 8005cd2:	6813      	ldr	r3, [r2, #0]
 8005cd4:	b933      	cbnz	r3, 8005ce4 <_free_r+0x30>
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	6014      	str	r4, [r2, #0]
 8005cda:	b003      	add	sp, #12
 8005cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ce0:	f000 ba96 	b.w	8006210 <__malloc_unlock>
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	d908      	bls.n	8005cfa <_free_r+0x46>
 8005ce8:	6825      	ldr	r5, [r4, #0]
 8005cea:	1961      	adds	r1, r4, r5
 8005cec:	428b      	cmp	r3, r1
 8005cee:	bf01      	itttt	eq
 8005cf0:	6819      	ldreq	r1, [r3, #0]
 8005cf2:	685b      	ldreq	r3, [r3, #4]
 8005cf4:	1949      	addeq	r1, r1, r5
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	e7ed      	b.n	8005cd6 <_free_r+0x22>
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	b10b      	cbz	r3, 8005d04 <_free_r+0x50>
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	d9fa      	bls.n	8005cfa <_free_r+0x46>
 8005d04:	6811      	ldr	r1, [r2, #0]
 8005d06:	1855      	adds	r5, r2, r1
 8005d08:	42a5      	cmp	r5, r4
 8005d0a:	d10b      	bne.n	8005d24 <_free_r+0x70>
 8005d0c:	6824      	ldr	r4, [r4, #0]
 8005d0e:	4421      	add	r1, r4
 8005d10:	1854      	adds	r4, r2, r1
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	6011      	str	r1, [r2, #0]
 8005d16:	d1e0      	bne.n	8005cda <_free_r+0x26>
 8005d18:	681c      	ldr	r4, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	6053      	str	r3, [r2, #4]
 8005d1e:	4421      	add	r1, r4
 8005d20:	6011      	str	r1, [r2, #0]
 8005d22:	e7da      	b.n	8005cda <_free_r+0x26>
 8005d24:	d902      	bls.n	8005d2c <_free_r+0x78>
 8005d26:	230c      	movs	r3, #12
 8005d28:	6003      	str	r3, [r0, #0]
 8005d2a:	e7d6      	b.n	8005cda <_free_r+0x26>
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	1961      	adds	r1, r4, r5
 8005d30:	428b      	cmp	r3, r1
 8005d32:	bf04      	itt	eq
 8005d34:	6819      	ldreq	r1, [r3, #0]
 8005d36:	685b      	ldreq	r3, [r3, #4]
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	bf04      	itt	eq
 8005d3c:	1949      	addeq	r1, r1, r5
 8005d3e:	6021      	streq	r1, [r4, #0]
 8005d40:	6054      	str	r4, [r2, #4]
 8005d42:	e7ca      	b.n	8005cda <_free_r+0x26>
 8005d44:	b003      	add	sp, #12
 8005d46:	bd30      	pop	{r4, r5, pc}
 8005d48:	2000034c 	.word	0x2000034c

08005d4c <sbrk_aligned>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4e0e      	ldr	r6, [pc, #56]	; (8005d88 <sbrk_aligned+0x3c>)
 8005d50:	460c      	mov	r4, r1
 8005d52:	6831      	ldr	r1, [r6, #0]
 8005d54:	4605      	mov	r5, r0
 8005d56:	b911      	cbnz	r1, 8005d5e <sbrk_aligned+0x12>
 8005d58:	f000 f9e8 	bl	800612c <_sbrk_r>
 8005d5c:	6030      	str	r0, [r6, #0]
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 f9e3 	bl	800612c <_sbrk_r>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d00a      	beq.n	8005d80 <sbrk_aligned+0x34>
 8005d6a:	1cc4      	adds	r4, r0, #3
 8005d6c:	f024 0403 	bic.w	r4, r4, #3
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d007      	beq.n	8005d84 <sbrk_aligned+0x38>
 8005d74:	1a21      	subs	r1, r4, r0
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f9d8 	bl	800612c <_sbrk_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d101      	bne.n	8005d84 <sbrk_aligned+0x38>
 8005d80:	f04f 34ff 	mov.w	r4, #4294967295
 8005d84:	4620      	mov	r0, r4
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	20000350 	.word	0x20000350

08005d8c <_malloc_r>:
 8005d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	1ccd      	adds	r5, r1, #3
 8005d92:	f025 0503 	bic.w	r5, r5, #3
 8005d96:	3508      	adds	r5, #8
 8005d98:	2d0c      	cmp	r5, #12
 8005d9a:	bf38      	it	cc
 8005d9c:	250c      	movcc	r5, #12
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	4607      	mov	r7, r0
 8005da2:	db01      	blt.n	8005da8 <_malloc_r+0x1c>
 8005da4:	42a9      	cmp	r1, r5
 8005da6:	d905      	bls.n	8005db4 <_malloc_r+0x28>
 8005da8:	230c      	movs	r3, #12
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	2600      	movs	r6, #0
 8005dae:	4630      	mov	r0, r6
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	4e2e      	ldr	r6, [pc, #184]	; (8005e70 <_malloc_r+0xe4>)
 8005db6:	f000 fa25 	bl	8006204 <__malloc_lock>
 8005dba:	6833      	ldr	r3, [r6, #0]
 8005dbc:	461c      	mov	r4, r3
 8005dbe:	bb34      	cbnz	r4, 8005e0e <_malloc_r+0x82>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f7ff ffc2 	bl	8005d4c <sbrk_aligned>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	4604      	mov	r4, r0
 8005dcc:	d14d      	bne.n	8005e6a <_malloc_r+0xde>
 8005dce:	6834      	ldr	r4, [r6, #0]
 8005dd0:	4626      	mov	r6, r4
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d140      	bne.n	8005e58 <_malloc_r+0xcc>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4638      	mov	r0, r7
 8005ddc:	eb04 0803 	add.w	r8, r4, r3
 8005de0:	f000 f9a4 	bl	800612c <_sbrk_r>
 8005de4:	4580      	cmp	r8, r0
 8005de6:	d13a      	bne.n	8005e5e <_malloc_r+0xd2>
 8005de8:	6821      	ldr	r1, [r4, #0]
 8005dea:	3503      	adds	r5, #3
 8005dec:	1a6d      	subs	r5, r5, r1
 8005dee:	f025 0503 	bic.w	r5, r5, #3
 8005df2:	3508      	adds	r5, #8
 8005df4:	2d0c      	cmp	r5, #12
 8005df6:	bf38      	it	cc
 8005df8:	250c      	movcc	r5, #12
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff ffa5 	bl	8005d4c <sbrk_aligned>
 8005e02:	3001      	adds	r0, #1
 8005e04:	d02b      	beq.n	8005e5e <_malloc_r+0xd2>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	442b      	add	r3, r5
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	e00e      	b.n	8005e2c <_malloc_r+0xa0>
 8005e0e:	6822      	ldr	r2, [r4, #0]
 8005e10:	1b52      	subs	r2, r2, r5
 8005e12:	d41e      	bmi.n	8005e52 <_malloc_r+0xc6>
 8005e14:	2a0b      	cmp	r2, #11
 8005e16:	d916      	bls.n	8005e46 <_malloc_r+0xba>
 8005e18:	1961      	adds	r1, r4, r5
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	6025      	str	r5, [r4, #0]
 8005e1e:	bf18      	it	ne
 8005e20:	6059      	strne	r1, [r3, #4]
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	bf08      	it	eq
 8005e26:	6031      	streq	r1, [r6, #0]
 8005e28:	5162      	str	r2, [r4, r5]
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f104 060b 	add.w	r6, r4, #11
 8005e32:	f000 f9ed 	bl	8006210 <__malloc_unlock>
 8005e36:	f026 0607 	bic.w	r6, r6, #7
 8005e3a:	1d23      	adds	r3, r4, #4
 8005e3c:	1af2      	subs	r2, r6, r3
 8005e3e:	d0b6      	beq.n	8005dae <_malloc_r+0x22>
 8005e40:	1b9b      	subs	r3, r3, r6
 8005e42:	50a3      	str	r3, [r4, r2]
 8005e44:	e7b3      	b.n	8005dae <_malloc_r+0x22>
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	bf0c      	ite	eq
 8005e4c:	6032      	streq	r2, [r6, #0]
 8005e4e:	605a      	strne	r2, [r3, #4]
 8005e50:	e7ec      	b.n	8005e2c <_malloc_r+0xa0>
 8005e52:	4623      	mov	r3, r4
 8005e54:	6864      	ldr	r4, [r4, #4]
 8005e56:	e7b2      	b.n	8005dbe <_malloc_r+0x32>
 8005e58:	4634      	mov	r4, r6
 8005e5a:	6876      	ldr	r6, [r6, #4]
 8005e5c:	e7b9      	b.n	8005dd2 <_malloc_r+0x46>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4638      	mov	r0, r7
 8005e64:	f000 f9d4 	bl	8006210 <__malloc_unlock>
 8005e68:	e7a1      	b.n	8005dae <_malloc_r+0x22>
 8005e6a:	6025      	str	r5, [r4, #0]
 8005e6c:	e7de      	b.n	8005e2c <_malloc_r+0xa0>
 8005e6e:	bf00      	nop
 8005e70:	2000034c 	.word	0x2000034c

08005e74 <__ssputs_r>:
 8005e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	688e      	ldr	r6, [r1, #8]
 8005e7a:	429e      	cmp	r6, r3
 8005e7c:	4682      	mov	sl, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	4690      	mov	r8, r2
 8005e82:	461f      	mov	r7, r3
 8005e84:	d838      	bhi.n	8005ef8 <__ssputs_r+0x84>
 8005e86:	898a      	ldrh	r2, [r1, #12]
 8005e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e8c:	d032      	beq.n	8005ef4 <__ssputs_r+0x80>
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	6909      	ldr	r1, [r1, #16]
 8005e92:	eba5 0901 	sub.w	r9, r5, r1
 8005e96:	6965      	ldr	r5, [r4, #20]
 8005e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	444b      	add	r3, r9
 8005ea4:	106d      	asrs	r5, r5, #1
 8005ea6:	429d      	cmp	r5, r3
 8005ea8:	bf38      	it	cc
 8005eaa:	461d      	movcc	r5, r3
 8005eac:	0553      	lsls	r3, r2, #21
 8005eae:	d531      	bpl.n	8005f14 <__ssputs_r+0xa0>
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	f7ff ff6b 	bl	8005d8c <_malloc_r>
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	b950      	cbnz	r0, 8005ed0 <__ssputs_r+0x5c>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	f8ca 3000 	str.w	r3, [sl]
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed0:	6921      	ldr	r1, [r4, #16]
 8005ed2:	464a      	mov	r2, r9
 8005ed4:	f7ff fb46 	bl	8005564 <memcpy>
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee2:	81a3      	strh	r3, [r4, #12]
 8005ee4:	6126      	str	r6, [r4, #16]
 8005ee6:	6165      	str	r5, [r4, #20]
 8005ee8:	444e      	add	r6, r9
 8005eea:	eba5 0509 	sub.w	r5, r5, r9
 8005eee:	6026      	str	r6, [r4, #0]
 8005ef0:	60a5      	str	r5, [r4, #8]
 8005ef2:	463e      	mov	r6, r7
 8005ef4:	42be      	cmp	r6, r7
 8005ef6:	d900      	bls.n	8005efa <__ssputs_r+0x86>
 8005ef8:	463e      	mov	r6, r7
 8005efa:	6820      	ldr	r0, [r4, #0]
 8005efc:	4632      	mov	r2, r6
 8005efe:	4641      	mov	r1, r8
 8005f00:	f000 f966 	bl	80061d0 <memmove>
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	1b9b      	subs	r3, r3, r6
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	4433      	add	r3, r6
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	2000      	movs	r0, #0
 8005f12:	e7db      	b.n	8005ecc <__ssputs_r+0x58>
 8005f14:	462a      	mov	r2, r5
 8005f16:	f000 f981 	bl	800621c <_realloc_r>
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d1e1      	bne.n	8005ee4 <__ssputs_r+0x70>
 8005f20:	6921      	ldr	r1, [r4, #16]
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7ff fec6 	bl	8005cb4 <_free_r>
 8005f28:	e7c7      	b.n	8005eba <__ssputs_r+0x46>
	...

08005f2c <_svfiprintf_r>:
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	4698      	mov	r8, r3
 8005f32:	898b      	ldrh	r3, [r1, #12]
 8005f34:	061b      	lsls	r3, r3, #24
 8005f36:	b09d      	sub	sp, #116	; 0x74
 8005f38:	4607      	mov	r7, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	d50e      	bpl.n	8005f5e <_svfiprintf_r+0x32>
 8005f40:	690b      	ldr	r3, [r1, #16]
 8005f42:	b963      	cbnz	r3, 8005f5e <_svfiprintf_r+0x32>
 8005f44:	2140      	movs	r1, #64	; 0x40
 8005f46:	f7ff ff21 	bl	8005d8c <_malloc_r>
 8005f4a:	6028      	str	r0, [r5, #0]
 8005f4c:	6128      	str	r0, [r5, #16]
 8005f4e:	b920      	cbnz	r0, 8005f5a <_svfiprintf_r+0x2e>
 8005f50:	230c      	movs	r3, #12
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	e0d1      	b.n	80060fe <_svfiprintf_r+0x1d2>
 8005f5a:	2340      	movs	r3, #64	; 0x40
 8005f5c:	616b      	str	r3, [r5, #20]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9309      	str	r3, [sp, #36]	; 0x24
 8005f62:	2320      	movs	r3, #32
 8005f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f6c:	2330      	movs	r3, #48	; 0x30
 8005f6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006118 <_svfiprintf_r+0x1ec>
 8005f72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f76:	f04f 0901 	mov.w	r9, #1
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	469a      	mov	sl, r3
 8005f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f82:	b10a      	cbz	r2, 8005f88 <_svfiprintf_r+0x5c>
 8005f84:	2a25      	cmp	r2, #37	; 0x25
 8005f86:	d1f9      	bne.n	8005f7c <_svfiprintf_r+0x50>
 8005f88:	ebba 0b04 	subs.w	fp, sl, r4
 8005f8c:	d00b      	beq.n	8005fa6 <_svfiprintf_r+0x7a>
 8005f8e:	465b      	mov	r3, fp
 8005f90:	4622      	mov	r2, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7ff ff6d 	bl	8005e74 <__ssputs_r>
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f000 80aa 	beq.w	80060f4 <_svfiprintf_r+0x1c8>
 8005fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa2:	445a      	add	r2, fp
 8005fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80a2 	beq.w	80060f4 <_svfiprintf_r+0x1c8>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fba:	f10a 0a01 	add.w	sl, sl, #1
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	9307      	str	r3, [sp, #28]
 8005fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8005fc8:	4654      	mov	r4, sl
 8005fca:	2205      	movs	r2, #5
 8005fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd0:	4851      	ldr	r0, [pc, #324]	; (8006118 <_svfiprintf_r+0x1ec>)
 8005fd2:	f7fa f93d 	bl	8000250 <memchr>
 8005fd6:	9a04      	ldr	r2, [sp, #16]
 8005fd8:	b9d8      	cbnz	r0, 8006012 <_svfiprintf_r+0xe6>
 8005fda:	06d0      	lsls	r0, r2, #27
 8005fdc:	bf44      	itt	mi
 8005fde:	2320      	movmi	r3, #32
 8005fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fe4:	0711      	lsls	r1, r2, #28
 8005fe6:	bf44      	itt	mi
 8005fe8:	232b      	movmi	r3, #43	; 0x2b
 8005fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff4:	d015      	beq.n	8006022 <_svfiprintf_r+0xf6>
 8005ff6:	9a07      	ldr	r2, [sp, #28]
 8005ff8:	4654      	mov	r4, sl
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f04f 0c0a 	mov.w	ip, #10
 8006000:	4621      	mov	r1, r4
 8006002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006006:	3b30      	subs	r3, #48	; 0x30
 8006008:	2b09      	cmp	r3, #9
 800600a:	d94e      	bls.n	80060aa <_svfiprintf_r+0x17e>
 800600c:	b1b0      	cbz	r0, 800603c <_svfiprintf_r+0x110>
 800600e:	9207      	str	r2, [sp, #28]
 8006010:	e014      	b.n	800603c <_svfiprintf_r+0x110>
 8006012:	eba0 0308 	sub.w	r3, r0, r8
 8006016:	fa09 f303 	lsl.w	r3, r9, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	46a2      	mov	sl, r4
 8006020:	e7d2      	b.n	8005fc8 <_svfiprintf_r+0x9c>
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	1d19      	adds	r1, r3, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	9103      	str	r1, [sp, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	bfbb      	ittet	lt
 800602e:	425b      	neglt	r3, r3
 8006030:	f042 0202 	orrlt.w	r2, r2, #2
 8006034:	9307      	strge	r3, [sp, #28]
 8006036:	9307      	strlt	r3, [sp, #28]
 8006038:	bfb8      	it	lt
 800603a:	9204      	strlt	r2, [sp, #16]
 800603c:	7823      	ldrb	r3, [r4, #0]
 800603e:	2b2e      	cmp	r3, #46	; 0x2e
 8006040:	d10c      	bne.n	800605c <_svfiprintf_r+0x130>
 8006042:	7863      	ldrb	r3, [r4, #1]
 8006044:	2b2a      	cmp	r3, #42	; 0x2a
 8006046:	d135      	bne.n	80060b4 <_svfiprintf_r+0x188>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	1d1a      	adds	r2, r3, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	9203      	str	r2, [sp, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfb8      	it	lt
 8006054:	f04f 33ff 	movlt.w	r3, #4294967295
 8006058:	3402      	adds	r4, #2
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006128 <_svfiprintf_r+0x1fc>
 8006060:	7821      	ldrb	r1, [r4, #0]
 8006062:	2203      	movs	r2, #3
 8006064:	4650      	mov	r0, sl
 8006066:	f7fa f8f3 	bl	8000250 <memchr>
 800606a:	b140      	cbz	r0, 800607e <_svfiprintf_r+0x152>
 800606c:	2340      	movs	r3, #64	; 0x40
 800606e:	eba0 000a 	sub.w	r0, r0, sl
 8006072:	fa03 f000 	lsl.w	r0, r3, r0
 8006076:	9b04      	ldr	r3, [sp, #16]
 8006078:	4303      	orrs	r3, r0
 800607a:	3401      	adds	r4, #1
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006082:	4826      	ldr	r0, [pc, #152]	; (800611c <_svfiprintf_r+0x1f0>)
 8006084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006088:	2206      	movs	r2, #6
 800608a:	f7fa f8e1 	bl	8000250 <memchr>
 800608e:	2800      	cmp	r0, #0
 8006090:	d038      	beq.n	8006104 <_svfiprintf_r+0x1d8>
 8006092:	4b23      	ldr	r3, [pc, #140]	; (8006120 <_svfiprintf_r+0x1f4>)
 8006094:	bb1b      	cbnz	r3, 80060de <_svfiprintf_r+0x1b2>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	3307      	adds	r3, #7
 800609a:	f023 0307 	bic.w	r3, r3, #7
 800609e:	3308      	adds	r3, #8
 80060a0:	9303      	str	r3, [sp, #12]
 80060a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a4:	4433      	add	r3, r6
 80060a6:	9309      	str	r3, [sp, #36]	; 0x24
 80060a8:	e767      	b.n	8005f7a <_svfiprintf_r+0x4e>
 80060aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ae:	460c      	mov	r4, r1
 80060b0:	2001      	movs	r0, #1
 80060b2:	e7a5      	b.n	8006000 <_svfiprintf_r+0xd4>
 80060b4:	2300      	movs	r3, #0
 80060b6:	3401      	adds	r4, #1
 80060b8:	9305      	str	r3, [sp, #20]
 80060ba:	4619      	mov	r1, r3
 80060bc:	f04f 0c0a 	mov.w	ip, #10
 80060c0:	4620      	mov	r0, r4
 80060c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060c6:	3a30      	subs	r2, #48	; 0x30
 80060c8:	2a09      	cmp	r2, #9
 80060ca:	d903      	bls.n	80060d4 <_svfiprintf_r+0x1a8>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0c5      	beq.n	800605c <_svfiprintf_r+0x130>
 80060d0:	9105      	str	r1, [sp, #20]
 80060d2:	e7c3      	b.n	800605c <_svfiprintf_r+0x130>
 80060d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060d8:	4604      	mov	r4, r0
 80060da:	2301      	movs	r3, #1
 80060dc:	e7f0      	b.n	80060c0 <_svfiprintf_r+0x194>
 80060de:	ab03      	add	r3, sp, #12
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	462a      	mov	r2, r5
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <_svfiprintf_r+0x1f8>)
 80060e6:	a904      	add	r1, sp, #16
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7fe f861 	bl	80041b0 <_printf_float>
 80060ee:	1c42      	adds	r2, r0, #1
 80060f0:	4606      	mov	r6, r0
 80060f2:	d1d6      	bne.n	80060a2 <_svfiprintf_r+0x176>
 80060f4:	89ab      	ldrh	r3, [r5, #12]
 80060f6:	065b      	lsls	r3, r3, #25
 80060f8:	f53f af2c 	bmi.w	8005f54 <_svfiprintf_r+0x28>
 80060fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060fe:	b01d      	add	sp, #116	; 0x74
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006104:	ab03      	add	r3, sp, #12
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	462a      	mov	r2, r5
 800610a:	4b06      	ldr	r3, [pc, #24]	; (8006124 <_svfiprintf_r+0x1f8>)
 800610c:	a904      	add	r1, sp, #16
 800610e:	4638      	mov	r0, r7
 8006110:	f7fe fada 	bl	80046c8 <_printf_i>
 8006114:	e7eb      	b.n	80060ee <_svfiprintf_r+0x1c2>
 8006116:	bf00      	nop
 8006118:	08006ff4 	.word	0x08006ff4
 800611c:	08006ffe 	.word	0x08006ffe
 8006120:	080041b1 	.word	0x080041b1
 8006124:	08005e75 	.word	0x08005e75
 8006128:	08006ffa 	.word	0x08006ffa

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_sbrk_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fa fdda 	bl	8000cf0 <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000354 	.word	0x20000354

0800614c <__assert_func>:
 800614c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800614e:	4614      	mov	r4, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <__assert_func+0x2c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4605      	mov	r5, r0
 8006158:	68d8      	ldr	r0, [r3, #12]
 800615a:	b14c      	cbz	r4, 8006170 <__assert_func+0x24>
 800615c:	4b07      	ldr	r3, [pc, #28]	; (800617c <__assert_func+0x30>)
 800615e:	9100      	str	r1, [sp, #0]
 8006160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006164:	4906      	ldr	r1, [pc, #24]	; (8006180 <__assert_func+0x34>)
 8006166:	462b      	mov	r3, r5
 8006168:	f000 f80e 	bl	8006188 <fiprintf>
 800616c:	f000 faac 	bl	80066c8 <abort>
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <__assert_func+0x38>)
 8006172:	461c      	mov	r4, r3
 8006174:	e7f3      	b.n	800615e <__assert_func+0x12>
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c
 800617c:	08007005 	.word	0x08007005
 8006180:	08007012 	.word	0x08007012
 8006184:	08007040 	.word	0x08007040

08006188 <fiprintf>:
 8006188:	b40e      	push	{r1, r2, r3}
 800618a:	b503      	push	{r0, r1, lr}
 800618c:	4601      	mov	r1, r0
 800618e:	ab03      	add	r3, sp, #12
 8006190:	4805      	ldr	r0, [pc, #20]	; (80061a8 <fiprintf+0x20>)
 8006192:	f853 2b04 	ldr.w	r2, [r3], #4
 8006196:	6800      	ldr	r0, [r0, #0]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	f000 f897 	bl	80062cc <_vfiprintf_r>
 800619e:	b002      	add	sp, #8
 80061a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a4:	b003      	add	sp, #12
 80061a6:	4770      	bx	lr
 80061a8:	2000000c 	.word	0x2000000c

080061ac <__ascii_mbtowc>:
 80061ac:	b082      	sub	sp, #8
 80061ae:	b901      	cbnz	r1, 80061b2 <__ascii_mbtowc+0x6>
 80061b0:	a901      	add	r1, sp, #4
 80061b2:	b142      	cbz	r2, 80061c6 <__ascii_mbtowc+0x1a>
 80061b4:	b14b      	cbz	r3, 80061ca <__ascii_mbtowc+0x1e>
 80061b6:	7813      	ldrb	r3, [r2, #0]
 80061b8:	600b      	str	r3, [r1, #0]
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	1e10      	subs	r0, r2, #0
 80061be:	bf18      	it	ne
 80061c0:	2001      	movne	r0, #1
 80061c2:	b002      	add	sp, #8
 80061c4:	4770      	bx	lr
 80061c6:	4610      	mov	r0, r2
 80061c8:	e7fb      	b.n	80061c2 <__ascii_mbtowc+0x16>
 80061ca:	f06f 0001 	mvn.w	r0, #1
 80061ce:	e7f8      	b.n	80061c2 <__ascii_mbtowc+0x16>

080061d0 <memmove>:
 80061d0:	4288      	cmp	r0, r1
 80061d2:	b510      	push	{r4, lr}
 80061d4:	eb01 0402 	add.w	r4, r1, r2
 80061d8:	d902      	bls.n	80061e0 <memmove+0x10>
 80061da:	4284      	cmp	r4, r0
 80061dc:	4623      	mov	r3, r4
 80061de:	d807      	bhi.n	80061f0 <memmove+0x20>
 80061e0:	1e43      	subs	r3, r0, #1
 80061e2:	42a1      	cmp	r1, r4
 80061e4:	d008      	beq.n	80061f8 <memmove+0x28>
 80061e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ee:	e7f8      	b.n	80061e2 <memmove+0x12>
 80061f0:	4402      	add	r2, r0
 80061f2:	4601      	mov	r1, r0
 80061f4:	428a      	cmp	r2, r1
 80061f6:	d100      	bne.n	80061fa <memmove+0x2a>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006202:	e7f7      	b.n	80061f4 <memmove+0x24>

08006204 <__malloc_lock>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__malloc_lock+0x8>)
 8006206:	f000 bc1f 	b.w	8006a48 <__retarget_lock_acquire_recursive>
 800620a:	bf00      	nop
 800620c:	20000358 	.word	0x20000358

08006210 <__malloc_unlock>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__malloc_unlock+0x8>)
 8006212:	f000 bc1a 	b.w	8006a4a <__retarget_lock_release_recursive>
 8006216:	bf00      	nop
 8006218:	20000358 	.word	0x20000358

0800621c <_realloc_r>:
 800621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006220:	4680      	mov	r8, r0
 8006222:	4614      	mov	r4, r2
 8006224:	460e      	mov	r6, r1
 8006226:	b921      	cbnz	r1, 8006232 <_realloc_r+0x16>
 8006228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622c:	4611      	mov	r1, r2
 800622e:	f7ff bdad 	b.w	8005d8c <_malloc_r>
 8006232:	b92a      	cbnz	r2, 8006240 <_realloc_r+0x24>
 8006234:	f7ff fd3e 	bl	8005cb4 <_free_r>
 8006238:	4625      	mov	r5, r4
 800623a:	4628      	mov	r0, r5
 800623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006240:	f000 fc6a 	bl	8006b18 <_malloc_usable_size_r>
 8006244:	4284      	cmp	r4, r0
 8006246:	4607      	mov	r7, r0
 8006248:	d802      	bhi.n	8006250 <_realloc_r+0x34>
 800624a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800624e:	d812      	bhi.n	8006276 <_realloc_r+0x5a>
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f7ff fd9a 	bl	8005d8c <_malloc_r>
 8006258:	4605      	mov	r5, r0
 800625a:	2800      	cmp	r0, #0
 800625c:	d0ed      	beq.n	800623a <_realloc_r+0x1e>
 800625e:	42bc      	cmp	r4, r7
 8006260:	4622      	mov	r2, r4
 8006262:	4631      	mov	r1, r6
 8006264:	bf28      	it	cs
 8006266:	463a      	movcs	r2, r7
 8006268:	f7ff f97c 	bl	8005564 <memcpy>
 800626c:	4631      	mov	r1, r6
 800626e:	4640      	mov	r0, r8
 8006270:	f7ff fd20 	bl	8005cb4 <_free_r>
 8006274:	e7e1      	b.n	800623a <_realloc_r+0x1e>
 8006276:	4635      	mov	r5, r6
 8006278:	e7df      	b.n	800623a <_realloc_r+0x1e>

0800627a <__sfputc_r>:
 800627a:	6893      	ldr	r3, [r2, #8]
 800627c:	3b01      	subs	r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	b410      	push	{r4}
 8006282:	6093      	str	r3, [r2, #8]
 8006284:	da08      	bge.n	8006298 <__sfputc_r+0x1e>
 8006286:	6994      	ldr	r4, [r2, #24]
 8006288:	42a3      	cmp	r3, r4
 800628a:	db01      	blt.n	8006290 <__sfputc_r+0x16>
 800628c:	290a      	cmp	r1, #10
 800628e:	d103      	bne.n	8006298 <__sfputc_r+0x1e>
 8006290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006294:	f000 b94a 	b.w	800652c <__swbuf_r>
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	1c58      	adds	r0, r3, #1
 800629c:	6010      	str	r0, [r2, #0]
 800629e:	7019      	strb	r1, [r3, #0]
 80062a0:	4608      	mov	r0, r1
 80062a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <__sfputs_r>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	4614      	mov	r4, r2
 80062b0:	18d5      	adds	r5, r2, r3
 80062b2:	42ac      	cmp	r4, r5
 80062b4:	d101      	bne.n	80062ba <__sfputs_r+0x12>
 80062b6:	2000      	movs	r0, #0
 80062b8:	e007      	b.n	80062ca <__sfputs_r+0x22>
 80062ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062be:	463a      	mov	r2, r7
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff ffda 	bl	800627a <__sfputc_r>
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	d1f3      	bne.n	80062b2 <__sfputs_r+0xa>
 80062ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062cc <_vfiprintf_r>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	460d      	mov	r5, r1
 80062d2:	b09d      	sub	sp, #116	; 0x74
 80062d4:	4614      	mov	r4, r2
 80062d6:	4698      	mov	r8, r3
 80062d8:	4606      	mov	r6, r0
 80062da:	b118      	cbz	r0, 80062e4 <_vfiprintf_r+0x18>
 80062dc:	6983      	ldr	r3, [r0, #24]
 80062de:	b90b      	cbnz	r3, 80062e4 <_vfiprintf_r+0x18>
 80062e0:	f000 fb14 	bl	800690c <__sinit>
 80062e4:	4b89      	ldr	r3, [pc, #548]	; (800650c <_vfiprintf_r+0x240>)
 80062e6:	429d      	cmp	r5, r3
 80062e8:	d11b      	bne.n	8006322 <_vfiprintf_r+0x56>
 80062ea:	6875      	ldr	r5, [r6, #4]
 80062ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062ee:	07d9      	lsls	r1, r3, #31
 80062f0:	d405      	bmi.n	80062fe <_vfiprintf_r+0x32>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	059a      	lsls	r2, r3, #22
 80062f6:	d402      	bmi.n	80062fe <_vfiprintf_r+0x32>
 80062f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062fa:	f000 fba5 	bl	8006a48 <__retarget_lock_acquire_recursive>
 80062fe:	89ab      	ldrh	r3, [r5, #12]
 8006300:	071b      	lsls	r3, r3, #28
 8006302:	d501      	bpl.n	8006308 <_vfiprintf_r+0x3c>
 8006304:	692b      	ldr	r3, [r5, #16]
 8006306:	b9eb      	cbnz	r3, 8006344 <_vfiprintf_r+0x78>
 8006308:	4629      	mov	r1, r5
 800630a:	4630      	mov	r0, r6
 800630c:	f000 f96e 	bl	80065ec <__swsetup_r>
 8006310:	b1c0      	cbz	r0, 8006344 <_vfiprintf_r+0x78>
 8006312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006314:	07dc      	lsls	r4, r3, #31
 8006316:	d50e      	bpl.n	8006336 <_vfiprintf_r+0x6a>
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	b01d      	add	sp, #116	; 0x74
 800631e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006322:	4b7b      	ldr	r3, [pc, #492]	; (8006510 <_vfiprintf_r+0x244>)
 8006324:	429d      	cmp	r5, r3
 8006326:	d101      	bne.n	800632c <_vfiprintf_r+0x60>
 8006328:	68b5      	ldr	r5, [r6, #8]
 800632a:	e7df      	b.n	80062ec <_vfiprintf_r+0x20>
 800632c:	4b79      	ldr	r3, [pc, #484]	; (8006514 <_vfiprintf_r+0x248>)
 800632e:	429d      	cmp	r5, r3
 8006330:	bf08      	it	eq
 8006332:	68f5      	ldreq	r5, [r6, #12]
 8006334:	e7da      	b.n	80062ec <_vfiprintf_r+0x20>
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	0598      	lsls	r0, r3, #22
 800633a:	d4ed      	bmi.n	8006318 <_vfiprintf_r+0x4c>
 800633c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633e:	f000 fb84 	bl	8006a4a <__retarget_lock_release_recursive>
 8006342:	e7e9      	b.n	8006318 <_vfiprintf_r+0x4c>
 8006344:	2300      	movs	r3, #0
 8006346:	9309      	str	r3, [sp, #36]	; 0x24
 8006348:	2320      	movs	r3, #32
 800634a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800634e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006352:	2330      	movs	r3, #48	; 0x30
 8006354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006518 <_vfiprintf_r+0x24c>
 8006358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800635c:	f04f 0901 	mov.w	r9, #1
 8006360:	4623      	mov	r3, r4
 8006362:	469a      	mov	sl, r3
 8006364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006368:	b10a      	cbz	r2, 800636e <_vfiprintf_r+0xa2>
 800636a:	2a25      	cmp	r2, #37	; 0x25
 800636c:	d1f9      	bne.n	8006362 <_vfiprintf_r+0x96>
 800636e:	ebba 0b04 	subs.w	fp, sl, r4
 8006372:	d00b      	beq.n	800638c <_vfiprintf_r+0xc0>
 8006374:	465b      	mov	r3, fp
 8006376:	4622      	mov	r2, r4
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ff94 	bl	80062a8 <__sfputs_r>
 8006380:	3001      	adds	r0, #1
 8006382:	f000 80aa 	beq.w	80064da <_vfiprintf_r+0x20e>
 8006386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006388:	445a      	add	r2, fp
 800638a:	9209      	str	r2, [sp, #36]	; 0x24
 800638c:	f89a 3000 	ldrb.w	r3, [sl]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80a2 	beq.w	80064da <_vfiprintf_r+0x20e>
 8006396:	2300      	movs	r3, #0
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a0:	f10a 0a01 	add.w	sl, sl, #1
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	9307      	str	r3, [sp, #28]
 80063a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ac:	931a      	str	r3, [sp, #104]	; 0x68
 80063ae:	4654      	mov	r4, sl
 80063b0:	2205      	movs	r2, #5
 80063b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b6:	4858      	ldr	r0, [pc, #352]	; (8006518 <_vfiprintf_r+0x24c>)
 80063b8:	f7f9 ff4a 	bl	8000250 <memchr>
 80063bc:	9a04      	ldr	r2, [sp, #16]
 80063be:	b9d8      	cbnz	r0, 80063f8 <_vfiprintf_r+0x12c>
 80063c0:	06d1      	lsls	r1, r2, #27
 80063c2:	bf44      	itt	mi
 80063c4:	2320      	movmi	r3, #32
 80063c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ca:	0713      	lsls	r3, r2, #28
 80063cc:	bf44      	itt	mi
 80063ce:	232b      	movmi	r3, #43	; 0x2b
 80063d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d4:	f89a 3000 	ldrb.w	r3, [sl]
 80063d8:	2b2a      	cmp	r3, #42	; 0x2a
 80063da:	d015      	beq.n	8006408 <_vfiprintf_r+0x13c>
 80063dc:	9a07      	ldr	r2, [sp, #28]
 80063de:	4654      	mov	r4, sl
 80063e0:	2000      	movs	r0, #0
 80063e2:	f04f 0c0a 	mov.w	ip, #10
 80063e6:	4621      	mov	r1, r4
 80063e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ec:	3b30      	subs	r3, #48	; 0x30
 80063ee:	2b09      	cmp	r3, #9
 80063f0:	d94e      	bls.n	8006490 <_vfiprintf_r+0x1c4>
 80063f2:	b1b0      	cbz	r0, 8006422 <_vfiprintf_r+0x156>
 80063f4:	9207      	str	r2, [sp, #28]
 80063f6:	e014      	b.n	8006422 <_vfiprintf_r+0x156>
 80063f8:	eba0 0308 	sub.w	r3, r0, r8
 80063fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	46a2      	mov	sl, r4
 8006406:	e7d2      	b.n	80063ae <_vfiprintf_r+0xe2>
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	1d19      	adds	r1, r3, #4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	9103      	str	r1, [sp, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfbb      	ittet	lt
 8006414:	425b      	neglt	r3, r3
 8006416:	f042 0202 	orrlt.w	r2, r2, #2
 800641a:	9307      	strge	r3, [sp, #28]
 800641c:	9307      	strlt	r3, [sp, #28]
 800641e:	bfb8      	it	lt
 8006420:	9204      	strlt	r2, [sp, #16]
 8006422:	7823      	ldrb	r3, [r4, #0]
 8006424:	2b2e      	cmp	r3, #46	; 0x2e
 8006426:	d10c      	bne.n	8006442 <_vfiprintf_r+0x176>
 8006428:	7863      	ldrb	r3, [r4, #1]
 800642a:	2b2a      	cmp	r3, #42	; 0x2a
 800642c:	d135      	bne.n	800649a <_vfiprintf_r+0x1ce>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	1d1a      	adds	r2, r3, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	9203      	str	r2, [sp, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	bfb8      	it	lt
 800643a:	f04f 33ff 	movlt.w	r3, #4294967295
 800643e:	3402      	adds	r4, #2
 8006440:	9305      	str	r3, [sp, #20]
 8006442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006528 <_vfiprintf_r+0x25c>
 8006446:	7821      	ldrb	r1, [r4, #0]
 8006448:	2203      	movs	r2, #3
 800644a:	4650      	mov	r0, sl
 800644c:	f7f9 ff00 	bl	8000250 <memchr>
 8006450:	b140      	cbz	r0, 8006464 <_vfiprintf_r+0x198>
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	eba0 000a 	sub.w	r0, r0, sl
 8006458:	fa03 f000 	lsl.w	r0, r3, r0
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	4303      	orrs	r3, r0
 8006460:	3401      	adds	r4, #1
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006468:	482c      	ldr	r0, [pc, #176]	; (800651c <_vfiprintf_r+0x250>)
 800646a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800646e:	2206      	movs	r2, #6
 8006470:	f7f9 feee 	bl	8000250 <memchr>
 8006474:	2800      	cmp	r0, #0
 8006476:	d03f      	beq.n	80064f8 <_vfiprintf_r+0x22c>
 8006478:	4b29      	ldr	r3, [pc, #164]	; (8006520 <_vfiprintf_r+0x254>)
 800647a:	bb1b      	cbnz	r3, 80064c4 <_vfiprintf_r+0x1f8>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	3307      	adds	r3, #7
 8006480:	f023 0307 	bic.w	r3, r3, #7
 8006484:	3308      	adds	r3, #8
 8006486:	9303      	str	r3, [sp, #12]
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	443b      	add	r3, r7
 800648c:	9309      	str	r3, [sp, #36]	; 0x24
 800648e:	e767      	b.n	8006360 <_vfiprintf_r+0x94>
 8006490:	fb0c 3202 	mla	r2, ip, r2, r3
 8006494:	460c      	mov	r4, r1
 8006496:	2001      	movs	r0, #1
 8006498:	e7a5      	b.n	80063e6 <_vfiprintf_r+0x11a>
 800649a:	2300      	movs	r3, #0
 800649c:	3401      	adds	r4, #1
 800649e:	9305      	str	r3, [sp, #20]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f04f 0c0a 	mov.w	ip, #10
 80064a6:	4620      	mov	r0, r4
 80064a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ac:	3a30      	subs	r2, #48	; 0x30
 80064ae:	2a09      	cmp	r2, #9
 80064b0:	d903      	bls.n	80064ba <_vfiprintf_r+0x1ee>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c5      	beq.n	8006442 <_vfiprintf_r+0x176>
 80064b6:	9105      	str	r1, [sp, #20]
 80064b8:	e7c3      	b.n	8006442 <_vfiprintf_r+0x176>
 80064ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80064be:	4604      	mov	r4, r0
 80064c0:	2301      	movs	r3, #1
 80064c2:	e7f0      	b.n	80064a6 <_vfiprintf_r+0x1da>
 80064c4:	ab03      	add	r3, sp, #12
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	462a      	mov	r2, r5
 80064ca:	4b16      	ldr	r3, [pc, #88]	; (8006524 <_vfiprintf_r+0x258>)
 80064cc:	a904      	add	r1, sp, #16
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7fd fe6e 	bl	80041b0 <_printf_float>
 80064d4:	4607      	mov	r7, r0
 80064d6:	1c78      	adds	r0, r7, #1
 80064d8:	d1d6      	bne.n	8006488 <_vfiprintf_r+0x1bc>
 80064da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064dc:	07d9      	lsls	r1, r3, #31
 80064de:	d405      	bmi.n	80064ec <_vfiprintf_r+0x220>
 80064e0:	89ab      	ldrh	r3, [r5, #12]
 80064e2:	059a      	lsls	r2, r3, #22
 80064e4:	d402      	bmi.n	80064ec <_vfiprintf_r+0x220>
 80064e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064e8:	f000 faaf 	bl	8006a4a <__retarget_lock_release_recursive>
 80064ec:	89ab      	ldrh	r3, [r5, #12]
 80064ee:	065b      	lsls	r3, r3, #25
 80064f0:	f53f af12 	bmi.w	8006318 <_vfiprintf_r+0x4c>
 80064f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064f6:	e711      	b.n	800631c <_vfiprintf_r+0x50>
 80064f8:	ab03      	add	r3, sp, #12
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	462a      	mov	r2, r5
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <_vfiprintf_r+0x258>)
 8006500:	a904      	add	r1, sp, #16
 8006502:	4630      	mov	r0, r6
 8006504:	f7fe f8e0 	bl	80046c8 <_printf_i>
 8006508:	e7e4      	b.n	80064d4 <_vfiprintf_r+0x208>
 800650a:	bf00      	nop
 800650c:	0800716c 	.word	0x0800716c
 8006510:	0800718c 	.word	0x0800718c
 8006514:	0800714c 	.word	0x0800714c
 8006518:	08006ff4 	.word	0x08006ff4
 800651c:	08006ffe 	.word	0x08006ffe
 8006520:	080041b1 	.word	0x080041b1
 8006524:	080062a9 	.word	0x080062a9
 8006528:	08006ffa 	.word	0x08006ffa

0800652c <__swbuf_r>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	460e      	mov	r6, r1
 8006530:	4614      	mov	r4, r2
 8006532:	4605      	mov	r5, r0
 8006534:	b118      	cbz	r0, 800653e <__swbuf_r+0x12>
 8006536:	6983      	ldr	r3, [r0, #24]
 8006538:	b90b      	cbnz	r3, 800653e <__swbuf_r+0x12>
 800653a:	f000 f9e7 	bl	800690c <__sinit>
 800653e:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <__swbuf_r+0x98>)
 8006540:	429c      	cmp	r4, r3
 8006542:	d12b      	bne.n	800659c <__swbuf_r+0x70>
 8006544:	686c      	ldr	r4, [r5, #4]
 8006546:	69a3      	ldr	r3, [r4, #24]
 8006548:	60a3      	str	r3, [r4, #8]
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	071a      	lsls	r2, r3, #28
 800654e:	d52f      	bpl.n	80065b0 <__swbuf_r+0x84>
 8006550:	6923      	ldr	r3, [r4, #16]
 8006552:	b36b      	cbz	r3, 80065b0 <__swbuf_r+0x84>
 8006554:	6923      	ldr	r3, [r4, #16]
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	1ac0      	subs	r0, r0, r3
 800655a:	6963      	ldr	r3, [r4, #20]
 800655c:	b2f6      	uxtb	r6, r6
 800655e:	4283      	cmp	r3, r0
 8006560:	4637      	mov	r7, r6
 8006562:	dc04      	bgt.n	800656e <__swbuf_r+0x42>
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5
 8006568:	f000 f93c 	bl	80067e4 <_fflush_r>
 800656c:	bb30      	cbnz	r0, 80065bc <__swbuf_r+0x90>
 800656e:	68a3      	ldr	r3, [r4, #8]
 8006570:	3b01      	subs	r3, #1
 8006572:	60a3      	str	r3, [r4, #8]
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	701e      	strb	r6, [r3, #0]
 800657c:	6963      	ldr	r3, [r4, #20]
 800657e:	3001      	adds	r0, #1
 8006580:	4283      	cmp	r3, r0
 8006582:	d004      	beq.n	800658e <__swbuf_r+0x62>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	07db      	lsls	r3, r3, #31
 8006588:	d506      	bpl.n	8006598 <__swbuf_r+0x6c>
 800658a:	2e0a      	cmp	r6, #10
 800658c:	d104      	bne.n	8006598 <__swbuf_r+0x6c>
 800658e:	4621      	mov	r1, r4
 8006590:	4628      	mov	r0, r5
 8006592:	f000 f927 	bl	80067e4 <_fflush_r>
 8006596:	b988      	cbnz	r0, 80065bc <__swbuf_r+0x90>
 8006598:	4638      	mov	r0, r7
 800659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <__swbuf_r+0x9c>)
 800659e:	429c      	cmp	r4, r3
 80065a0:	d101      	bne.n	80065a6 <__swbuf_r+0x7a>
 80065a2:	68ac      	ldr	r4, [r5, #8]
 80065a4:	e7cf      	b.n	8006546 <__swbuf_r+0x1a>
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <__swbuf_r+0xa0>)
 80065a8:	429c      	cmp	r4, r3
 80065aa:	bf08      	it	eq
 80065ac:	68ec      	ldreq	r4, [r5, #12]
 80065ae:	e7ca      	b.n	8006546 <__swbuf_r+0x1a>
 80065b0:	4621      	mov	r1, r4
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f81a 	bl	80065ec <__swsetup_r>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d0cb      	beq.n	8006554 <__swbuf_r+0x28>
 80065bc:	f04f 37ff 	mov.w	r7, #4294967295
 80065c0:	e7ea      	b.n	8006598 <__swbuf_r+0x6c>
 80065c2:	bf00      	nop
 80065c4:	0800716c 	.word	0x0800716c
 80065c8:	0800718c 	.word	0x0800718c
 80065cc:	0800714c 	.word	0x0800714c

080065d0 <__ascii_wctomb>:
 80065d0:	b149      	cbz	r1, 80065e6 <__ascii_wctomb+0x16>
 80065d2:	2aff      	cmp	r2, #255	; 0xff
 80065d4:	bf85      	ittet	hi
 80065d6:	238a      	movhi	r3, #138	; 0x8a
 80065d8:	6003      	strhi	r3, [r0, #0]
 80065da:	700a      	strbls	r2, [r1, #0]
 80065dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80065e0:	bf98      	it	ls
 80065e2:	2001      	movls	r0, #1
 80065e4:	4770      	bx	lr
 80065e6:	4608      	mov	r0, r1
 80065e8:	4770      	bx	lr
	...

080065ec <__swsetup_r>:
 80065ec:	4b32      	ldr	r3, [pc, #200]	; (80066b8 <__swsetup_r+0xcc>)
 80065ee:	b570      	push	{r4, r5, r6, lr}
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	4606      	mov	r6, r0
 80065f4:	460c      	mov	r4, r1
 80065f6:	b125      	cbz	r5, 8006602 <__swsetup_r+0x16>
 80065f8:	69ab      	ldr	r3, [r5, #24]
 80065fa:	b913      	cbnz	r3, 8006602 <__swsetup_r+0x16>
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f985 	bl	800690c <__sinit>
 8006602:	4b2e      	ldr	r3, [pc, #184]	; (80066bc <__swsetup_r+0xd0>)
 8006604:	429c      	cmp	r4, r3
 8006606:	d10f      	bne.n	8006628 <__swsetup_r+0x3c>
 8006608:	686c      	ldr	r4, [r5, #4]
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006610:	0719      	lsls	r1, r3, #28
 8006612:	d42c      	bmi.n	800666e <__swsetup_r+0x82>
 8006614:	06dd      	lsls	r5, r3, #27
 8006616:	d411      	bmi.n	800663c <__swsetup_r+0x50>
 8006618:	2309      	movs	r3, #9
 800661a:	6033      	str	r3, [r6, #0]
 800661c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006620:	81a3      	strh	r3, [r4, #12]
 8006622:	f04f 30ff 	mov.w	r0, #4294967295
 8006626:	e03e      	b.n	80066a6 <__swsetup_r+0xba>
 8006628:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <__swsetup_r+0xd4>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d101      	bne.n	8006632 <__swsetup_r+0x46>
 800662e:	68ac      	ldr	r4, [r5, #8]
 8006630:	e7eb      	b.n	800660a <__swsetup_r+0x1e>
 8006632:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <__swsetup_r+0xd8>)
 8006634:	429c      	cmp	r4, r3
 8006636:	bf08      	it	eq
 8006638:	68ec      	ldreq	r4, [r5, #12]
 800663a:	e7e6      	b.n	800660a <__swsetup_r+0x1e>
 800663c:	0758      	lsls	r0, r3, #29
 800663e:	d512      	bpl.n	8006666 <__swsetup_r+0x7a>
 8006640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006642:	b141      	cbz	r1, 8006656 <__swsetup_r+0x6a>
 8006644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006648:	4299      	cmp	r1, r3
 800664a:	d002      	beq.n	8006652 <__swsetup_r+0x66>
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff fb31 	bl	8005cb4 <_free_r>
 8006652:	2300      	movs	r3, #0
 8006654:	6363      	str	r3, [r4, #52]	; 0x34
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800665c:	81a3      	strh	r3, [r4, #12]
 800665e:	2300      	movs	r3, #0
 8006660:	6063      	str	r3, [r4, #4]
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	f043 0308 	orr.w	r3, r3, #8
 800666c:	81a3      	strh	r3, [r4, #12]
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	b94b      	cbnz	r3, 8006686 <__swsetup_r+0x9a>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667c:	d003      	beq.n	8006686 <__swsetup_r+0x9a>
 800667e:	4621      	mov	r1, r4
 8006680:	4630      	mov	r0, r6
 8006682:	f000 fa09 	bl	8006a98 <__smakebuf_r>
 8006686:	89a0      	ldrh	r0, [r4, #12]
 8006688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800668c:	f010 0301 	ands.w	r3, r0, #1
 8006690:	d00a      	beq.n	80066a8 <__swsetup_r+0xbc>
 8006692:	2300      	movs	r3, #0
 8006694:	60a3      	str	r3, [r4, #8]
 8006696:	6963      	ldr	r3, [r4, #20]
 8006698:	425b      	negs	r3, r3
 800669a:	61a3      	str	r3, [r4, #24]
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	b943      	cbnz	r3, 80066b2 <__swsetup_r+0xc6>
 80066a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066a4:	d1ba      	bne.n	800661c <__swsetup_r+0x30>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	0781      	lsls	r1, r0, #30
 80066aa:	bf58      	it	pl
 80066ac:	6963      	ldrpl	r3, [r4, #20]
 80066ae:	60a3      	str	r3, [r4, #8]
 80066b0:	e7f4      	b.n	800669c <__swsetup_r+0xb0>
 80066b2:	2000      	movs	r0, #0
 80066b4:	e7f7      	b.n	80066a6 <__swsetup_r+0xba>
 80066b6:	bf00      	nop
 80066b8:	2000000c 	.word	0x2000000c
 80066bc:	0800716c 	.word	0x0800716c
 80066c0:	0800718c 	.word	0x0800718c
 80066c4:	0800714c 	.word	0x0800714c

080066c8 <abort>:
 80066c8:	b508      	push	{r3, lr}
 80066ca:	2006      	movs	r0, #6
 80066cc:	f000 fa54 	bl	8006b78 <raise>
 80066d0:	2001      	movs	r0, #1
 80066d2:	f7fa fa95 	bl	8000c00 <_exit>
	...

080066d8 <__sflush_r>:
 80066d8:	898a      	ldrh	r2, [r1, #12]
 80066da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	4605      	mov	r5, r0
 80066e0:	0710      	lsls	r0, r2, #28
 80066e2:	460c      	mov	r4, r1
 80066e4:	d458      	bmi.n	8006798 <__sflush_r+0xc0>
 80066e6:	684b      	ldr	r3, [r1, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dc05      	bgt.n	80066f8 <__sflush_r+0x20>
 80066ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dc02      	bgt.n	80066f8 <__sflush_r+0x20>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	d0f9      	beq.n	80066f2 <__sflush_r+0x1a>
 80066fe:	2300      	movs	r3, #0
 8006700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006704:	682f      	ldr	r7, [r5, #0]
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	d032      	beq.n	8006770 <__sflush_r+0x98>
 800670a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	075a      	lsls	r2, r3, #29
 8006710:	d505      	bpl.n	800671e <__sflush_r+0x46>
 8006712:	6863      	ldr	r3, [r4, #4]
 8006714:	1ac0      	subs	r0, r0, r3
 8006716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006718:	b10b      	cbz	r3, 800671e <__sflush_r+0x46>
 800671a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800671c:	1ac0      	subs	r0, r0, r3
 800671e:	2300      	movs	r3, #0
 8006720:	4602      	mov	r2, r0
 8006722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006724:	6a21      	ldr	r1, [r4, #32]
 8006726:	4628      	mov	r0, r5
 8006728:	47b0      	blx	r6
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	d106      	bne.n	800673e <__sflush_r+0x66>
 8006730:	6829      	ldr	r1, [r5, #0]
 8006732:	291d      	cmp	r1, #29
 8006734:	d82c      	bhi.n	8006790 <__sflush_r+0xb8>
 8006736:	4a2a      	ldr	r2, [pc, #168]	; (80067e0 <__sflush_r+0x108>)
 8006738:	40ca      	lsrs	r2, r1
 800673a:	07d6      	lsls	r6, r2, #31
 800673c:	d528      	bpl.n	8006790 <__sflush_r+0xb8>
 800673e:	2200      	movs	r2, #0
 8006740:	6062      	str	r2, [r4, #4]
 8006742:	04d9      	lsls	r1, r3, #19
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	6022      	str	r2, [r4, #0]
 8006748:	d504      	bpl.n	8006754 <__sflush_r+0x7c>
 800674a:	1c42      	adds	r2, r0, #1
 800674c:	d101      	bne.n	8006752 <__sflush_r+0x7a>
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	b903      	cbnz	r3, 8006754 <__sflush_r+0x7c>
 8006752:	6560      	str	r0, [r4, #84]	; 0x54
 8006754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006756:	602f      	str	r7, [r5, #0]
 8006758:	2900      	cmp	r1, #0
 800675a:	d0ca      	beq.n	80066f2 <__sflush_r+0x1a>
 800675c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006760:	4299      	cmp	r1, r3
 8006762:	d002      	beq.n	800676a <__sflush_r+0x92>
 8006764:	4628      	mov	r0, r5
 8006766:	f7ff faa5 	bl	8005cb4 <_free_r>
 800676a:	2000      	movs	r0, #0
 800676c:	6360      	str	r0, [r4, #52]	; 0x34
 800676e:	e7c1      	b.n	80066f4 <__sflush_r+0x1c>
 8006770:	6a21      	ldr	r1, [r4, #32]
 8006772:	2301      	movs	r3, #1
 8006774:	4628      	mov	r0, r5
 8006776:	47b0      	blx	r6
 8006778:	1c41      	adds	r1, r0, #1
 800677a:	d1c7      	bne.n	800670c <__sflush_r+0x34>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0c4      	beq.n	800670c <__sflush_r+0x34>
 8006782:	2b1d      	cmp	r3, #29
 8006784:	d001      	beq.n	800678a <__sflush_r+0xb2>
 8006786:	2b16      	cmp	r3, #22
 8006788:	d101      	bne.n	800678e <__sflush_r+0xb6>
 800678a:	602f      	str	r7, [r5, #0]
 800678c:	e7b1      	b.n	80066f2 <__sflush_r+0x1a>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	e7ad      	b.n	80066f4 <__sflush_r+0x1c>
 8006798:	690f      	ldr	r7, [r1, #16]
 800679a:	2f00      	cmp	r7, #0
 800679c:	d0a9      	beq.n	80066f2 <__sflush_r+0x1a>
 800679e:	0793      	lsls	r3, r2, #30
 80067a0:	680e      	ldr	r6, [r1, #0]
 80067a2:	bf08      	it	eq
 80067a4:	694b      	ldreq	r3, [r1, #20]
 80067a6:	600f      	str	r7, [r1, #0]
 80067a8:	bf18      	it	ne
 80067aa:	2300      	movne	r3, #0
 80067ac:	eba6 0807 	sub.w	r8, r6, r7
 80067b0:	608b      	str	r3, [r1, #8]
 80067b2:	f1b8 0f00 	cmp.w	r8, #0
 80067b6:	dd9c      	ble.n	80066f2 <__sflush_r+0x1a>
 80067b8:	6a21      	ldr	r1, [r4, #32]
 80067ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067bc:	4643      	mov	r3, r8
 80067be:	463a      	mov	r2, r7
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b0      	blx	r6
 80067c4:	2800      	cmp	r0, #0
 80067c6:	dc06      	bgt.n	80067d6 <__sflush_r+0xfe>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e78e      	b.n	80066f4 <__sflush_r+0x1c>
 80067d6:	4407      	add	r7, r0
 80067d8:	eba8 0800 	sub.w	r8, r8, r0
 80067dc:	e7e9      	b.n	80067b2 <__sflush_r+0xda>
 80067de:	bf00      	nop
 80067e0:	20400001 	.word	0x20400001

080067e4 <_fflush_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	b913      	cbnz	r3, 80067f4 <_fflush_r+0x10>
 80067ee:	2500      	movs	r5, #0
 80067f0:	4628      	mov	r0, r5
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	b118      	cbz	r0, 80067fe <_fflush_r+0x1a>
 80067f6:	6983      	ldr	r3, [r0, #24]
 80067f8:	b90b      	cbnz	r3, 80067fe <_fflush_r+0x1a>
 80067fa:	f000 f887 	bl	800690c <__sinit>
 80067fe:	4b14      	ldr	r3, [pc, #80]	; (8006850 <_fflush_r+0x6c>)
 8006800:	429c      	cmp	r4, r3
 8006802:	d11b      	bne.n	800683c <_fflush_r+0x58>
 8006804:	686c      	ldr	r4, [r5, #4]
 8006806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ef      	beq.n	80067ee <_fflush_r+0xa>
 800680e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006810:	07d0      	lsls	r0, r2, #31
 8006812:	d404      	bmi.n	800681e <_fflush_r+0x3a>
 8006814:	0599      	lsls	r1, r3, #22
 8006816:	d402      	bmi.n	800681e <_fflush_r+0x3a>
 8006818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681a:	f000 f915 	bl	8006a48 <__retarget_lock_acquire_recursive>
 800681e:	4628      	mov	r0, r5
 8006820:	4621      	mov	r1, r4
 8006822:	f7ff ff59 	bl	80066d8 <__sflush_r>
 8006826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006828:	07da      	lsls	r2, r3, #31
 800682a:	4605      	mov	r5, r0
 800682c:	d4e0      	bmi.n	80067f0 <_fflush_r+0xc>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	059b      	lsls	r3, r3, #22
 8006832:	d4dd      	bmi.n	80067f0 <_fflush_r+0xc>
 8006834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006836:	f000 f908 	bl	8006a4a <__retarget_lock_release_recursive>
 800683a:	e7d9      	b.n	80067f0 <_fflush_r+0xc>
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <_fflush_r+0x70>)
 800683e:	429c      	cmp	r4, r3
 8006840:	d101      	bne.n	8006846 <_fflush_r+0x62>
 8006842:	68ac      	ldr	r4, [r5, #8]
 8006844:	e7df      	b.n	8006806 <_fflush_r+0x22>
 8006846:	4b04      	ldr	r3, [pc, #16]	; (8006858 <_fflush_r+0x74>)
 8006848:	429c      	cmp	r4, r3
 800684a:	bf08      	it	eq
 800684c:	68ec      	ldreq	r4, [r5, #12]
 800684e:	e7da      	b.n	8006806 <_fflush_r+0x22>
 8006850:	0800716c 	.word	0x0800716c
 8006854:	0800718c 	.word	0x0800718c
 8006858:	0800714c 	.word	0x0800714c

0800685c <std>:
 800685c:	2300      	movs	r3, #0
 800685e:	b510      	push	{r4, lr}
 8006860:	4604      	mov	r4, r0
 8006862:	e9c0 3300 	strd	r3, r3, [r0]
 8006866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800686a:	6083      	str	r3, [r0, #8]
 800686c:	8181      	strh	r1, [r0, #12]
 800686e:	6643      	str	r3, [r0, #100]	; 0x64
 8006870:	81c2      	strh	r2, [r0, #14]
 8006872:	6183      	str	r3, [r0, #24]
 8006874:	4619      	mov	r1, r3
 8006876:	2208      	movs	r2, #8
 8006878:	305c      	adds	r0, #92	; 0x5c
 800687a:	f7fd fc01 	bl	8004080 <memset>
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <std+0x38>)
 8006880:	6263      	str	r3, [r4, #36]	; 0x24
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <std+0x3c>)
 8006884:	62a3      	str	r3, [r4, #40]	; 0x28
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <std+0x40>)
 8006888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <std+0x44>)
 800688c:	6224      	str	r4, [r4, #32]
 800688e:	6323      	str	r3, [r4, #48]	; 0x30
 8006890:	bd10      	pop	{r4, pc}
 8006892:	bf00      	nop
 8006894:	08006bb1 	.word	0x08006bb1
 8006898:	08006bd3 	.word	0x08006bd3
 800689c:	08006c0b 	.word	0x08006c0b
 80068a0:	08006c2f 	.word	0x08006c2f

080068a4 <_cleanup_r>:
 80068a4:	4901      	ldr	r1, [pc, #4]	; (80068ac <_cleanup_r+0x8>)
 80068a6:	f000 b8af 	b.w	8006a08 <_fwalk_reent>
 80068aa:	bf00      	nop
 80068ac:	080067e5 	.word	0x080067e5

080068b0 <__sfmoreglue>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	2268      	movs	r2, #104	; 0x68
 80068b4:	1e4d      	subs	r5, r1, #1
 80068b6:	4355      	muls	r5, r2
 80068b8:	460e      	mov	r6, r1
 80068ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068be:	f7ff fa65 	bl	8005d8c <_malloc_r>
 80068c2:	4604      	mov	r4, r0
 80068c4:	b140      	cbz	r0, 80068d8 <__sfmoreglue+0x28>
 80068c6:	2100      	movs	r1, #0
 80068c8:	e9c0 1600 	strd	r1, r6, [r0]
 80068cc:	300c      	adds	r0, #12
 80068ce:	60a0      	str	r0, [r4, #8]
 80068d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068d4:	f7fd fbd4 	bl	8004080 <memset>
 80068d8:	4620      	mov	r0, r4
 80068da:	bd70      	pop	{r4, r5, r6, pc}

080068dc <__sfp_lock_acquire>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__sfp_lock_acquire+0x8>)
 80068de:	f000 b8b3 	b.w	8006a48 <__retarget_lock_acquire_recursive>
 80068e2:	bf00      	nop
 80068e4:	20000359 	.word	0x20000359

080068e8 <__sfp_lock_release>:
 80068e8:	4801      	ldr	r0, [pc, #4]	; (80068f0 <__sfp_lock_release+0x8>)
 80068ea:	f000 b8ae 	b.w	8006a4a <__retarget_lock_release_recursive>
 80068ee:	bf00      	nop
 80068f0:	20000359 	.word	0x20000359

080068f4 <__sinit_lock_acquire>:
 80068f4:	4801      	ldr	r0, [pc, #4]	; (80068fc <__sinit_lock_acquire+0x8>)
 80068f6:	f000 b8a7 	b.w	8006a48 <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	2000035a 	.word	0x2000035a

08006900 <__sinit_lock_release>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__sinit_lock_release+0x8>)
 8006902:	f000 b8a2 	b.w	8006a4a <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	2000035a 	.word	0x2000035a

0800690c <__sinit>:
 800690c:	b510      	push	{r4, lr}
 800690e:	4604      	mov	r4, r0
 8006910:	f7ff fff0 	bl	80068f4 <__sinit_lock_acquire>
 8006914:	69a3      	ldr	r3, [r4, #24]
 8006916:	b11b      	cbz	r3, 8006920 <__sinit+0x14>
 8006918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691c:	f7ff bff0 	b.w	8006900 <__sinit_lock_release>
 8006920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006924:	6523      	str	r3, [r4, #80]	; 0x50
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <__sinit+0x68>)
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <__sinit+0x6c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	62a2      	str	r2, [r4, #40]	; 0x28
 800692e:	42a3      	cmp	r3, r4
 8006930:	bf04      	itt	eq
 8006932:	2301      	moveq	r3, #1
 8006934:	61a3      	streq	r3, [r4, #24]
 8006936:	4620      	mov	r0, r4
 8006938:	f000 f820 	bl	800697c <__sfp>
 800693c:	6060      	str	r0, [r4, #4]
 800693e:	4620      	mov	r0, r4
 8006940:	f000 f81c 	bl	800697c <__sfp>
 8006944:	60a0      	str	r0, [r4, #8]
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f818 	bl	800697c <__sfp>
 800694c:	2200      	movs	r2, #0
 800694e:	60e0      	str	r0, [r4, #12]
 8006950:	2104      	movs	r1, #4
 8006952:	6860      	ldr	r0, [r4, #4]
 8006954:	f7ff ff82 	bl	800685c <std>
 8006958:	68a0      	ldr	r0, [r4, #8]
 800695a:	2201      	movs	r2, #1
 800695c:	2109      	movs	r1, #9
 800695e:	f7ff ff7d 	bl	800685c <std>
 8006962:	68e0      	ldr	r0, [r4, #12]
 8006964:	2202      	movs	r2, #2
 8006966:	2112      	movs	r1, #18
 8006968:	f7ff ff78 	bl	800685c <std>
 800696c:	2301      	movs	r3, #1
 800696e:	61a3      	str	r3, [r4, #24]
 8006970:	e7d2      	b.n	8006918 <__sinit+0xc>
 8006972:	bf00      	nop
 8006974:	08006dd0 	.word	0x08006dd0
 8006978:	080068a5 	.word	0x080068a5

0800697c <__sfp>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	4607      	mov	r7, r0
 8006980:	f7ff ffac 	bl	80068dc <__sfp_lock_acquire>
 8006984:	4b1e      	ldr	r3, [pc, #120]	; (8006a00 <__sfp+0x84>)
 8006986:	681e      	ldr	r6, [r3, #0]
 8006988:	69b3      	ldr	r3, [r6, #24]
 800698a:	b913      	cbnz	r3, 8006992 <__sfp+0x16>
 800698c:	4630      	mov	r0, r6
 800698e:	f7ff ffbd 	bl	800690c <__sinit>
 8006992:	3648      	adds	r6, #72	; 0x48
 8006994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006998:	3b01      	subs	r3, #1
 800699a:	d503      	bpl.n	80069a4 <__sfp+0x28>
 800699c:	6833      	ldr	r3, [r6, #0]
 800699e:	b30b      	cbz	r3, 80069e4 <__sfp+0x68>
 80069a0:	6836      	ldr	r6, [r6, #0]
 80069a2:	e7f7      	b.n	8006994 <__sfp+0x18>
 80069a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069a8:	b9d5      	cbnz	r5, 80069e0 <__sfp+0x64>
 80069aa:	4b16      	ldr	r3, [pc, #88]	; (8006a04 <__sfp+0x88>)
 80069ac:	60e3      	str	r3, [r4, #12]
 80069ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069b2:	6665      	str	r5, [r4, #100]	; 0x64
 80069b4:	f000 f847 	bl	8006a46 <__retarget_lock_init_recursive>
 80069b8:	f7ff ff96 	bl	80068e8 <__sfp_lock_release>
 80069bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069c4:	6025      	str	r5, [r4, #0]
 80069c6:	61a5      	str	r5, [r4, #24]
 80069c8:	2208      	movs	r2, #8
 80069ca:	4629      	mov	r1, r5
 80069cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069d0:	f7fd fb56 	bl	8004080 <memset>
 80069d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069dc:	4620      	mov	r0, r4
 80069de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e0:	3468      	adds	r4, #104	; 0x68
 80069e2:	e7d9      	b.n	8006998 <__sfp+0x1c>
 80069e4:	2104      	movs	r1, #4
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7ff ff62 	bl	80068b0 <__sfmoreglue>
 80069ec:	4604      	mov	r4, r0
 80069ee:	6030      	str	r0, [r6, #0]
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d1d5      	bne.n	80069a0 <__sfp+0x24>
 80069f4:	f7ff ff78 	bl	80068e8 <__sfp_lock_release>
 80069f8:	230c      	movs	r3, #12
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	e7ee      	b.n	80069dc <__sfp+0x60>
 80069fe:	bf00      	nop
 8006a00:	08006dd0 	.word	0x08006dd0
 8006a04:	ffff0001 	.word	0xffff0001

08006a08 <_fwalk_reent>:
 8006a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	4688      	mov	r8, r1
 8006a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a14:	2700      	movs	r7, #0
 8006a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a1e:	d505      	bpl.n	8006a2c <_fwalk_reent+0x24>
 8006a20:	6824      	ldr	r4, [r4, #0]
 8006a22:	2c00      	cmp	r4, #0
 8006a24:	d1f7      	bne.n	8006a16 <_fwalk_reent+0xe>
 8006a26:	4638      	mov	r0, r7
 8006a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2c:	89ab      	ldrh	r3, [r5, #12]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d907      	bls.n	8006a42 <_fwalk_reent+0x3a>
 8006a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a36:	3301      	adds	r3, #1
 8006a38:	d003      	beq.n	8006a42 <_fwalk_reent+0x3a>
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	47c0      	blx	r8
 8006a40:	4307      	orrs	r7, r0
 8006a42:	3568      	adds	r5, #104	; 0x68
 8006a44:	e7e9      	b.n	8006a1a <_fwalk_reent+0x12>

08006a46 <__retarget_lock_init_recursive>:
 8006a46:	4770      	bx	lr

08006a48 <__retarget_lock_acquire_recursive>:
 8006a48:	4770      	bx	lr

08006a4a <__retarget_lock_release_recursive>:
 8006a4a:	4770      	bx	lr

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460e      	mov	r6, r1
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	b096      	sub	sp, #88	; 0x58
 8006a58:	4614      	mov	r4, r2
 8006a5a:	461d      	mov	r5, r3
 8006a5c:	da08      	bge.n	8006a70 <__swhatbuf_r+0x24>
 8006a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	061a      	lsls	r2, r3, #24
 8006a68:	d410      	bmi.n	8006a8c <__swhatbuf_r+0x40>
 8006a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6e:	e00e      	b.n	8006a8e <__swhatbuf_r+0x42>
 8006a70:	466a      	mov	r2, sp
 8006a72:	f000 f903 	bl	8006c7c <_fstat_r>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	dbf1      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a84:	425a      	negs	r2, r3
 8006a86:	415a      	adcs	r2, r3
 8006a88:	602a      	str	r2, [r5, #0]
 8006a8a:	e7ee      	b.n	8006a6a <__swhatbuf_r+0x1e>
 8006a8c:	2340      	movs	r3, #64	; 0x40
 8006a8e:	2000      	movs	r0, #0
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	b016      	add	sp, #88	; 0x58
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a98 <__smakebuf_r>:
 8006a98:	898b      	ldrh	r3, [r1, #12]
 8006a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a9c:	079d      	lsls	r5, r3, #30
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	d507      	bpl.n	8006ab4 <__smakebuf_r+0x1c>
 8006aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	2301      	movs	r3, #1
 8006aae:	6163      	str	r3, [r4, #20]
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	ab01      	add	r3, sp, #4
 8006ab6:	466a      	mov	r2, sp
 8006ab8:	f7ff ffc8 	bl	8006a4c <__swhatbuf_r>
 8006abc:	9900      	ldr	r1, [sp, #0]
 8006abe:	4605      	mov	r5, r0
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff f963 	bl	8005d8c <_malloc_r>
 8006ac6:	b948      	cbnz	r0, 8006adc <__smakebuf_r+0x44>
 8006ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006acc:	059a      	lsls	r2, r3, #22
 8006ace:	d4ef      	bmi.n	8006ab0 <__smakebuf_r+0x18>
 8006ad0:	f023 0303 	bic.w	r3, r3, #3
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	e7e3      	b.n	8006aa4 <__smakebuf_r+0xc>
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <__smakebuf_r+0x7c>)
 8006ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	6020      	str	r0, [r4, #0]
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	6163      	str	r3, [r4, #20]
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	6120      	str	r0, [r4, #16]
 8006af2:	b15b      	cbz	r3, 8006b0c <__smakebuf_r+0x74>
 8006af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 f8d1 	bl	8006ca0 <_isatty_r>
 8006afe:	b128      	cbz	r0, 8006b0c <__smakebuf_r+0x74>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	89a0      	ldrh	r0, [r4, #12]
 8006b0e:	4305      	orrs	r5, r0
 8006b10:	81a5      	strh	r5, [r4, #12]
 8006b12:	e7cd      	b.n	8006ab0 <__smakebuf_r+0x18>
 8006b14:	080068a5 	.word	0x080068a5

08006b18 <_malloc_usable_size_r>:
 8006b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1c:	1f18      	subs	r0, r3, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bfbc      	itt	lt
 8006b22:	580b      	ldrlt	r3, [r1, r0]
 8006b24:	18c0      	addlt	r0, r0, r3
 8006b26:	4770      	bx	lr

08006b28 <_raise_r>:
 8006b28:	291f      	cmp	r1, #31
 8006b2a:	b538      	push	{r3, r4, r5, lr}
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	d904      	bls.n	8006b3c <_raise_r+0x14>
 8006b32:	2316      	movs	r3, #22
 8006b34:	6003      	str	r3, [r0, #0]
 8006b36:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b3e:	b112      	cbz	r2, 8006b46 <_raise_r+0x1e>
 8006b40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b44:	b94b      	cbnz	r3, 8006b5a <_raise_r+0x32>
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 f830 	bl	8006bac <_getpid_r>
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4601      	mov	r1, r0
 8006b50:	4620      	mov	r0, r4
 8006b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b56:	f000 b817 	b.w	8006b88 <_kill_r>
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d00a      	beq.n	8006b74 <_raise_r+0x4c>
 8006b5e:	1c59      	adds	r1, r3, #1
 8006b60:	d103      	bne.n	8006b6a <_raise_r+0x42>
 8006b62:	2316      	movs	r3, #22
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	2001      	movs	r0, #1
 8006b68:	e7e7      	b.n	8006b3a <_raise_r+0x12>
 8006b6a:	2400      	movs	r4, #0
 8006b6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b70:	4628      	mov	r0, r5
 8006b72:	4798      	blx	r3
 8006b74:	2000      	movs	r0, #0
 8006b76:	e7e0      	b.n	8006b3a <_raise_r+0x12>

08006b78 <raise>:
 8006b78:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <raise+0xc>)
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	f7ff bfd3 	b.w	8006b28 <_raise_r>
 8006b82:	bf00      	nop
 8006b84:	2000000c 	.word	0x2000000c

08006b88 <_kill_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d07      	ldr	r5, [pc, #28]	; (8006ba8 <_kill_r+0x20>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	f7fa f823 	bl	8000be0 <_kill>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	d102      	bne.n	8006ba4 <_kill_r+0x1c>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	b103      	cbz	r3, 8006ba4 <_kill_r+0x1c>
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	bd38      	pop	{r3, r4, r5, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000354 	.word	0x20000354

08006bac <_getpid_r>:
 8006bac:	f7fa b810 	b.w	8000bd0 <_getpid>

08006bb0 <__sread>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb8:	f000 f894 	bl	8006ce4 <_read_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	bfab      	itete	ge
 8006bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc4:	181b      	addge	r3, r3, r0
 8006bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bca:	bfac      	ite	ge
 8006bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bce:	81a3      	strhlt	r3, [r4, #12]
 8006bd0:	bd10      	pop	{r4, pc}

08006bd2 <__swrite>:
 8006bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	461f      	mov	r7, r3
 8006bd8:	898b      	ldrh	r3, [r1, #12]
 8006bda:	05db      	lsls	r3, r3, #23
 8006bdc:	4605      	mov	r5, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	4616      	mov	r6, r2
 8006be2:	d505      	bpl.n	8006bf0 <__swrite+0x1e>
 8006be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be8:	2302      	movs	r3, #2
 8006bea:	2200      	movs	r2, #0
 8006bec:	f000 f868 	bl	8006cc0 <_lseek_r>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	463b      	mov	r3, r7
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c06:	f000 b817 	b.w	8006c38 <_write_r>

08006c0a <__sseek>:
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 f855 	bl	8006cc0 <_lseek_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	bf15      	itete	ne
 8006c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c26:	81a3      	strheq	r3, [r4, #12]
 8006c28:	bf18      	it	ne
 8006c2a:	81a3      	strhne	r3, [r4, #12]
 8006c2c:	bd10      	pop	{r4, pc}

08006c2e <__sclose>:
 8006c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c32:	f000 b813 	b.w	8006c5c <_close_r>
	...

08006c38 <_write_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d07      	ldr	r5, [pc, #28]	; (8006c58 <_write_r+0x20>)
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	4608      	mov	r0, r1
 8006c40:	4611      	mov	r1, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	602a      	str	r2, [r5, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	f7fa f801 	bl	8000c4e <_write>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_write_r+0x1e>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_write_r+0x1e>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20000354 	.word	0x20000354

08006c5c <_close_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d06      	ldr	r5, [pc, #24]	; (8006c78 <_close_r+0x1c>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	f7fa f80d 	bl	8000c86 <_close>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_close_r+0x1a>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_close_r+0x1a>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	20000354 	.word	0x20000354

08006c7c <_fstat_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d07      	ldr	r5, [pc, #28]	; (8006c9c <_fstat_r+0x20>)
 8006c80:	2300      	movs	r3, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	4611      	mov	r1, r2
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	f7fa f808 	bl	8000c9e <_fstat>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	d102      	bne.n	8006c98 <_fstat_r+0x1c>
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	b103      	cbz	r3, 8006c98 <_fstat_r+0x1c>
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000354 	.word	0x20000354

08006ca0 <_isatty_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	; (8006cbc <_isatty_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa f807 	bl	8000cbe <_isatty>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_isatty_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_isatty_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20000354 	.word	0x20000354

08006cc0 <_lseek_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d07      	ldr	r5, [pc, #28]	; (8006ce0 <_lseek_r+0x20>)
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4611      	mov	r1, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	602a      	str	r2, [r5, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f7fa f800 	bl	8000cd4 <_lseek>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_lseek_r+0x1e>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_lseek_r+0x1e>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20000354 	.word	0x20000354

08006ce4 <_read_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d07      	ldr	r5, [pc, #28]	; (8006d04 <_read_r+0x20>)
 8006ce8:	4604      	mov	r4, r0
 8006cea:	4608      	mov	r0, r1
 8006cec:	4611      	mov	r1, r2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	602a      	str	r2, [r5, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f7f9 ff8e 	bl	8000c14 <_read>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d102      	bne.n	8006d02 <_read_r+0x1e>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	b103      	cbz	r3, 8006d02 <_read_r+0x1e>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	20000354 	.word	0x20000354

08006d08 <_init>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr

08006d14 <_fini>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr
