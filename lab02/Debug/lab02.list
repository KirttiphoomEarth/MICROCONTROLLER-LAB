
lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b84  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d8c  08001d8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d8c  08001d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d94  08001d94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001da8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001da8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bd1  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001061  00000000  00000000  00024c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  00025c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00026108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025379  00000000  00000000  00026508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005595  00000000  00000000  0004b881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76da  00000000  00000000  00050e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001384f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001090  00000000  00000000  00138540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001d64 	.word	0x08001d64

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001d64 	.word	0x08001d64

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000542:	f000 fbee 	bl	8000d22 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000546:	f000 fa07 	bl	8000958 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800054a:	f000 fa73 	bl	8000a34 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	48af      	ldr	r0, [pc, #700]	; (8000814 <main+0x2d8>)
 8000556:	f000 ff0f 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	48ad      	ldr	r0, [pc, #692]	; (8000818 <main+0x2dc>)
 8000562:	f000 ff09 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056c:	48aa      	ldr	r0, [pc, #680]	; (8000818 <main+0x2dc>)
 800056e:	f000 ff03 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	48a6      	ldr	r0, [pc, #664]	; (8000814 <main+0x2d8>)
 800057a:	f000 fefd 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	48a4      	ldr	r0, [pc, #656]	; (8000818 <main+0x2dc>)
 8000586:	f000 fef7 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	48a0      	ldr	r0, [pc, #640]	; (8000814 <main+0x2d8>)
 8000592:	f000 fef1 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059c:	489f      	ldr	r0, [pc, #636]	; (800081c <main+0x2e0>)
 800059e:	f000 feeb 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	489c      	ldr	r0, [pc, #624]	; (800081c <main+0x2e0>)
 80005aa:	f000 fee5 	bl	8001378 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, num1 = GPIO_PIN_RESET);
//		  HAL_Delay(1000);
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//		  num1 = 1;
//	  }
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80005ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b2:	489b      	ldr	r0, [pc, #620]	; (8000820 <main+0x2e4>)
 80005b4:	f000 fec8 	bl	8001348 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	f040 80b2 	bne.w	8000724 <main+0x1e8>

			if (num1 == 0) {
 80005c0:	4b98      	ldr	r3, [pc, #608]	; (8000824 <main+0x2e8>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10e      	bne.n	80005e6 <main+0xaa>
				LEDlight(0, 1, 1, 1, 1, 1, 1, 1);
 80005c8:	2301      	movs	r3, #1
 80005ca:	9303      	str	r3, [sp, #12]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2201      	movs	r2, #1
 80005dc:	2101      	movs	r1, #1
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f962 	bl	80008a8 <LEDlight>
 80005e4:	e083      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 1) {
 80005e6:	4b8f      	ldr	r3, [pc, #572]	; (8000824 <main+0x2e8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10e      	bne.n	800060c <main+0xd0>
				LEDlight(1, 0, 1, 1, 1, 1, 1, 1);
 80005ee:	2301      	movs	r3, #1
 80005f0:	9303      	str	r3, [sp, #12]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	2201      	movs	r2, #1
 8000602:	2100      	movs	r1, #0
 8000604:	2001      	movs	r0, #1
 8000606:	f000 f94f 	bl	80008a8 <LEDlight>
 800060a:	e070      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 2) {
 800060c:	4b85      	ldr	r3, [pc, #532]	; (8000824 <main+0x2e8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d10e      	bne.n	8000632 <main+0xf6>
				LEDlight(1, 1, 0, 1, 1, 1, 1, 1);
 8000614:	2301      	movs	r3, #1
 8000616:	9303      	str	r3, [sp, #12]
 8000618:	2301      	movs	r3, #1
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	2301      	movs	r3, #1
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2301      	movs	r3, #1
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	2001      	movs	r0, #1
 800062c:	f000 f93c 	bl	80008a8 <LEDlight>
 8000630:	e05d      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 3) {
 8000632:	4b7c      	ldr	r3, [pc, #496]	; (8000824 <main+0x2e8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d10e      	bne.n	8000658 <main+0x11c>
				LEDlight(1, 1, 1, 0, 1, 1, 1, 1);
 800063a:	2301      	movs	r3, #1
 800063c:	9303      	str	r3, [sp, #12]
 800063e:	2301      	movs	r3, #1
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2301      	movs	r3, #1
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	2001      	movs	r0, #1
 8000652:	f000 f929 	bl	80008a8 <LEDlight>
 8000656:	e04a      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 4) {
 8000658:	4b72      	ldr	r3, [pc, #456]	; (8000824 <main+0x2e8>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d10e      	bne.n	800067e <main+0x142>
				LEDlight(1, 1, 1, 1, 0, 1, 1, 1);
 8000660:	2301      	movs	r3, #1
 8000662:	9303      	str	r3, [sp, #12]
 8000664:	2301      	movs	r3, #1
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	2301      	movs	r3, #1
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2300      	movs	r3, #0
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f916 	bl	80008a8 <LEDlight>
 800067c:	e037      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 5) {
 800067e:	4b69      	ldr	r3, [pc, #420]	; (8000824 <main+0x2e8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b05      	cmp	r3, #5
 8000684:	d10e      	bne.n	80006a4 <main+0x168>
				LEDlight(1, 1, 1, 1, 1, 0, 1, 1);
 8000686:	2301      	movs	r3, #1
 8000688:	9303      	str	r3, [sp, #12]
 800068a:	2301      	movs	r3, #1
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	2201      	movs	r2, #1
 800069a:	2101      	movs	r1, #1
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f903 	bl	80008a8 <LEDlight>
 80006a2:	e024      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 6) {
 80006a4:	4b5f      	ldr	r3, [pc, #380]	; (8000824 <main+0x2e8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d10e      	bne.n	80006ca <main+0x18e>
				LEDlight(1, 1, 1, 1, 1, 1, 0, 1);
 80006ac:	2301      	movs	r3, #1
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	2300      	movs	r3, #0
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	2201      	movs	r2, #1
 80006c0:	2101      	movs	r1, #1
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f8f0 	bl	80008a8 <LEDlight>
 80006c8:	e011      	b.n	80006ee <main+0x1b2>
			} else if (num1 == 7) {
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <main+0x2e8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b07      	cmp	r3, #7
 80006d0:	d10d      	bne.n	80006ee <main+0x1b2>
				LEDlight(1, 1, 1, 1, 1, 1, 1, 0);
 80006d2:	2300      	movs	r3, #0
 80006d4:	9303      	str	r3, [sp, #12]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	2201      	movs	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 f8dd 	bl	80008a8 <LEDlight>
			}
			num1++;
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <main+0x2e8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <main+0x2e8>)
 80006f8:	701a      	strb	r2, [r3, #0]
			if(num1 > 7){
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <main+0x2e8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	d910      	bls.n	8000724 <main+0x1e8>
				num1 = 0;
 8000702:	4b48      	ldr	r3, [pc, #288]	; (8000824 <main+0x2e8>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
				LEDlight(0, 1, 1, 1, 1, 1, 1, 1);
 8000708:	2301      	movs	r3, #1
 800070a:	9303      	str	r3, [sp, #12]
 800070c:	2301      	movs	r3, #1
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	2301      	movs	r3, #1
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	2201      	movs	r2, #1
 800071c:	2101      	movs	r1, #1
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f8c2 	bl	80008a8 <LEDlight>
			}

		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000724:	2101      	movs	r1, #1
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <main+0x2ec>)
 8000728:	f000 fe0e 	bl	8001348 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	f47f af3d 	bne.w	80005ae <main+0x72>

			for (uint8_t i = 0; i <= 8; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	e0b0      	b.n	800089c <main+0x360>
				if (i == 0) {
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10e      	bne.n	800075e <main+0x222>
					LEDlight(1, 1, 1, 1, 1, 1, 1, 0);
 8000740:	2300      	movs	r3, #0
 8000742:	9303      	str	r3, [sp, #12]
 8000744:	2301      	movs	r3, #1
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	2301      	movs	r3, #1
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	2201      	movs	r2, #1
 8000754:	2101      	movs	r1, #1
 8000756:	2001      	movs	r0, #1
 8000758:	f000 f8a6 	bl	80008a8 <LEDlight>
 800075c:	e09b      	b.n	8000896 <main+0x35a>
				} else if (i == 1) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d10e      	bne.n	8000782 <main+0x246>
					LEDlight(1, 1, 1, 1, 1, 1, 0, 1);
 8000764:	2301      	movs	r3, #1
 8000766:	9303      	str	r3, [sp, #12]
 8000768:	2300      	movs	r3, #0
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	2301      	movs	r3, #1
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2301      	movs	r3, #1
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2301      	movs	r3, #1
 8000776:	2201      	movs	r2, #1
 8000778:	2101      	movs	r1, #1
 800077a:	2001      	movs	r0, #1
 800077c:	f000 f894 	bl	80008a8 <LEDlight>
 8000780:	e089      	b.n	8000896 <main+0x35a>
				} else if (i == 2) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d10e      	bne.n	80007a6 <main+0x26a>
					LEDlight(1, 1, 1, 1, 1, 0, 1, 1);
 8000788:	2301      	movs	r3, #1
 800078a:	9303      	str	r3, [sp, #12]
 800078c:	2301      	movs	r3, #1
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2300      	movs	r3, #0
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	2301      	movs	r3, #1
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 f882 	bl	80008a8 <LEDlight>
 80007a4:	e077      	b.n	8000896 <main+0x35a>
				} else if (i == 3) {
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d10e      	bne.n	80007ca <main+0x28e>
					LEDlight(1, 1, 1, 1, 0, 1, 1, 1);
 80007ac:	2301      	movs	r3, #1
 80007ae:	9303      	str	r3, [sp, #12]
 80007b0:	2301      	movs	r3, #1
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	2301      	movs	r3, #1
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	2300      	movs	r3, #0
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	2201      	movs	r2, #1
 80007c0:	2101      	movs	r1, #1
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 f870 	bl	80008a8 <LEDlight>
 80007c8:	e065      	b.n	8000896 <main+0x35a>
				} else if (i == 4) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d10e      	bne.n	80007ee <main+0x2b2>
					LEDlight(1, 1, 1, 0, 1, 1, 1, 1);
 80007d0:	2301      	movs	r3, #1
 80007d2:	9303      	str	r3, [sp, #12]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	2301      	movs	r3, #1
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2301      	movs	r3, #1
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	2201      	movs	r2, #1
 80007e4:	2101      	movs	r1, #1
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 f85e 	bl	80008a8 <LEDlight>
 80007ec:	e053      	b.n	8000896 <main+0x35a>
				} else if (i == 5) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	d11b      	bne.n	800082c <main+0x2f0>
					LEDlight(1, 1, 0, 1, 1, 1, 1, 1);
 80007f4:	2301      	movs	r3, #1
 80007f6:	9303      	str	r3, [sp, #12]
 80007f8:	2301      	movs	r3, #1
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	2301      	movs	r3, #1
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f84c 	bl	80008a8 <LEDlight>
 8000810:	e041      	b.n	8000896 <main+0x35a>
 8000812:	bf00      	nop
 8000814:	40021400 	.word	0x40021400
 8000818:	40021000 	.word	0x40021000
 800081c:	40021800 	.word	0x40021800
 8000820:	40020800 	.word	0x40020800
 8000824:	20000028 	.word	0x20000028
 8000828:	40020000 	.word	0x40020000
				} else if (i == 6) {
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b06      	cmp	r3, #6
 8000830:	d10e      	bne.n	8000850 <main+0x314>
					LEDlight(1, 0, 1, 1, 1, 1, 1, 1);
 8000832:	2301      	movs	r3, #1
 8000834:	9303      	str	r3, [sp, #12]
 8000836:	2301      	movs	r3, #1
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2301      	movs	r3, #1
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	2301      	movs	r3, #1
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	2201      	movs	r2, #1
 8000846:	2100      	movs	r1, #0
 8000848:	2001      	movs	r0, #1
 800084a:	f000 f82d 	bl	80008a8 <LEDlight>
 800084e:	e022      	b.n	8000896 <main+0x35a>
				} else if (i == 7) {
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d10e      	bne.n	8000874 <main+0x338>
					LEDlight(0, 1, 1, 1, 1, 1, 1, 1);
 8000856:	2301      	movs	r3, #1
 8000858:	9303      	str	r3, [sp, #12]
 800085a:	2301      	movs	r3, #1
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	2301      	movs	r3, #1
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	2301      	movs	r3, #1
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f81b 	bl	80008a8 <LEDlight>
 8000872:	e010      	b.n	8000896 <main+0x35a>
				} else if (i == 8) {
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b08      	cmp	r3, #8
 8000878:	d10d      	bne.n	8000896 <main+0x35a>
					LEDlight(1, 1, 1, 1, 1, 1, 1, 1);
 800087a:	2301      	movs	r3, #1
 800087c:	9303      	str	r3, [sp, #12]
 800087e:	2301      	movs	r3, #1
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	2301      	movs	r3, #1
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2301      	movs	r3, #1
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f809 	bl	80008a8 <LEDlight>
			for (uint8_t i = 0; i <= 8; i++) {
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3301      	adds	r3, #1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b08      	cmp	r3, #8
 80008a0:	f67f af4b 	bls.w	800073a <main+0x1fe>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80008a4:	e683      	b.n	80005ae <main+0x72>
 80008a6:	bf00      	nop

080008a8 <LEDlight>:
	}
	/* USER CODE END 3 */
}

void LEDlight(uint8_t num0, uint8_t num1, uint8_t num2, uint8_t num3,
		uint8_t num4, uint8_t num5, uint8_t num6, uint8_t num7) {
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4604      	mov	r4, r0
 80008b0:	4608      	mov	r0, r1
 80008b2:	4611      	mov	r1, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	4623      	mov	r3, r4
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	4603      	mov	r3, r0
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	460b      	mov	r3, r1
 80008c0:	717b      	strb	r3, [r7, #5]
 80008c2:	4613      	mov	r3, r2
 80008c4:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, num7);
 80008c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ca:	461a      	mov	r2, r3
 80008cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d0:	481e      	ldr	r0, [pc, #120]	; (800094c <LEDlight+0xa4>)
 80008d2:	f000 fd51 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, num6);
 80008d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	481b      	ldr	r0, [pc, #108]	; (8000950 <LEDlight+0xa8>)
 80008e2:	f000 fd49 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, num5);
 80008e6:	7f3b      	ldrb	r3, [r7, #28]
 80008e8:	461a      	mov	r2, r3
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	4818      	ldr	r0, [pc, #96]	; (8000950 <LEDlight+0xa8>)
 80008f0:	f000 fd42 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, num4);
 80008f4:	7e3b      	ldrb	r3, [r7, #24]
 80008f6:	461a      	mov	r2, r3
 80008f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <LEDlight+0xa4>)
 80008fe:	f000 fd3b 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, num3);
 8000902:	793b      	ldrb	r3, [r7, #4]
 8000904:	461a      	mov	r2, r3
 8000906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <LEDlight+0xa8>)
 800090c:	f000 fd34 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, num2);
 8000910:	797b      	ldrb	r3, [r7, #5]
 8000912:	461a      	mov	r2, r3
 8000914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LEDlight+0xa4>)
 800091a:	f000 fd2d 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, num1);
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	461a      	mov	r2, r3
 8000922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <LEDlight+0xac>)
 8000928:	f000 fd26 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, num0);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	461a      	mov	r2, r3
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <LEDlight+0xac>)
 8000936:	f000 fd1f 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800093a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093e:	f000 fa4d 	bl	8000ddc <HAL_Delay>
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bd90      	pop	{r4, r7, pc}
 800094a:	bf00      	nop
 800094c:	40021400 	.word	0x40021400
 8000950:	40021000 	.word	0x40021000
 8000954:	40021800 	.word	0x40021800

08000958 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f9f4 	bl	8001d54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <SystemClock_Config+0xd4>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xd4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <SystemClock_Config+0xd8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <SystemClock_Config+0xd8>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <SystemClock_Config+0xd8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b8:	2302      	movs	r3, #2
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80009c0:	2308      	movs	r3, #8
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 80009c4:	23d8      	movs	r3, #216	; 0xd8
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fd37 	bl	800144c <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x90>
		Error_Handler();
 80009e4:	f000 f90e 	bl	8000c04 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80009e8:	f000 fce0 	bl	80013ac <HAL_PWREx_EnableOverDrive>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x9e>
		Error_Handler();
 80009f2:	f000 f907 	bl	8000c04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a06:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2107      	movs	r1, #7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 ffc7 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xcc>
		Error_Handler();
 8000a20:	f000 f8f0 	bl	8000c04 <Error_Handler>
	}
}
 8000a24:	bf00      	nop
 8000a26:	3750      	adds	r7, #80	; 0x50
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a66      	ldr	r2, [pc, #408]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a60      	ldr	r2, [pc, #384]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a5a      	ldr	r2, [pc, #360]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b58      	ldr	r3, [pc, #352]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a92:	4b55      	ldr	r3, [pc, #340]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a54      	ldr	r2, [pc, #336]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b52      	ldr	r3, [pc, #328]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b46      	ldr	r3, [pc, #280]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_7,
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae0:	4842      	ldr	r0, [pc, #264]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000ae2:	f000 fc49 	bl	8001378 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000aec:	4840      	ldr	r0, [pc, #256]	; (8000bf0 <MX_GPIO_Init+0x1bc>)
 8000aee:	f000 fc43 	bl	8001378 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13,
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000af8:	483e      	ldr	r0, [pc, #248]	; (8000bf4 <MX_GPIO_Init+0x1c0>)
 8000afa:	f000 fc3d 	bl	8001378 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	483c      	ldr	r0, [pc, #240]	; (8000bf8 <MX_GPIO_Init+0x1c4>)
 8000b06:	f000 fc37 	bl	8001378 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000b10:	483a      	ldr	r0, [pc, #232]	; (8000bfc <MX_GPIO_Init+0x1c8>)
 8000b12:	f000 fc31 	bl	8001378 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <MX_GPIO_Init+0x1c4>)
 8000b2c:	f000 fa60 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	482f      	ldr	r0, [pc, #188]	; (8000c00 <MX_GPIO_Init+0x1cc>)
 8000b44:	f000 fa54 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_7;
 8000b48:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4822      	ldr	r0, [pc, #136]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000b62:	f000 fa45 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF13 PF14 PF15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000b66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <MX_GPIO_Init+0x1bc>)
 8000b80:	f000 fa36 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE9 PE11 PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13;
 8000b84:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000b88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <MX_GPIO_Init+0x1c0>)
 8000b9e:	f000 fa27 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480f      	ldr	r0, [pc, #60]	; (8000bf8 <MX_GPIO_Init+0x1c4>)
 8000bbc:	f000 fa18 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_14;
 8000bc0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000bc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_GPIO_Init+0x1c8>)
 8000bda:	f000 fa09 	bl	8000ff0 <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	40020000 	.word	0x40020000

08000c04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000ca4:	f000 f87a 	bl	8000d9c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f001 f805 	bl	8001d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc1b 	bl	800053c <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d14:	08001d9c 	.word	0x08001d9c
  ldr r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d1c:	20000030 	.word	0x20000030

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>

08000d22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f92e 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	f000 f805 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d32:	f7ff ff6d 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f93b 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f911 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	2000002c 	.word	0x2000002c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000002c 	.word	0x2000002c

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <__NVIC_SetPriorityGrouping+0x40>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x40>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	05fa0000 	.word	0x05fa0000

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff47 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff5c 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffb0 	bl	8000f44 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e175      	b.n	80012fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8164 	bne.w	80012f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x56>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80be 	beq.w	80012f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <HAL_GPIO_Init+0x324>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <HAL_GPIO_Init+0x324>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_GPIO_Init+0x324>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001192:	4a61      	ldr	r2, [pc, #388]	; (8001318 <HAL_GPIO_Init+0x328>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_GPIO_Init+0x32c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d037      	beq.n	800122e <HAL_GPIO_Init+0x23e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_GPIO_Init+0x330>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d031      	beq.n	800122a <HAL_GPIO_Init+0x23a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a56      	ldr	r2, [pc, #344]	; (8001324 <HAL_GPIO_Init+0x334>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d02b      	beq.n	8001226 <HAL_GPIO_Init+0x236>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a55      	ldr	r2, [pc, #340]	; (8001328 <HAL_GPIO_Init+0x338>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d025      	beq.n	8001222 <HAL_GPIO_Init+0x232>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <HAL_GPIO_Init+0x33c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01f      	beq.n	800121e <HAL_GPIO_Init+0x22e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a53      	ldr	r2, [pc, #332]	; (8001330 <HAL_GPIO_Init+0x340>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0x22a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <HAL_GPIO_Init+0x344>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x348>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x34c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x350>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x21a>
 8001206:	2309      	movs	r3, #9
 8001208:	e012      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800120a:	230a      	movs	r3, #10
 800120c:	e010      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800120e:	2308      	movs	r3, #8
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001212:	2307      	movs	r3, #7
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x328>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_GPIO_Init+0x354>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_GPIO_Init+0x354>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_GPIO_Init+0x354>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_GPIO_Init+0x354>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_GPIO_Init+0x354>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae86 	bls.w	8001010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40022000 	.word	0x40022000
 8001340:	40022400 	.word	0x40022400
 8001344:	40013c00 	.word	0x40013c00

08001348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e001      	b.n	800136a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_PWREx_EnableOverDrive+0x98>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <HAL_PWREx_EnableOverDrive+0x98>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_PWREx_EnableOverDrive+0x98>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013da:	f7ff fcf3 	bl	8000dc4 <HAL_GetTick>
 80013de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013e0:	e009      	b.n	80013f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013e2:	f7ff fcef 	bl	8000dc4 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f0:	d901      	bls.n	80013f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e022      	b.n	800143c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001402:	d1ee      	bne.n	80013e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800140a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001410:	f7ff fcd8 	bl	8000dc4 <HAL_GetTick>
 8001414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001416:	e009      	b.n	800142c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001418:	f7ff fcd4 	bl	8000dc4 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001426:	d901      	bls.n	800142c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e007      	b.n	800143c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001438:	d1ee      	bne.n	8001418 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e29b      	b.n	800199a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8087 	beq.w	800157e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001470:	4b96      	ldr	r3, [pc, #600]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b04      	cmp	r3, #4
 800147a:	d00c      	beq.n	8001496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147c:	4b93      	ldr	r3, [pc, #588]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d112      	bne.n	80014ae <HAL_RCC_OscConfig+0x62>
 8001488:	4b90      	ldr	r3, [pc, #576]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001494:	d10b      	bne.n	80014ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	4b8d      	ldr	r3, [pc, #564]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06c      	beq.n	800157c <HAL_RCC_OscConfig+0x130>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d168      	bne.n	800157c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e275      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x7a>
 80014b8:	4b84      	ldr	r3, [pc, #528]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a83      	ldr	r2, [pc, #524]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e02e      	b.n	8001524 <HAL_RCC_OscConfig+0xd8>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x9c>
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7e      	ldr	r2, [pc, #504]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7b      	ldr	r2, [pc, #492]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xd8>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0xc0>
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a75      	ldr	r2, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b73      	ldr	r3, [pc, #460]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a72      	ldr	r2, [pc, #456]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xd8>
 800150c:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b6c      	ldr	r3, [pc, #432]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6b      	ldr	r2, [pc, #428]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc4a 	bl	8000dc4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc46 	bl	8000dc4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e229      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b61      	ldr	r3, [pc, #388]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xe8>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fc36 	bl	8000dc4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc32 	bl	8000dc4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e215      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b57      	ldr	r3, [pc, #348]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x110>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d069      	beq.n	800165e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b4d      	ldr	r3, [pc, #308]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x190>
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x17a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1e9      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	493d      	ldr	r1, [pc, #244]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e040      	b.n	800165e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d023      	beq.n	800162c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a38      	ldr	r2, [pc, #224]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbe8 	bl	8000dc4 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fbe4 	bl	8000dc4 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1c7      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4929      	ldr	r1, [pc, #164]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
 800162a:	e018      	b.n	800165e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fbc4 	bl	8000dc4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fbc0 	bl	8000dc4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1a3      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d038      	beq.n	80016dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d019      	beq.n	80016a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fba1 	bl	8000dc4 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fb9d 	bl	8000dc4 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e180      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 800169a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x23a>
 80016a4:	e01a      	b.n	80016dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x280>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb87 	bl	8000dc4 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ba:	f7ff fb83 	bl	8000dc4 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d903      	bls.n	80016d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e166      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
 80016cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ee      	bne.n	80016ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80a4 	beq.w	8001832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b8c      	ldr	r3, [pc, #560]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b89      	ldr	r3, [pc, #548]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a88      	ldr	r2, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b86      	ldr	r3, [pc, #536]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b83      	ldr	r3, [pc, #524]	; (8001920 <HAL_RCC_OscConfig+0x4d4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800171e:	4b80      	ldr	r3, [pc, #512]	; (8001920 <HAL_RCC_OscConfig+0x4d4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7f      	ldr	r2, [pc, #508]	; (8001920 <HAL_RCC_OscConfig+0x4d4>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb4b 	bl	8000dc4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fb47 	bl	8000dc4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e12a      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001744:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x4d4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x31a>
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a6f      	ldr	r2, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	e02d      	b.n	80017c2 <HAL_RCC_OscConfig+0x376>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x33c>
 800176e:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a6a      	ldr	r2, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a67      	ldr	r2, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	e01c      	b.n	80017c2 <HAL_RCC_OscConfig+0x376>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x35e>
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a61      	ldr	r2, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a5e      	ldr	r2, [pc, #376]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
 80017a8:	e00b      	b.n	80017c2 <HAL_RCC_OscConfig+0x376>
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a5b      	ldr	r2, [pc, #364]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d015      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fafb 	bl	8000dc4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff faf7 	bl	8000dc4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0d8      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ee      	beq.n	80017d2 <HAL_RCC_OscConfig+0x386>
 80017f4:	e014      	b.n	8001820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fae5 	bl	8000dc4 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fae1 	bl	8000dc4 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0c2      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ee      	bne.n	80017fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d105      	bne.n	8001832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a3c      	ldr	r2, [pc, #240]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 800182c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80ae 	beq.w	8001998 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d06d      	beq.n	8001924 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d14b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a31      	ldr	r2, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fab2 	bl	8000dc4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff faae 	bl	8000dc4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e091      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	019b      	lsls	r3, r3, #6
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	071b      	lsls	r3, r3, #28
 80018ae:	491b      	ldr	r1, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fa80 	bl	8000dc4 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fa7c 	bl	8000dc4 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e05f      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x47c>
 80018e6:	e057      	b.n	8001998 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa66 	bl	8000dc4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fa62 	bl	8000dc4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e045      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_RCC_OscConfig+0x4d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x4b0>
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x54c>
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_RCC_OscConfig+0x558>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d030      	beq.n	8001994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d129      	bne.n	8001994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d122      	bne.n	8001994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800195a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800195c:	4293      	cmp	r3, r2
 800195e:	d119      	bne.n	8001994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d10f      	bne.n	8001994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0d0      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d910      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 020f 	bic.w	r2, r3, #15
 80019d6:	4965      	ldr	r1, [pc, #404]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b8      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	494d      	ldr	r1, [pc, #308]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d040      	beq.n	8001acc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d115      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e07f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e073      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06b      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4936      	ldr	r1, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f992 	bl	8000dc4 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff f98e 	bl	8000dc4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e053      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d210      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 020f 	bic.w	r2, r3, #15
 8001ae2:	4922      	ldr	r1, [pc, #136]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e032      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4916      	ldr	r1, [pc, #88]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3a:	f000 f821 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	490a      	ldr	r1, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x1cc>)
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d0>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1d4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8ee 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08001d7c 	.word	0x08001d7c
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b090      	sub	sp, #64	; 0x40
 8001b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	f200 80a1 	bhi.w	8001cec <HAL_RCC_GetSysClockFreq+0x16c>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb2:	e09b      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bb8:	e09b      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bba:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bbe:	e098      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bca:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d028      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	2200      	movs	r2, #0
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	627a      	str	r2, [r7, #36]	; 0x24
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001be8:	2100      	movs	r1, #0
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bec:	fb03 f201 	mul.w	r2, r3, r1
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	fb00 f303 	mul.w	r3, r0, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfa:	fba0 1202 	umull	r1, r2, r0, r2
 8001bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c00:	460a      	mov	r2, r1
 8001c02:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c06:	4413      	add	r3, r2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	61fa      	str	r2, [r7, #28]
 8001c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c1a:	f7fe fb0d 	bl	8000238 <__aeabi_uldivmod>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4613      	mov	r3, r2
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c26:	e053      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	2200      	movs	r2, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	617a      	str	r2, [r7, #20]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c3a:	f04f 0b00 	mov.w	fp, #0
 8001c3e:	4652      	mov	r2, sl
 8001c40:	465b      	mov	r3, fp
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0159      	lsls	r1, r3, #5
 8001c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c50:	0150      	lsls	r0, r2, #5
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	ebb2 080a 	subs.w	r8, r2, sl
 8001c5a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c72:	ebb2 0408 	subs.w	r4, r2, r8
 8001c76:	eb63 0509 	sbc.w	r5, r3, r9
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	00eb      	lsls	r3, r5, #3
 8001c84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c88:	00e2      	lsls	r2, r4, #3
 8001c8a:	4614      	mov	r4, r2
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	eb14 030a 	adds.w	r3, r4, sl
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	eb45 030b 	adc.w	r3, r5, fp
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	028b      	lsls	r3, r1, #10
 8001caa:	4621      	mov	r1, r4
 8001cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	028a      	lsls	r2, r1, #10
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	60fa      	str	r2, [r7, #12]
 8001cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc4:	f7fe fab8 	bl	8000238 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3740      	adds	r7, #64	; 0x40
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	017d7840 	.word	0x017d7840

08001d0c <__libc_init_array>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	4d0d      	ldr	r5, [pc, #52]	; (8001d44 <__libc_init_array+0x38>)
 8001d10:	4c0d      	ldr	r4, [pc, #52]	; (8001d48 <__libc_init_array+0x3c>)
 8001d12:	1b64      	subs	r4, r4, r5
 8001d14:	10a4      	asrs	r4, r4, #2
 8001d16:	2600      	movs	r6, #0
 8001d18:	42a6      	cmp	r6, r4
 8001d1a:	d109      	bne.n	8001d30 <__libc_init_array+0x24>
 8001d1c:	4d0b      	ldr	r5, [pc, #44]	; (8001d4c <__libc_init_array+0x40>)
 8001d1e:	4c0c      	ldr	r4, [pc, #48]	; (8001d50 <__libc_init_array+0x44>)
 8001d20:	f000 f820 	bl	8001d64 <_init>
 8001d24:	1b64      	subs	r4, r4, r5
 8001d26:	10a4      	asrs	r4, r4, #2
 8001d28:	2600      	movs	r6, #0
 8001d2a:	42a6      	cmp	r6, r4
 8001d2c:	d105      	bne.n	8001d3a <__libc_init_array+0x2e>
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
 8001d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d34:	4798      	blx	r3
 8001d36:	3601      	adds	r6, #1
 8001d38:	e7ee      	b.n	8001d18 <__libc_init_array+0xc>
 8001d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d3e:	4798      	blx	r3
 8001d40:	3601      	adds	r6, #1
 8001d42:	e7f2      	b.n	8001d2a <__libc_init_array+0x1e>
 8001d44:	08001d94 	.word	0x08001d94
 8001d48:	08001d94 	.word	0x08001d94
 8001d4c:	08001d94 	.word	0x08001d94
 8001d50:	08001d98 	.word	0x08001d98

08001d54 <memset>:
 8001d54:	4402      	add	r2, r0
 8001d56:	4603      	mov	r3, r0
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <memset+0xa>
 8001d5c:	4770      	bx	lr
 8001d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d62:	e7f9      	b.n	8001d58 <memset+0x4>

08001d64 <_init>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr

08001d70 <_fini>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	bf00      	nop
 8001d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d76:	bc08      	pop	{r3}
 8001d78:	469e      	mov	lr, r3
 8001d7a:	4770      	bx	lr
