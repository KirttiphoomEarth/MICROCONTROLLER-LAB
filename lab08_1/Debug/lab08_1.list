
lab08_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002610c  0800c048  0800c048  0001c048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032154  08032154  00050324  2**0
                  CONTENTS
  4 .ARM          00000008  08032154  08032154  00042154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803215c  0803215c  00050324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803215c  0803215c  0004215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08032160  08032160  00042160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08032164  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e4  08032348  000501e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000284  080323e8  00050284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000778  20000324  08032488  00050324  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a9c  08032488  00050a9c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00050324  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d747  00000000  00000000  00050352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f87  00000000  00000000  0006da99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  00071a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000015e0  00000000  00000000  000731d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ce77  00000000  00000000  000747b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ece3  00000000  00000000  000a162f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109487  00000000  00000000  000c0312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c9799  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007684  00000000  00000000  001c97ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000324 	.word	0x20000324
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c030 	.word	0x0800c030

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000328 	.word	0x20000328
 800023c:	0800c030 	.word	0x0800c030

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_ETH_Init+0x84>)
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <MX_ETH_Init+0x88>)
 80009e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009f4:	22e1      	movs	r2, #225	; 0xe1
 80009f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a16:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a1c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a22:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a2a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a2e:	f003 f8a7 	bl	8003b80 <HAL_ETH_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a38:	f001 fa20 	bl	8001e7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a42:	f006 ff83 	bl	800794c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a4e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000378 	.word	0x20000378
 8000a64:	40028000 	.word	0x40028000
 8000a68:	20000428 	.word	0x20000428
 8000a6c:	20000284 	.word	0x20000284
 8000a70:	200001e4 	.word	0x200001e4
 8000a74:	20000340 	.word	0x20000340

08000a78 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_ETH_MspInit+0x158>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 8096 	bne.w	8000bc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a4c      	ldr	r2, [pc, #304]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b44:	2332      	movs	r3, #50	; 0x32
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <HAL_ETH_MspInit+0x160>)
 8000b60:	f003 fb34 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b64:	2386      	movs	r3, #134	; 0x86
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b74:	230b      	movs	r3, #11
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <HAL_ETH_MspInit+0x164>)
 8000b80:	f003 fb24 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b96:	230b      	movs	r3, #11
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <HAL_ETH_MspInit+0x168>)
 8000ba2:	f003 fb13 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <HAL_ETH_MspInit+0x16c>)
 8000bc4:	f003 fb02 	bl	80041cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40028000 	.word	0x40028000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800

08000be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a6c      	ldr	r2, [pc, #432]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b67      	ldr	r3, [pc, #412]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a66      	ldr	r2, [pc, #408]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b64      	ldr	r3, [pc, #400]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b61      	ldr	r3, [pc, #388]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a60      	ldr	r2, [pc, #384]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5e      	ldr	r3, [pc, #376]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a5a      	ldr	r2, [pc, #360]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b55      	ldr	r3, [pc, #340]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a54      	ldr	r2, [pc, #336]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a4e      	ldr	r2, [pc, #312]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a42      	ldr	r2, [pc, #264]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <MX_GPIO_Init+0x1cc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2168      	movs	r1, #104	; 0x68
 8000cc2:	483d      	ldr	r0, [pc, #244]	; (8000db8 <MX_GPIO_Init+0x1d0>)
 8000cc4:	f003 fc46 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cce:	483b      	ldr	r0, [pc, #236]	; (8000dbc <MX_GPIO_Init+0x1d4>)
 8000cd0:	f003 fc40 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	4839      	ldr	r0, [pc, #228]	; (8000dc0 <MX_GPIO_Init+0x1d8>)
 8000cda:	f003 fc3b 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ce4:	4837      	ldr	r0, [pc, #220]	; (8000dc4 <MX_GPIO_Init+0x1dc>)
 8000ce6:	f003 fc35 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000cea:	2314      	movs	r3, #20
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	482e      	ldr	r0, [pc, #184]	; (8000db8 <MX_GPIO_Init+0x1d0>)
 8000cfe:	f003 fa65 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000d02:	2368      	movs	r3, #104	; 0x68
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4827      	ldr	r0, [pc, #156]	; (8000db8 <MX_GPIO_Init+0x1d0>)
 8000d1a:	f003 fa57 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <MX_GPIO_Init+0x1dc>)
 8000d36:	f003 fa49 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d3a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	481a      	ldr	r0, [pc, #104]	; (8000dbc <MX_GPIO_Init+0x1d4>)
 8000d54:	f003 fa3a 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d58:	2340      	movs	r3, #64	; 0x40
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_GPIO_Init+0x1d8>)
 8000d70:	f003 fa2c 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <MX_GPIO_Init+0x1d8>)
 8000d88:	f003 fa20 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000d8c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_GPIO_Init+0x1dc>)
 8000da6:	f003 fa11 	bl	80041cc <HAL_GPIO_Init>

}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	; 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dcc:	f3bf 8f4f 	dsb	sy
}
 8000dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd2:	f3bf 8f6f 	isb	sy
}
 8000dd6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <SCB_EnableICache+0x48>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de0:	f3bf 8f4f 	dsb	sy
}
 8000de4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000de6:	f3bf 8f6f 	isb	sy
}
 8000dea:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SCB_EnableICache+0x48>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <SCB_EnableICache+0x48>)
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dfe:	f3bf 8f6f 	isb	sy
}
 8000e02:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <SCB_EnableDCache+0x84>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e22:	f3bf 8f4f 	dsb	sy
}
 8000e26:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <SCB_EnableDCache+0x84>)
 8000e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e2e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0b5b      	lsrs	r3, r3, #13
 8000e34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e38:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e42:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	015a      	lsls	r2, r3, #5
 8000e48:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e4c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e52:	4911      	ldr	r1, [pc, #68]	; (8000e98 <SCB_EnableDCache+0x84>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1ef      	bne.n	8000e44 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	60fa      	str	r2, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1e5      	bne.n	8000e3a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6e:	f3bf 8f4f 	dsb	sy
}
 8000e72:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <SCB_EnableDCache+0x84>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <SCB_EnableDCache+0x84>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e80:	f3bf 8f4f 	dsb	sy
}
 8000e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e86:	f3bf 8f6f 	isb	sy
}
 8000e8a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b0c7      	sub	sp, #284	; 0x11c
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ea6:	f7ff ff8f 	bl	8000dc8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000eaa:	f7ff ffb3 	bl	8000e14 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f002 fcf1 	bl	8003894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 ff73 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff fe97 	bl	8000be8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000eba:	f7ff fd8f 	bl	80009dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ebe:	f001 fa47 	bl	8002350 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ec2:	f001 fad5 	bl	8002470 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8000ec6:	f001 f827 	bl	8001f18 <MX_SPI5_Init>
  MX_RNG_Init();
 8000eca:	f000 ffdd 	bl	8001e88 <MX_RNG_Init>
  MX_TIM1_Init();
 8000ece:	f001 f9cb 	bl	8002268 <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ILI9341_Fill_Screen(WHITE);
 8000ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ed6:	f002 f9c5 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f002 f8d2 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 8000ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	220a      	movs	r2, #10
 8000eee:	210a      	movs	r1, #10
 8000ef0:	488f      	ldr	r0, [pc, #572]	; (8001130 <main+0x290>)
 8000ef2:	f001 fe45 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 8000ef6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000efa:	f002 fd37 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 8000efe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f02:	f002 f9af 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		uint32_t Timer_Counter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  	  		for(uint32_t j = 0; j < 2; j++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f12:	e02a      	b.n	8000f6a <main+0xca>
	  	  		{
	  	  			HAL_TIM_Base_Start(&htim1);
 8000f14:	4887      	ldr	r0, [pc, #540]	; (8001134 <main+0x294>)
 8000f16:	f005 fa69 	bl	80063ec <HAL_TIM_Base_Start>
	  	  			for(uint16_t i = 0; i < 10; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8000f20:	e00b      	b.n	8000f3a <main+0x9a>
	  	  			{
	  	  				ILI9341_Fill_Screen(WHITE);
 8000f22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f26:	f002 f99d 	bl	8003264 <ILI9341_Fill_Screen>
	  	  				ILI9341_Fill_Screen(BLACK);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f002 f99a 	bl	8003264 <ILI9341_Fill_Screen>
	  	  			for(uint16_t i = 0; i < 10; i++)
 8000f30:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8000f34:	3301      	adds	r3, #1
 8000f36:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8000f3a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d9ef      	bls.n	8000f22 <main+0x82>
	  	  			}

	  	  			//20.000 per second!
	  	  			HAL_TIM_Base_Stop(&htim1);
 8000f42:	487c      	ldr	r0, [pc, #496]	; (8001134 <main+0x294>)
 8000f44:	f005 fac2 	bl	80064cc <HAL_TIM_Base_Stop>
	  	  			Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
 8000f48:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <main+0x294>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000f52:	4413      	add	r3, r2
 8000f54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  	  			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f58:	4b76      	ldr	r3, [pc, #472]	; (8001134 <main+0x294>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
	  	  		for(uint32_t j = 0; j < 2; j++)
 8000f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000f64:	3301      	adds	r3, #1
 8000f66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d9d0      	bls.n	8000f14 <main+0x74>
	  	  		}
	  	  		Timer_Counter /= 2;
 8000f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f76:	085b      	lsrs	r3, r3, #1
 8000f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	  	  		char counter_buff[30];
	  	  		ILI9341_Fill_Screen(WHITE);
 8000f7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f80:	f002 f970 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 f87d 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		sprintf(counter_buff, "Timer counter value: %ld", Timer_Counter*2);
 8000f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f8e:	005a      	lsls	r2, r3, #1
 8000f90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f94:	4968      	ldr	r1, [pc, #416]	; (8001138 <main+0x298>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 fb30 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 8000f9c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	220a      	movs	r2, #10
 8000fae:	210a      	movs	r1, #10
 8000fb0:	f001 fde6 	bl	8002b80 <ILI9341_Draw_Text>

	  	  		double seconds_passed = 2*((float)Timer_Counter / 20000);
 8000fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800113c <main+0x29c>
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd0:	ed87 7b36 	vstr	d7, [r7, #216]	; 0xd8
	  	  		sprintf(counter_buff, "Time: %.3f Sec", seconds_passed);
 8000fd4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000fd8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8000fdc:	4958      	ldr	r1, [pc, #352]	; (8001140 <main+0x2a0>)
 8000fde:	f007 fb0d 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 8000fe2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	2302      	movs	r3, #2
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	221e      	movs	r2, #30
 8000ff4:	210a      	movs	r1, #10
 8000ff6:	f001 fdc3 	bl	8002b80 <ILI9341_Draw_Text>

	  	  		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec
 8000ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800113c <main+0x29c>
 800100a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800100e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001016:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101a:	ed87 7b34 	vstr	d7, [r7, #208]	; 0xd0

	  	  		sprintf(counter_buff, "FPS:  %.2f", timer_float);
 800101e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001022:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001026:	4947      	ldr	r1, [pc, #284]	; (8001144 <main+0x2a4>)
 8001028:	f007 fae8 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 800102c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	2302      	movs	r3, #2
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	2232      	movs	r2, #50	; 0x32
 800103e:	210a      	movs	r1, #10
 8001040:	f001 fd9e 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		double MB_PS = timer_float*240*320*2/1000000;
 8001044:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8001048:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8001110 <main+0x270>
 800104c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001050:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8001118 <main+0x278>
 8001054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001058:	ee37 6b07 	vadd.f64	d6, d7, d7
 800105c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8001120 <main+0x280>
 8001060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001064:	ed87 7b32 	vstr	d7, [r7, #200]	; 0xc8
	  	  		sprintf(counter_buff, "MB/S: %.2f", MB_PS);
 8001068:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800106c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001070:	4935      	ldr	r1, [pc, #212]	; (8001148 <main+0x2a8>)
 8001072:	f007 fac3 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 8001076:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2302      	movs	r3, #2
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2246      	movs	r2, #70	; 0x46
 8001088:	210a      	movs	r1, #10
 800108a:	f001 fd79 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
 800108e:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 8001092:	eeb1 5b09 	vmov.f64	d5, #25	; 0x40c80000  6.250
 8001096:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001128 <main+0x288>
 800109e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010a2:	ed87 7b30 	vstr	d7, [r7, #192]	; 0xc0
	  	  		sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
 80010a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80010aa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80010ae:	4927      	ldr	r1, [pc, #156]	; (800114c <main+0x2ac>)
 80010b0:	f007 faa4 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 80010b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80010b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2302      	movs	r3, #2
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	225a      	movs	r2, #90	; 0x5a
 80010c6:	210a      	movs	r1, #10
 80010c8:	f001 fd5a 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(10000);
 80010cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80010d0:	f002 fc4c 	bl	800396c <HAL_Delay>
	  	  		static uint16_t y = 0;

	  	  		char Temp_Buffer_text[40];

	  	  //----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
	  	  		ILI9341_Fill_Screen(WHITE);
 80010d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010d8:	f002 f8c4 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f001 ffd1 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	220a      	movs	r2, #10
 80010f0:	210a      	movs	r1, #10
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <main+0x2b0>)
 80010f4:	f001 fd44 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 80010f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010fc:	f002 fc36 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 8001100:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001104:	f002 f8ae 	bl	8003264 <ILI9341_Fill_Screen>


	  	  		for(uint16_t i = 0; i <= 10; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800110e:	e0a9      	b.n	8001264 <main+0x3c4>
 8001110:	00000000 	.word	0x00000000
 8001114:	406e0000 	.word	0x406e0000
 8001118:	00000000 	.word	0x00000000
 800111c:	40740000 	.word	0x40740000
 8001120:	00000000 	.word	0x00000000
 8001124:	412e8480 	.word	0x412e8480
 8001128:	00000000 	.word	0x00000000
 800112c:	40590000 	.word	0x40590000
 8001130:	0800c048 	.word	0x0800c048
 8001134:	200004ac 	.word	0x200004ac
 8001138:	0800c064 	.word	0x0800c064
 800113c:	469c4000 	.word	0x469c4000
 8001140:	0800c080 	.word	0x0800c080
 8001144:	0800c090 	.word	0x0800c090
 8001148:	0800c09c 	.word	0x0800c09c
 800114c:	0800c0a8 	.word	0x0800c0a8
 8001150:	0800c0bc 	.word	0x0800c0bc
	  	  		{
	  	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8001154:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	49d9      	ldr	r1, [pc, #868]	; (80014c0 <main+0x620>)
 800115c:	4618      	mov	r0, r3
 800115e:	f007 fa4d 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8001162:	1d38      	adds	r0, r7, #4
 8001164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2302      	movs	r3, #2
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	220a      	movs	r2, #10
 8001172:	210a      	movs	r1, #10
 8001174:	f001 fd04 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8001178:	1d38      	adds	r0, r7, #4
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2302      	movs	r3, #2
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	231f      	movs	r3, #31
 8001186:	221e      	movs	r2, #30
 8001188:	210a      	movs	r1, #10
 800118a:	f001 fcf9 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 800118e:	1d38      	adds	r0, r7, #4
 8001190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2302      	movs	r3, #2
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800119e:	2232      	movs	r2, #50	; 0x32
 80011a0:	210a      	movs	r1, #10
 80011a2:	f001 fced 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 80011a6:	1d38      	adds	r0, r7, #4
 80011a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2302      	movs	r3, #2
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80011b6:	2246      	movs	r2, #70	; 0x46
 80011b8:	210a      	movs	r1, #10
 80011ba:	f001 fce1 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 80011be:	1d38      	adds	r0, r7, #4
 80011c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2302      	movs	r3, #2
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	225a      	movs	r2, #90	; 0x5a
 80011ce:	210a      	movs	r1, #10
 80011d0:	f001 fcd6 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 80011d4:	1d38      	adds	r0, r7, #4
 80011d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2302      	movs	r3, #2
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	231f      	movs	r3, #31
 80011e2:	226e      	movs	r2, #110	; 0x6e
 80011e4:	210a      	movs	r1, #10
 80011e6:	f001 fccb 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 80011ea:	1d38      	adds	r0, r7, #4
 80011ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2302      	movs	r3, #2
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011fa:	2282      	movs	r2, #130	; 0x82
 80011fc:	210a      	movs	r1, #10
 80011fe:	f001 fcbf 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 8001202:	1d38      	adds	r0, r7, #4
 8001204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2302      	movs	r3, #2
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001212:	2296      	movs	r2, #150	; 0x96
 8001214:	210a      	movs	r1, #10
 8001216:	f001 fcb3 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 800121a:	1d38      	adds	r0, r7, #4
 800121c:	2300      	movs	r3, #0
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2302      	movs	r3, #2
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001228:	22aa      	movs	r2, #170	; 0xaa
 800122a:	210a      	movs	r1, #10
 800122c:	f001 fca8 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8001230:	1d38      	adds	r0, r7, #4
 8001232:	2300      	movs	r3, #0
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2302      	movs	r3, #2
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	231f      	movs	r3, #31
 800123c:	22be      	movs	r2, #190	; 0xbe
 800123e:	210a      	movs	r1, #10
 8001240:	f001 fc9e 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8001244:	1d38      	adds	r0, r7, #4
 8001246:	2300      	movs	r3, #0
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2302      	movs	r3, #2
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001252:	22d2      	movs	r2, #210	; 0xd2
 8001254:	210a      	movs	r1, #10
 8001256:	f001 fc93 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		for(uint16_t i = 0; i <= 10; i++)
 800125a:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800125e:	3301      	adds	r3, #1
 8001260:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8001264:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8001268:	2b0a      	cmp	r3, #10
 800126a:	f67f af73 	bls.w	8001154 <main+0x2b4>
	  	  		}

	  	  		HAL_Delay(1000);
 800126e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001272:	f002 fb7b 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------COUNTING SINGLE SEGMENT
	  	  		ILI9341_Fill_Screen(WHITE);
 8001276:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800127a:	f001 fff3 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800127e:	2001      	movs	r0, #1
 8001280:	f001 ff00 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8001284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2301      	movs	r3, #1
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	220a      	movs	r2, #10
 8001292:	210a      	movs	r1, #10
 8001294:	488b      	ldr	r0, [pc, #556]	; (80014c4 <main+0x624>)
 8001296:	f001 fc73 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 800129a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800129e:	f002 fb65 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 80012a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012a6:	f001 ffdd 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		for(uint16_t i = 0; i <= 100; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 80012b0:	e016      	b.n	80012e0 <main+0x440>
	  	  		{
	  	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 80012b2:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4981      	ldr	r1, [pc, #516]	; (80014c0 <main+0x620>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 f99e 	bl	80085fc <siprintf>
	  	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 80012c0:	1d38      	adds	r0, r7, #4
 80012c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2303      	movs	r3, #3
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	220a      	movs	r2, #10
 80012d0:	210a      	movs	r1, #10
 80012d2:	f001 fc55 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		for(uint16_t i = 0; i <= 100; i++)
 80012d6:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80012da:	3301      	adds	r3, #1
 80012dc:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 80012e0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d9e4      	bls.n	80012b2 <main+0x412>
	  	  		}

	  	  		HAL_Delay(1000);
 80012e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ec:	f002 fb3e 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------ALIGNMENT TEST
	  	  		ILI9341_Fill_Screen(WHITE);
 80012f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012f4:	f001 ffb6 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f001 fec3 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2301      	movs	r3, #1
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	220a      	movs	r2, #10
 800130c:	210a      	movs	r1, #10
 800130e:	486e      	ldr	r0, [pc, #440]	; (80014c8 <main+0x628>)
 8001310:	f001 fc36 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 8001314:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001318:	f002 fb28 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 800131c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001320:	f001 ffa0 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	2264      	movs	r2, #100	; 0x64
 800132c:	2132      	movs	r1, #50	; 0x32
 800132e:	2032      	movs	r0, #50	; 0x32
 8001330:	f001 faad 	bl	800288e <ILI9341_Draw_Hollow_Rectangle_Coord>
	  	  		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 8001334:	2300      	movs	r3, #0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2332      	movs	r3, #50	; 0x32
 800133a:	2232      	movs	r2, #50	; 0x32
 800133c:	2114      	movs	r1, #20
 800133e:	2014      	movs	r0, #20
 8001340:	f001 fb26 	bl	8002990 <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2313      	movs	r3, #19
 800134a:	2213      	movs	r2, #19
 800134c:	210a      	movs	r1, #10
 800134e:	200a      	movs	r0, #10
 8001350:	f001 fa9d 	bl	800288e <ILI9341_Draw_Hollow_Rectangle_Coord>
	  	  		HAL_Delay(1000);
 8001354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001358:	f002 fb08 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------LINES EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 800135c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001360:	f001 ff80 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001364:	2001      	movs	r0, #1
 8001366:	f001 fe8d 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800136a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	2301      	movs	r3, #1
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	220a      	movs	r2, #10
 8001378:	210a      	movs	r1, #10
 800137a:	4854      	ldr	r0, [pc, #336]	; (80014cc <main+0x62c>)
 800137c:	f001 fc00 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 8001380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2301      	movs	r3, #1
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	2214      	movs	r2, #20
 800138e:	210a      	movs	r1, #10
 8001390:	484f      	ldr	r0, [pc, #316]	; (80014d0 <main+0x630>)
 8001392:	f001 fbf5 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 8001396:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139a:	f002 fae7 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 800139e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013a2:	f001 ff5f 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		for(uint32_t i = 0; i < 30000; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013ac:	e054      	b.n	8001458 <main+0x5b8>
	  	  		{
	  	  			uint32_t random_num = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	67bb      	str	r3, [r7, #120]	; 0x78
	  	  			uint16_t xr = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  	  			uint16_t yr = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  	  			uint16_t radiusr = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  	  			uint16_t colourr = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80013ca:	4842      	ldr	r0, [pc, #264]	; (80014d4 <main+0x634>)
 80013cc:	f004 fc00 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 80013d0:	67b8      	str	r0, [r7, #120]	; 0x78
	  	  			xr = random_num;
 80013d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80013d8:	483e      	ldr	r0, [pc, #248]	; (80014d4 <main+0x634>)
 80013da:	f004 fbf9 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 80013de:	67b8      	str	r0, [r7, #120]	; 0x78
	  	  			yr = random_num;
 80013e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013e2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80013e6:	483b      	ldr	r0, [pc, #236]	; (80014d4 <main+0x634>)
 80013e8:	f004 fbf2 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 80013ec:	67b8      	str	r0, [r7, #120]	; 0x78
	  	  			radiusr = random_num;
 80013ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013f0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80013f4:	4837      	ldr	r0, [pc, #220]	; (80014d4 <main+0x634>)
 80013f6:	f004 fbeb 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 80013fa:	67b8      	str	r0, [r7, #120]	; 0x78
	  	  			colourr = random_num;
 80013fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013fe:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	  	  			xr &= 0x01FF;
 8001402:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800140a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  	  			yr &= 0x01FF;
 800140e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001416:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  	  			radiusr &= 0x001F;
 800141a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  	  			//ili9341_drawpixel(xr, yr, WHITE);
	  	  			ILI9341_Draw_Horizontal_Line(xr, yr, radiusr, colourr);
 8001426:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800142a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800142e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8001432:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 8001436:	f002 f871 	bl	800351c <ILI9341_Draw_Horizontal_Line>
	  	  			ILI9341_Draw_Vertical_Line(xr, yr, radiusr, colourr);
 800143a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800143e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001442:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8001446:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 800144a:	f002 f8ab 	bl	80035a4 <ILI9341_Draw_Vertical_Line>
	  	  		for(uint32_t i = 0; i < 30000; i++)
 800144e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001452:	3301      	adds	r3, #1
 8001454:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800145c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001460:	4293      	cmp	r3, r2
 8001462:	d9a4      	bls.n	80013ae <main+0x50e>
	  	  		}

	  	  		HAL_Delay(1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001468:	f002 fa80 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------HOLLOW CIRCLES EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 800146c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001470:	f001 fef8 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001474:	2001      	movs	r0, #1
 8001476:	f001 fe05 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800147a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	220a      	movs	r2, #10
 8001488:	210a      	movs	r1, #10
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <main+0x62c>)
 800148c:	f001 fb78 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Circles", 10, 20, BLACK, 1, WHITE);
 8001490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2301      	movs	r3, #1
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2214      	movs	r2, #20
 800149e:	210a      	movs	r1, #10
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <main+0x638>)
 80014a2:	f001 fb6d 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 80014a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014aa:	f002 fa5f 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 80014ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014b2:	f001 fed7 	bl	8003264 <ILI9341_Fill_Screen>


	  	  		for(uint32_t i = 0; i < 3000; i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80014bc:	e064      	b.n	8001588 <main+0x6e8>
 80014be:	bf00      	nop
 80014c0:	0800c0e0 	.word	0x0800c0e0
 80014c4:	0800c0f0 	.word	0x0800c0f0
 80014c8:	0800c108 	.word	0x0800c108
 80014cc:	0800c124 	.word	0x0800c124
 80014d0:	0800c140 	.word	0x0800c140
 80014d4:	20000434 	.word	0x20000434
 80014d8:	0800c160 	.word	0x0800c160
	  	  		{
	  	  			uint32_t random_num = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  	  			uint16_t xr = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  	  			uint16_t yr = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  	  			uint16_t radiusr = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  	  			uint16_t colourr = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80014fa:	48cb      	ldr	r0, [pc, #812]	; (8001828 <main+0x988>)
 80014fc:	f004 fb68 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001500:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  	  			xr = random_num;
 8001504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001508:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800150c:	48c6      	ldr	r0, [pc, #792]	; (8001828 <main+0x988>)
 800150e:	f004 fb5f 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001512:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  	  			yr = random_num;
 8001516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800151a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800151e:	48c2      	ldr	r0, [pc, #776]	; (8001828 <main+0x988>)
 8001520:	f004 fb56 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001524:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  	  			radiusr = random_num;
 8001528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800152c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001530:	48bd      	ldr	r0, [pc, #756]	; (8001828 <main+0x988>)
 8001532:	f004 fb4d 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001536:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  	  			colourr = random_num;
 800153a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800153e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	  	  			xr &= 0x01FF;
 8001542:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  	  			yr &= 0x01FF;
 800154e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001556:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  	  			radiusr &= 0x001F;
 800155a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  	  			//ili9341_drawpixel(xr, yr, WHITE);
	  	  			ILI9341_Draw_Hollow_Circle(xr, yr, radiusr*2, colourr);
 8001566:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001572:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8001576:	f8b7 0082 	ldrh.w	r0, [r7, #130]	; 0x82
 800157a:	f001 f84a 	bl	8002612 <ILI9341_Draw_Hollow_Circle>
	  	  		for(uint32_t i = 0; i < 3000; i++)
 800157e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001582:	3301      	adds	r3, #1
 8001584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800158c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001590:	4293      	cmp	r3, r2
 8001592:	d9a3      	bls.n	80014dc <main+0x63c>
	  	  		}
	  	  		HAL_Delay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f002 f9e8 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 800159c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015a0:	f001 fe60 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f001 fd6d 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 80015aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2301      	movs	r3, #1
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	220a      	movs	r2, #10
 80015b8:	210a      	movs	r1, #10
 80015ba:	489c      	ldr	r0, [pc, #624]	; (800182c <main+0x98c>)
 80015bc:	f001 fae0 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 80015c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2301      	movs	r3, #1
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	2214      	movs	r2, #20
 80015ce:	210a      	movs	r1, #10
 80015d0:	4897      	ldr	r0, [pc, #604]	; (8001830 <main+0x990>)
 80015d2:	f001 fad5 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 80015d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015da:	f002 f9c7 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 80015de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015e2:	f001 fe3f 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		for(uint32_t i = 0; i < 1000; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015ec:	e055      	b.n	800169a <main+0x7fa>
	  	  		{
	  	  			uint32_t random_num = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  	  			uint16_t xr = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  	  			uint16_t yr = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  	  			uint16_t radiusr = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  	  			uint16_t colourr = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800160c:	4886      	ldr	r0, [pc, #536]	; (8001828 <main+0x988>)
 800160e:	f004 fadf 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001612:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  	  			xr = random_num;
 8001616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800161a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800161e:	4882      	ldr	r0, [pc, #520]	; (8001828 <main+0x988>)
 8001620:	f004 fad6 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001624:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  	  			yr = random_num;
 8001628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800162c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001630:	487d      	ldr	r0, [pc, #500]	; (8001828 <main+0x988>)
 8001632:	f004 facd 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001636:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  	  			radiusr = random_num;
 800163a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001642:	4879      	ldr	r0, [pc, #484]	; (8001828 <main+0x988>)
 8001644:	f004 fac4 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001648:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  	  			colourr = random_num;
 800164c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001650:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	  	  			xr &= 0x01FF;
 8001654:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  	  			yr &= 0x01FF;
 8001660:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  	  			radiusr &= 0x001F;
 800166c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  	  			//ili9341_drawpixel(xr, yr, WHITE);
	  	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8001678:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001684:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8001688:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 800168c:	f001 f877 	bl	800277e <ILI9341_Draw_Filled_Circle>
	  	  		for(uint32_t i = 0; i < 1000; i++)
 8001690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001694:	3301      	adds	r3, #1
 8001696:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800169a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	d3a4      	bcc.n	80015ee <main+0x74e>
	  	  		}
	  	  		HAL_Delay(1000);
 80016a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a8:	f002 f960 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------HOLLOW RECTANGLES EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 80016ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016b0:	f001 fdd8 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f001 fce5 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2301      	movs	r3, #1
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	220a      	movs	r2, #10
 80016c8:	210a      	movs	r1, #10
 80016ca:	4858      	ldr	r0, [pc, #352]	; (800182c <main+0x98c>)
 80016cc:	f001 fa58 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Rectangles", 10, 20, BLACK, 1, WHITE);
 80016d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2301      	movs	r3, #1
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	2214      	movs	r2, #20
 80016de:	210a      	movs	r1, #10
 80016e0:	4854      	ldr	r0, [pc, #336]	; (8001834 <main+0x994>)
 80016e2:	f001 fa4d 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 80016e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ea:	f002 f93f 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 80016ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016f2:	f001 fdb7 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		for(uint32_t i = 0; i < 20000; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80016fc:	e060      	b.n	80017c0 <main+0x920>
	  	  		{
	  	  			uint32_t random_num = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  	  			uint16_t xr = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  	  			uint16_t yr = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  	  			uint16_t radiusr = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  	  			uint16_t colourr = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800171c:	4842      	ldr	r0, [pc, #264]	; (8001828 <main+0x988>)
 800171e:	f004 fa57 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001722:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  	  			xr = random_num;
 8001726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800172a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800172e:	483e      	ldr	r0, [pc, #248]	; (8001828 <main+0x988>)
 8001730:	f004 fa4e 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001734:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  	  			yr = random_num;
 8001738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800173c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001740:	4839      	ldr	r0, [pc, #228]	; (8001828 <main+0x988>)
 8001742:	f004 fa45 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001746:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  	  			radiusr = random_num;
 800174a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800174e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001752:	4835      	ldr	r0, [pc, #212]	; (8001828 <main+0x988>)
 8001754:	f004 fa3c 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001758:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  	  			colourr = random_num;
 800175c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001760:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	  	  			xr &= 0x01FF;
 8001764:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  	  			yr &= 0x01FF;
 8001770:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  	  			radiusr &= 0x001F;
 800177c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  	  			//ili9341_drawpixel(xr, yr, WHITE);
	  	  			ILI9341_Draw_Hollow_Rectangle_Coord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001788:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800178c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001790:	4413      	add	r3, r2
 8001792:	b29c      	uxth	r4, r3
 8001794:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8001798:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800179c:	4413      	add	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80017a4:	f8b7 009a 	ldrh.w	r0, [r7, #154]	; 0x9a
 80017a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	4622      	mov	r2, r4
 80017b2:	f001 f86c 	bl	800288e <ILI9341_Draw_Hollow_Rectangle_Coord>
	  	  		for(uint32_t i = 0; i < 20000; i++)
 80017b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017ba:	3301      	adds	r3, #1
 80017bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80017c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80017c4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d998      	bls.n	80016fe <main+0x85e>
	  	  		}
	  	  		HAL_Delay(1000);
 80017cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d0:	f002 f8cc 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------FILLED RECTANGLES EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 80017d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017d8:	f001 fd44 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f001 fc51 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 80017e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	220a      	movs	r2, #10
 80017f0:	210a      	movs	r1, #10
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <main+0x98c>)
 80017f4:	f001 f9c4 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Filled Rectangles", 10, 20, BLACK, 1, WHITE);
 80017f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2301      	movs	r3, #1
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2214      	movs	r2, #20
 8001806:	210a      	movs	r1, #10
 8001808:	480b      	ldr	r0, [pc, #44]	; (8001838 <main+0x998>)
 800180a:	f001 f9b9 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 800180e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001812:	f002 f8ab 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 8001816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800181a:	f001 fd23 	bl	8003264 <ILI9341_Fill_Screen>

	  	  		for(uint32_t i = 0; i < 20000; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001824:	e062      	b.n	80018ec <main+0xa4c>
 8001826:	bf00      	nop
 8001828:	20000434 	.word	0x20000434
 800182c:	0800c124 	.word	0x0800c124
 8001830:	0800c168 	.word	0x0800c168
 8001834:	0800c178 	.word	0x0800c178
 8001838:	0800c184 	.word	0x0800c184
	  	  		{
	  	  			uint32_t random_num = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  	  			uint16_t xr = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  	  			uint16_t yr = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  	  			uint16_t radiusr = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  	  			uint16_t colourr = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800185a:	48b9      	ldr	r0, [pc, #740]	; (8001b40 <main+0xca0>)
 800185c:	f004 f9b8 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001860:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  	  			xr = random_num;
 8001864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001868:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800186c:	48b4      	ldr	r0, [pc, #720]	; (8001b40 <main+0xca0>)
 800186e:	f004 f9af 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001872:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  	  			yr = random_num;
 8001876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800187a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800187e:	48b0      	ldr	r0, [pc, #704]	; (8001b40 <main+0xca0>)
 8001880:	f004 f9a6 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001884:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  	  			radiusr = random_num;
 8001888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800188c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001890:	48ab      	ldr	r0, [pc, #684]	; (8001b40 <main+0xca0>)
 8001892:	f004 f99d 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001896:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  	  			colourr = random_num;
 800189a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800189e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	  	  			xr &= 0x01FF;
 80018a2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80018a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  	  			yr &= 0x01FF;
 80018ae:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80018b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  	  			radiusr &= 0x001F;
 80018ba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  	  			//ili9341_drawpixel(xr, yr, WHITE);
	  	  			ILI9341_Draw_Rectangle(xr, yr, radiusr, radiusr, colourr);
 80018c6:	f8b7 40a2 	ldrh.w	r4, [r7, #162]	; 0xa2
 80018ca:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80018ce:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80018d2:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 80018d6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4623      	mov	r3, r4
 80018de:	f001 fdc1 	bl	8003464 <ILI9341_Draw_Rectangle>
	  	  		for(uint32_t i = 0; i < 20000; i++)
 80018e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80018e6:	3301      	adds	r3, #1
 80018e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80018ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80018f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d9a1      	bls.n	800183c <main+0x99c>
	  	  		}
	  	  		HAL_Delay(1000);
 80018f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fc:	f002 f836 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

	  	  		ILI9341_Fill_Screen(WHITE);
 8001900:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001904:	f001 fcae 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001908:	2001      	movs	r0, #1
 800190a:	f001 fbbb 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 800190e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2301      	movs	r3, #1
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	220a      	movs	r2, #10
 800191c:	210a      	movs	r1, #10
 800191e:	4889      	ldr	r0, [pc, #548]	; (8001b44 <main+0xca4>)
 8001920:	f001 f92e 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 8001924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	2301      	movs	r3, #1
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	2214      	movs	r2, #20
 8001932:	210a      	movs	r1, #10
 8001934:	4884      	ldr	r0, [pc, #528]	; (8001b48 <main+0xca8>)
 8001936:	f001 f923 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 800193a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800193e:	f002 f815 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 8001942:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001946:	f001 fc8d 	bl	8003264 <ILI9341_Fill_Screen>


	  	  		x = 0;
 800194a:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <main+0xcac>)
 800194c:	2200      	movs	r2, #0
 800194e:	801a      	strh	r2, [r3, #0]
	  	  		y = 0;
 8001950:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <main+0xcb0>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]
	  	  		while (y < 240)
 8001956:	e026      	b.n	80019a6 <main+0xb06>
	  	  		{
	  	  		while ((x < 320) && (y < 240))
	  	  		{

	  	  			if(x % 2)
 8001958:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <main+0xcac>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	b29b      	uxth	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <main+0xad6>
	  	  			{
	  	  				ILI9341_Draw_Pixel(x, y, BLACK);
 8001966:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <main+0xcac>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	4a79      	ldr	r2, [pc, #484]	; (8001b50 <main+0xcb0>)
 800196c:	8811      	ldrh	r1, [r2, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fc9d 	bl	80032b0 <ILI9341_Draw_Pixel>
	  	  			}

	  	  			x++;
 8001976:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <main+0xcac>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <main+0xcac>)
 8001980:	801a      	strh	r2, [r3, #0]
	  	  		while ((x < 320) && (y < 240))
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <main+0xcac>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800198a:	d203      	bcs.n	8001994 <main+0xaf4>
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <main+0xcb0>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	2bef      	cmp	r3, #239	; 0xef
 8001992:	d9e1      	bls.n	8001958 <main+0xab8>
	  	  		}

	  	  			y++;
 8001994:	4b6e      	ldr	r3, [pc, #440]	; (8001b50 <main+0xcb0>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <main+0xcb0>)
 800199e:	801a      	strh	r2, [r3, #0]
	  	  			x = 0;
 80019a0:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <main+0xcac>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
	  	  		while (y < 240)
 80019a6:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <main+0xcb0>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	2bef      	cmp	r3, #239	; 0xef
 80019ac:	d9e9      	bls.n	8001982 <main+0xae2>
	  	  		}

	  	  		x = 0;
 80019ae:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <main+0xcac>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
	  	  		y = 0;
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <main+0xcb0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	801a      	strh	r2, [r3, #0]


	  	  		while (y < 240)
 80019ba:	e026      	b.n	8001a0a <main+0xb6a>
	  	  		{
	  	  		while ((x < 320) && (y < 240))
	  	  		{

	  	  			if(y % 2)
 80019bc:	4b64      	ldr	r3, [pc, #400]	; (8001b50 <main+0xcb0>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <main+0xb3a>
	  	  			{
	  	  				ILI9341_Draw_Pixel(x, y, BLACK);
 80019ca:	4b60      	ldr	r3, [pc, #384]	; (8001b4c <main+0xcac>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	4a60      	ldr	r2, [pc, #384]	; (8001b50 <main+0xcb0>)
 80019d0:	8811      	ldrh	r1, [r2, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fc6b 	bl	80032b0 <ILI9341_Draw_Pixel>
	  	  			}

	  	  			x++;
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <main+0xcac>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <main+0xcac>)
 80019e4:	801a      	strh	r2, [r3, #0]
	  	  		while ((x < 320) && (y < 240))
 80019e6:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <main+0xcac>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80019ee:	d203      	bcs.n	80019f8 <main+0xb58>
 80019f0:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <main+0xcb0>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	2bef      	cmp	r3, #239	; 0xef
 80019f6:	d9e1      	bls.n	80019bc <main+0xb1c>
	  	  		}

	  	  			y++;
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <main+0xcb0>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <main+0xcb0>)
 8001a02:	801a      	strh	r2, [r3, #0]
	  	  			x = 0;
 8001a04:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <main+0xcac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
	  	  		while (y < 240)
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <main+0xcb0>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	2bef      	cmp	r3, #239	; 0xef
 8001a10:	d9e9      	bls.n	80019e6 <main+0xb46>
	  	  		}
	  	  		HAL_Delay(2000);
 8001a12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a16:	f001 ffa9 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 8001a1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a1e:	f001 fc21 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f001 fb2e 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Random position and colour", 10, 10, BLACK, 1, WHITE);
 8001a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	220a      	movs	r2, #10
 8001a36:	210a      	movs	r1, #10
 8001a38:	4846      	ldr	r0, [pc, #280]	; (8001b54 <main+0xcb4>)
 8001a3a:	f001 f8a1 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("500000 pixels", 10, 20, BLACK, 1, WHITE);
 8001a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2214      	movs	r2, #20
 8001a4c:	210a      	movs	r1, #10
 8001a4e:	4842      	ldr	r0, [pc, #264]	; (8001b58 <main+0xcb8>)
 8001a50:	f001 f896 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 8001a54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a58:	f001 ff88 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Fill_Screen(WHITE);
 8001a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a60:	f001 fc00 	bl	8003264 <ILI9341_Fill_Screen>


	  	  		for(uint32_t i = 0; i < 500000; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a6a:	e03a      	b.n	8001ae2 <main+0xc42>
	  	  		{
	  	  			uint32_t random_num = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  	  			uint16_t xr = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  	  			uint16_t yr = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001a7e:	4830      	ldr	r0, [pc, #192]	; (8001b40 <main+0xca0>)
 8001a80:	f004 f8a6 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001a84:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  	  			xr = random_num;
 8001a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a8c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001a90:	482b      	ldr	r0, [pc, #172]	; (8001b40 <main+0xca0>)
 8001a92:	f004 f89d 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001a96:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  	  			yr = random_num;
 8001a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a9e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  	  			uint16_t color = HAL_RNG_GetRandomNumber(&hrng);
 8001aa2:	4827      	ldr	r0, [pc, #156]	; (8001b40 <main+0xca0>)
 8001aa4:	f004 f894 	bl	8005bd0 <HAL_RNG_GetRandomNumber>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	  	  			xr &= 0x01FF;
 8001aae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  	  			yr &= 0x01FF;
 8001aba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  	  			ILI9341_Draw_Pixel(xr, yr, color);
 8001ac6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8001aca:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8001ace:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 fbec 	bl	80032b0 <ILI9341_Draw_Pixel>
	  	  		for(uint32_t i = 0; i < 500000; i++)
 8001ad8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001adc:	3301      	adds	r3, #1
 8001ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ae2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <main+0xcbc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d9bf      	bls.n	8001a6c <main+0xbcc>
	  	  		}
	  	  		HAL_Delay(2000);
 8001aec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af0:	f001 ff3c 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------565 COLOUR EXAMPLE, Grayscale
	  	  		ILI9341_Fill_Screen(WHITE);
 8001af4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001af8:	f001 fbb4 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f001 fac1 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 8001b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	220a      	movs	r2, #10
 8001b10:	210a      	movs	r1, #10
 8001b12:	4813      	ldr	r0, [pc, #76]	; (8001b60 <main+0xcc0>)
 8001b14:	f001 f834 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 8001b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2300      	movs	r3, #0
 8001b24:	2214      	movs	r2, #20
 8001b26:	210a      	movs	r1, #10
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <main+0xcc4>)
 8001b2a:	f001 f829 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 8001b2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b32:	f001 ff1b 	bl	800396c <HAL_Delay>


	  	  		for(uint16_t i = 0; i <= (320); i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8001b3c:	e05a      	b.n	8001bf4 <main+0xd54>
 8001b3e:	bf00      	nop
 8001b40:	20000434 	.word	0x20000434
 8001b44:	0800c198 	.word	0x0800c198
 8001b48:	0800c1b0 	.word	0x0800c1b0
 8001b4c:	2000042e 	.word	0x2000042e
 8001b50:	20000430 	.word	0x20000430
 8001b54:	0800c1c8 	.word	0x0800c1c8
 8001b58:	0800c1e4 	.word	0x0800c1e4
 8001b5c:	0007a11f 	.word	0x0007a11f
 8001b60:	0800c1f4 	.word	0x0800c1f4
 8001b64:	0800c204 	.word	0x0800c204
	  	  		{
	  	  			uint16_t Red = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  	  			uint16_t Green = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  	  			uint16_t Blue = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

	  	  			Red = i/(10);
 8001b7a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001b7e:	4a7d      	ldr	r2, [pc, #500]	; (8001d74 <main+0xed4>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  	  			Red <<= 11;
 8001b8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001b8e:	02db      	lsls	r3, r3, #11
 8001b90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  	  			Green = i/(5);
 8001b94:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001b98:	4a76      	ldr	r2, [pc, #472]	; (8001d74 <main+0xed4>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  	  			Green <<= 5;
 8001ba4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001ba8:	015b      	lsls	r3, r3, #5
 8001baa:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  	  			Blue = i/(10);
 8001bae:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001bb2:	4a70      	ldr	r2, [pc, #448]	; (8001d74 <main+0xed4>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba



	  	  			uint16_t RGB_color = Red + Green + Blue;
 8001bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001bc2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001bce:	4413      	add	r3, r2
 8001bd0:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	  	  			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <main+0xed8>)
 8001bd6:	8819      	ldrh	r1, [r3, #0]
 8001bd8:	f8b7 00e6 	ldrh.w	r0, [r7, #230]	; 0xe6
 8001bdc:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	23f0      	movs	r3, #240	; 0xf0
 8001be4:	2201      	movs	r2, #1
 8001be6:	f001 fc3d 	bl	8003464 <ILI9341_Draw_Rectangle>
	  	  		for(uint16_t i = 0; i <= (320); i++)
 8001bea:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8001bf4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001bf8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001bfc:	d9b4      	bls.n	8001b68 <main+0xcc8>

	  	  		}
	  	  		HAL_Delay(2000);
 8001bfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c02:	f001 feb3 	bl	800396c <HAL_Delay>

	  	  //----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
	  	  		ILI9341_Fill_Screen(WHITE);
 8001c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c0a:	f001 fb2b 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f001 fa38 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 8001c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	220a      	movs	r2, #10
 8001c22:	210a      	movs	r1, #10
 8001c24:	4855      	ldr	r0, [pc, #340]	; (8001d7c <main+0xedc>)
 8001c26:	f000 ffab 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 8001c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2301      	movs	r3, #1
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2300      	movs	r3, #0
 8001c36:	2214      	movs	r2, #20
 8001c38:	210a      	movs	r1, #10
 8001c3a:	4851      	ldr	r0, [pc, #324]	; (8001d80 <main+0xee0>)
 8001c3c:	f000 ffa0 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		HAL_Delay(2000);
 8001c40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c44:	f001 fe92 	bl	800396c <HAL_Delay>
	  	  		ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
 8001c48:	2102      	movs	r1, #2
 8001c4a:	484e      	ldr	r0, [pc, #312]	; (8001d84 <main+0xee4>)
 8001c4c:	f000 ffc8 	bl	8002be0 <ILI9341_Draw_Image>
	  	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f001 fa17 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		HAL_Delay(5000);
 8001c56:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c5a:	f001 fe87 	bl	800396c <HAL_Delay>


	  	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  	  		ILI9341_Fill_Screen(WHITE);
 8001c5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c62:	f001 faff 	bl	8003264 <ILI9341_Fill_Screen>
	  	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f001 fa0c 	bl	8003084 <ILI9341_Set_Rotation>
	  	  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 8001c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2302      	movs	r3, #2
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	220a      	movs	r2, #10
 8001c7a:	210a      	movs	r1, #10
 8001c7c:	4842      	ldr	r0, [pc, #264]	; (8001d88 <main+0xee8>)
 8001c7e:	f000 ff7f 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2302      	movs	r3, #2
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	221e      	movs	r2, #30
 8001c90:	210a      	movs	r1, #10
 8001c92:	483e      	ldr	r0, [pc, #248]	; (8001d8c <main+0xeec>)
 8001c94:	f000 ff74 	bl	8002b80 <ILI9341_Draw_Text>
	  	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f001 f9f3 	bl	8003084 <ILI9341_Set_Rotation>


	  	  		while(1)
	  	  		{
	  	  			HAL_Delay(20);
 8001c9e:	2014      	movs	r0, #20
 8001ca0:	f001 fe64 	bl	800396c <HAL_Delay>

	  	  			if(TP_Touchpad_Pressed())
 8001ca4:	f001 fde6 	bl	8003874 <TP_Touchpad_Pressed>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d05a      	beq.n	8001d64 <main+0xec4>
	  	          {

	  	  					uint16_t x_pos = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  	  					uint16_t y_pos = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2


	  	  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001cc0:	4833      	ldr	r0, [pc, #204]	; (8001d90 <main+0xef0>)
 8001cc2:	f002 fc47 	bl	8004554 <HAL_GPIO_WritePin>

	  	            uint16_t position_array[2];

	  	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001cc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fd10 	bl	80036f0 <TP_Read_Coordinates>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d13d      	bne.n	8001d52 <main+0xeb2>
	  	  					{
	  	  					x_pos = position_array[0];
 8001cd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001cda:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  	  					y_pos = position_array[1];
 8001cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ce2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	  	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 8001ce6:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 8001cea:	f8b7 00e4 	ldrh.w	r0, [r7, #228]	; 0xe4
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f000 fd44 	bl	800277e <ILI9341_Draw_Filled_Circle>

	  	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f001 f9c4 	bl	8003084 <ILI9341_Set_Rotation>
	  	  					char counter_buff[30];
	  	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 8001cfc:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8001d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d04:	4923      	ldr	r1, [pc, #140]	; (8001d94 <main+0xef4>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fc78 	bl	80085fc <siprintf>
	  	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 8001d0c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	2302      	movs	r3, #2
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2250      	movs	r2, #80	; 0x50
 8001d1e:	210a      	movs	r1, #10
 8001d20:	f000 ff2e 	bl	8002b80 <ILI9341_Draw_Text>
	  	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 8001d24:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2c:	491a      	ldr	r1, [pc, #104]	; (8001d98 <main+0xef8>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f006 fc64 	bl	80085fc <siprintf>
	  	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 8001d34:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2278      	movs	r2, #120	; 0x78
 8001d46:	210a      	movs	r1, #10
 8001d48:	f000 ff1a 	bl	8002b80 <ILI9341_Draw_Text>
	  	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f001 f999 	bl	8003084 <ILI9341_Set_Rotation>
	  	  					}

	  	  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
 8001d52:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 8001d56:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 faa7 	bl	80032b0 <ILI9341_Draw_Pixel>
 8001d62:	e79c      	b.n	8001c9e <main+0xdfe>

	  	          }
	  	  			else
	  	  			{
	  	  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001d6a:	4809      	ldr	r0, [pc, #36]	; (8001d90 <main+0xef0>)
 8001d6c:	f002 fbf2 	bl	8004554 <HAL_GPIO_WritePin>
	  	  			HAL_Delay(20);
 8001d70:	e795      	b.n	8001c9e <main+0xdfe>
 8001d72:	bf00      	nop
 8001d74:	cccccccd 	.word	0xcccccccd
 8001d78:	2000042e 	.word	0x2000042e
 8001d7c:	0800c210 	.word	0x0800c210
 8001d80:	0800c21c 	.word	0x0800c21c
 8001d84:	0800c258 	.word	0x0800c258
 8001d88:	0800c224 	.word	0x0800c224
 8001d8c:	0800c230 	.word	0x0800c230
 8001d90:	40020400 	.word	0x40020400
 8001d94:	0800c240 	.word	0x0800c240
 8001d98:	0800c24c 	.word	0x0800c24c

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2234      	movs	r2, #52	; 0x34
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 fdce 	bl	800794c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001dc0:	f002 fd2a 	bl	8004818 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <SystemClock_Config+0xd8>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <SystemClock_Config+0xd8>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <SystemClock_Config+0xd8>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <SystemClock_Config+0xdc>)
 8001de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <SystemClock_Config+0xdc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001df8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001dfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e0c:	23d8      	movs	r3, #216	; 0xd8
 8001e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e14:	2309      	movs	r3, #9
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 fd59 	bl	80048d8 <HAL_RCC_OscConfig>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e2c:	f000 f826 	bl	8001e7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e30:	f002 fd02 	bl	8004838 <HAL_PWREx_EnableOverDrive>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001e3a:	f000 f81f 	bl	8001e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3e:	230f      	movs	r3, #15
 8001e40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e42:	2302      	movs	r3, #2
 8001e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	2107      	movs	r1, #7
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 ffe9 	bl	8004e34 <HAL_RCC_ClockConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001e68:	f000 f808 	bl	8001e7c <Error_Handler>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3750      	adds	r7, #80	; 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000

08001e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <Error_Handler+0x8>
	...

08001e88 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_RNG_Init+0x20>)
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <MX_RNG_Init+0x24>)
 8001e90:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_RNG_Init+0x20>)
 8001e94:	f003 fe1c 	bl	8005ad0 <HAL_RNG_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e9e:	f7ff ffed 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000434 	.word	0x20000434
 8001eac:	50060800 	.word	0x50060800

08001eb0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0a8      	sub	sp, #160	; 0xa0
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	2290      	movs	r2, #144	; 0x90
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 fd43 	bl	800794c <memset>
  if(rngHandle->Instance==RNG)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_RNG_MspInit+0x60>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d11b      	bne.n	8001f08 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ed0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f9cd 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001eec:	f7ff ffc6 	bl	8001e7c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RNG_MspInit+0x64>)
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_RNG_MspInit+0x64>)
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efa:	6353      	str	r3, [r2, #52]	; 0x34
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RNG_MspInit+0x64>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001f08:	bf00      	nop
 8001f0a:	37a0      	adds	r7, #160	; 0xa0
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	50060800 	.word	0x50060800
 8001f14:	40023800 	.word	0x40023800

08001f18 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <MX_SPI5_Init+0x78>)
 8001f20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f36:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f66:	2207      	movs	r2, #7
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_SPI5_Init+0x74>)
 8001f78:	f003 fe3f 	bl	8005bfa <HAL_SPI_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001f82:	f7ff ff7b 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000444 	.word	0x20000444
 8001f90:	40015000 	.word	0x40015000

08001f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_SPI_MspInit+0x7c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d128      	bne.n	8002008 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_SPI_MspInit+0x80>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a16      	ldr	r2, [pc, #88]	; (8002014 <HAL_SPI_MspInit+0x80>)
 8001fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_SPI_MspInit+0x80>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_SPI_MspInit+0x80>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_SPI_MspInit+0x80>)
 8001fd4:	f043 0320 	orr.w	r3, r3, #32
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_SPI_MspInit+0x80>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001fe6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <HAL_SPI_MspInit+0x84>)
 8002004:	f002 f8e2 	bl	80041cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40015000 	.word	0x40015000
 8002014:	40023800 	.word	0x40023800
 8002018:	40021400 	.word	0x40021400

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_MspInit+0x44>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_MspInit+0x44>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_MspInit+0x44>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x44>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x44>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x44>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler+0x4>

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f001 fc3c 	bl	800392c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_kill>:

int _kill(int pid, int sig)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020d2:	f005 fc11 	bl	80078f8 <__errno>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2216      	movs	r2, #22
 80020da:	601a      	str	r2, [r3, #0]
	return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_exit>:

void _exit (int status)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffe7 	bl	80020c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020fa:	e7fe      	b.n	80020fa <_exit+0x12>

080020fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e00a      	b.n	8002124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800210e:	f3af 8000 	nop.w
 8002112:	4601      	mov	r1, r0
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	b2ca      	uxtb	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf0      	blt.n	800210e <_read+0x12>
	}

return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e009      	b.n	800215c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf1      	blt.n	8002148 <_write+0x12>
	}
	return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_close>:

int _close(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	605a      	str	r2, [r3, #4]
	return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_isatty>:

int _isatty(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
	return 1;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f005 fb76 	bl	80078f8 <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20080000 	.word	0x20080000
 8002238:	00000400 	.word	0x00000400
 800223c:	200004a8 	.word	0x200004a8
 8002240:	20000aa0 	.word	0x20000aa0

08002244 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <MX_TIM1_Init+0xa0>)
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <MX_TIM1_Init+0xa4>)
 800228a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <MX_TIM1_Init+0xa0>)
 800228e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002292:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MX_TIM1_Init+0xa0>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_TIM1_Init+0xa0>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM1_Init+0xa0>)
 80022a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM1_Init+0xa0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <MX_TIM1_Init+0xa0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_TIM1_Init+0xa0>)
 80022b6:	f004 f841 	bl	800633c <HAL_TIM_Base_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80022c0:	f7ff fddc 	bl	8001e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	4619      	mov	r1, r3
 80022d0:	480d      	ldr	r0, [pc, #52]	; (8002308 <MX_TIM1_Init+0xa0>)
 80022d2:	f004 f923 	bl	800651c <HAL_TIM_ConfigClockSource>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80022dc:	f7ff fdce 	bl	8001e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_TIM1_Init+0xa0>)
 80022f2:	f004 fb17 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022fc:	f7ff fdbe 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200004ac 	.word	0x200004ac
 800230c:	40010000 	.word	0x40010000

08002310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_TIM_Base_MspInit+0x38>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10b      	bne.n	800233a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_TIM_Base_MspInit+0x3c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_TIM_Base_MspInit+0x3c>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_TIM_Base_MspInit+0x3c>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000
 800234c:	40023800 	.word	0x40023800

08002350 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <MX_USART3_UART_Init+0x5c>)
 8002358:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART3_UART_Init+0x58>)
 8002394:	f004 fb54 	bl	8006a40 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800239e:	f7ff fd6d 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200004f8 	.word	0x200004f8
 80023ac:	40004800 	.word	0x40004800

080023b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ae      	sub	sp, #184	; 0xb8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2290      	movs	r2, #144	; 0x90
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fabb 	bl	800794c <memset>
  if(uartHandle->Instance==USART3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_UART_MspInit+0xb4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d13c      	bne.n	800245a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 ff46 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023fa:	f7ff fd3f 	bl	8001e7c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_UART_MspInit+0xb8>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_UART_MspInit+0xb8>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <HAL_UART_MspInit+0xb8>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002416:	4b14      	ldr	r3, [pc, #80]	; (8002468 <HAL_UART_MspInit+0xb8>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_UART_MspInit+0xb8>)
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_UART_MspInit+0xb8>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800242e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002448:	2307      	movs	r3, #7
 800244a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002452:	4619      	mov	r1, r3
 8002454:	4805      	ldr	r0, [pc, #20]	; (800246c <HAL_UART_MspInit+0xbc>)
 8002456:	f001 feb9 	bl	80041cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800245a:	bf00      	nop
 800245c:	37b8      	adds	r7, #184	; 0xb8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40004800 	.word	0x40004800
 8002468:	40023800 	.word	0x40023800
 800246c:	40020c00 	.word	0x40020c00

08002470 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800247a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800247e:	2206      	movs	r2, #6
 8002480:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002484:	2202      	movs	r2, #2
 8002486:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002490:	2202      	movs	r2, #2
 8002492:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002496:	2201      	movs	r2, #1
 8002498:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b4:	f002 f867 	bl	8004586 <HAL_PCD_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024be:	f7ff fcdd 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000580 	.word	0x20000580

080024cc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0ae      	sub	sp, #184	; 0xb8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2290      	movs	r2, #144	; 0x90
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f005 fa2d 	bl	800794c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fa:	d159      	bne.n	80025b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80024fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002500:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4618      	mov	r0, r3
 800250e:	f002 feb7 	bl	8005280 <HAL_RCCEx_PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002518:	f7ff fcb0 	bl	8001e7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002534:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002538:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800254e:	230a      	movs	r3, #10
 8002550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002558:	4619      	mov	r1, r3
 800255a:	4818      	ldr	r0, [pc, #96]	; (80025bc <HAL_PCD_MspInit+0xf0>)
 800255c:	f001 fe36 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002578:	4619      	mov	r1, r3
 800257a:	4810      	ldr	r0, [pc, #64]	; (80025bc <HAL_PCD_MspInit+0xf0>)
 800257c:	f001 fe26 	bl	80041cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 8002582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002584:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 8002586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258a:	6353      	str	r3, [r2, #52]	; 0x34
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 800259e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a2:	6453      	str	r3, [r2, #68]	; 0x44
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_PCD_MspInit+0xec>)
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80025b0:	bf00      	nop
 80025b2:	37b8      	adds	r7, #184	; 0xb8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000

080025c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c6:	490e      	ldr	r1, [pc, #56]	; (8002600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025cc:	e002      	b.n	80025d4 <LoopCopyDataInit>

080025ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d2:	3304      	adds	r3, #4

080025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d8:	d3f9      	bcc.n	80025ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025dc:	4c0b      	ldr	r4, [pc, #44]	; (800260c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e0:	e001      	b.n	80025e6 <LoopFillZerobss>

080025e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e4:	3204      	adds	r2, #4

080025e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e8:	d3fb      	bcc.n	80025e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ea:	f7ff fe2b 	bl	8002244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f005 f989 	bl	8007904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f2:	f7fe fc55 	bl	8000ea0 <main>
  bx  lr    
 80025f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002600:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002604:	08032164 	.word	0x08032164
  ldr r2, =_sbss
 8002608:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 800260c:	20000a9c 	.word	0x20000a9c

08002610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC_IRQHandler>

08002612 <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8002612:	b590      	push	{r4, r7, lr}
 8002614:	b089      	sub	sp, #36	; 0x24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4604      	mov	r4, r0
 800261a:	4608      	mov	r0, r1
 800261c:	4611      	mov	r1, r2
 800261e:	461a      	mov	r2, r3
 8002620:	4623      	mov	r3, r4
 8002622:	80fb      	strh	r3, [r7, #6]
 8002624:	4603      	mov	r3, r0
 8002626:	80bb      	strh	r3, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	3b01      	subs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 800263a:	2301      	movs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
    int dy = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 800264c:	e08d      	b.n	800276a <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	b29a      	uxth	r2, r3
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4413      	add	r3, r2
 8002656:	b298      	uxth	r0, r3
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	b29a      	uxth	r2, r3
 800265c:	88bb      	ldrh	r3, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	883a      	ldrh	r2, [r7, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f000 fe23 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	b29a      	uxth	r2, r3
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	4413      	add	r3, r2
 8002672:	b298      	uxth	r0, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	b29a      	uxth	r2, r3
 8002678:	88bb      	ldrh	r3, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	883a      	ldrh	r2, [r7, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f000 fe15 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	b29b      	uxth	r3, r3
 800268a:	88fa      	ldrh	r2, [r7, #6]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	b298      	uxth	r0, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	b29a      	uxth	r2, r3
 8002694:	88bb      	ldrh	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	b29b      	uxth	r3, r3
 800269a:	883a      	ldrh	r2, [r7, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f000 fe07 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	b298      	uxth	r0, r3
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	883a      	ldrh	r2, [r7, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f000 fdf9 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	b298      	uxth	r0, r3
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	88ba      	ldrh	r2, [r7, #4]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	883a      	ldrh	r2, [r7, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f000 fdeb 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	b298      	uxth	r0, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	88ba      	ldrh	r2, [r7, #4]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	883a      	ldrh	r2, [r7, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f000 fddd 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4413      	add	r3, r2
 80026fe:	b298      	uxth	r0, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	b29b      	uxth	r3, r3
 8002704:	88ba      	ldrh	r2, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	b29b      	uxth	r3, r3
 800270a:	883a      	ldrh	r2, [r7, #0]
 800270c:	4619      	mov	r1, r3
 800270e:	f000 fdcf 	bl	80032b0 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	b29a      	uxth	r2, r3
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	4413      	add	r3, r2
 800271a:	b298      	uxth	r0, r3
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	b29b      	uxth	r3, r3
 8002720:	88ba      	ldrh	r2, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	883a      	ldrh	r2, [r7, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	f000 fdc1 	bl	80032b0 <ILI9341_Draw_Pixel>

        if (err <= 0)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	dc09      	bgt.n	8002748 <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	3301      	adds	r3, #1
 8002738:	61bb      	str	r3, [r7, #24]
            err += dy;
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
            dy += 2;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3302      	adds	r3, #2
 8002746:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	dd0d      	ble.n	800276a <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b01      	subs	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3302      	adds	r3, #2
 8002758:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	425b      	negs	r3, r3
 800275e:	005a      	lsls	r2, r3, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	4413      	add	r3, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	429a      	cmp	r2, r3
 8002770:	f6bf af6d 	bge.w	800264e <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}

0800277e <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800277e:	b590      	push	{r4, r7, lr}
 8002780:	b08b      	sub	sp, #44	; 0x2c
 8002782:	af00      	add	r7, sp, #0
 8002784:	4604      	mov	r4, r0
 8002786:	4608      	mov	r0, r1
 8002788:	4611      	mov	r1, r2
 800278a:	461a      	mov	r2, r3
 800278c:	4623      	mov	r3, r4
 800278e:	80fb      	strh	r3, [r7, #6]
 8002790:	4603      	mov	r3, r0
 8002792:	80bb      	strh	r3, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
 8002798:	4613      	mov	r3, r2
 800279a:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	f1c3 0301 	rsb	r3, r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80027b6:	e061      	b.n	800287c <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e018      	b.n	80027f4 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	b298      	uxth	r0, r3
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	883a      	ldrh	r2, [r7, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	f000 fd6c 	bl	80032b0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	b298      	uxth	r0, r3
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	88ba      	ldrh	r2, [r7, #4]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	883a      	ldrh	r2, [r7, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f000 fd61 	bl	80032b0 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	3301      	adds	r3, #1
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	4413      	add	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dde0      	ble.n	80027c2 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e018      	b.n	800283c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b298      	uxth	r0, r3
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	b29a      	uxth	r2, r3
 8002812:	88bb      	ldrh	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	883a      	ldrh	r2, [r7, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	f000 fd48 	bl	80032b0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	b298      	uxth	r0, r3
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	b29b      	uxth	r3, r3
 8002828:	88ba      	ldrh	r2, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b29b      	uxth	r3, r3
 800282e:	883a      	ldrh	r2, [r7, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f000 fd3d 	bl	80032b0 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	4413      	add	r3, r2
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	dde0      	ble.n	800280a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	3301      	adds	r3, #1
 800284c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3302      	adds	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005a      	lsls	r2, r3, #1
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	dd09      	ble.n	800287c <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	3b01      	subs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3302      	adds	r3, #2
 800287a:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	429a      	cmp	r2, r3
 8002882:	da99      	bge.n	80027b8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	372c      	adds	r7, #44	; 0x2c
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}

0800288e <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800288e:	b590      	push	{r4, r7, lr}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	4604      	mov	r4, r0
 8002896:	4608      	mov	r0, r1
 8002898:	4611      	mov	r1, r2
 800289a:	461a      	mov	r2, r3
 800289c:	4623      	mov	r3, r4
 800289e:	80fb      	strh	r3, [r7, #6]
 80028a0:	4603      	mov	r3, r0
 80028a2:	80bb      	strh	r3, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80028d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	d501      	bpl.n	80028e6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 80028e2:	2301      	movs	r3, #1
 80028e4:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 80028ec:	883a      	ldrh	r2, [r7, #0]
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fa:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80028fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	d501      	bpl.n	8002910 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 800290c:	2301      	movs	r3, #1
 800290e:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	82fb      	strh	r3, [r7, #22]
 800291e:	e003      	b.n	8002928 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8002928:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800292a:	8afa      	ldrh	r2, [r7, #22]
 800292c:	88b9      	ldrh	r1, [r7, #4]
 800292e:	88f8      	ldrh	r0, [r7, #6]
 8002930:	f000 fdf4 	bl	800351c <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8002934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002936:	8afa      	ldrh	r2, [r7, #22]
 8002938:	8839      	ldrh	r1, [r7, #0]
 800293a:	88f8      	ldrh	r0, [r7, #6]
 800293c:	f000 fdee 	bl	800351c <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002940:	7cbb      	ldrb	r3, [r7, #18]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8002946:	883a      	ldrh	r2, [r7, #0]
 8002948:	88bb      	ldrh	r3, [r7, #4]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	82bb      	strh	r3, [r7, #20]
 800294e:	e003      	b.n	8002958 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8002950:	88ba      	ldrh	r2, [r7, #4]
 8002952:	883b      	ldrh	r3, [r7, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8002958:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800295a:	8aba      	ldrh	r2, [r7, #20]
 800295c:	88b9      	ldrh	r1, [r7, #4]
 800295e:	88f8      	ldrh	r0, [r7, #6]
 8002960:	f000 fe20 	bl	80035a4 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8002964:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002966:	8aba      	ldrh	r2, [r7, #20]
 8002968:	88b9      	ldrh	r1, [r7, #4]
 800296a:	8878      	ldrh	r0, [r7, #2]
 800296c:	f000 fe1a 	bl	80035a4 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8002970:	8afb      	ldrh	r3, [r7, #22]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8002976:	8abb      	ldrh	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 800297c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800297e:	8839      	ldrh	r1, [r7, #0]
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fc94 	bl	80032b0 <ILI9341_Draw_Pixel>
	}
	
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}

08002990 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af02      	add	r7, sp, #8
 8002996:	4604      	mov	r4, r0
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	80fb      	strh	r3, [r7, #6]
 80029a2:	4603      	mov	r3, r0
 80029a4:	80bb      	strh	r3, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	807b      	strh	r3, [r7, #2]
 80029aa:	4613      	mov	r3, r2
 80029ac:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da01      	bge.n	80029dc <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80029d8:	2301      	movs	r3, #1
 80029da:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80029e0:	883a      	ldrh	r2, [r7, #0]
 80029e2:	88bb      	ldrh	r3, [r7, #4]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da01      	bge.n	80029f2 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80029ee:	2301      	movs	r3, #1
 80029f0:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	823b      	strh	r3, [r7, #16]
 8002a04:	e005      	b.n	8002a12 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002a12:	7cbb      	ldrb	r3, [r7, #18]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002a18:	883a      	ldrh	r2, [r7, #0]
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002a20:	88bb      	ldrh	r3, [r7, #4]
 8002a22:	81fb      	strh	r3, [r7, #14]
 8002a24:	e005      	b.n	8002a32 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002a26:	88ba      	ldrh	r2, [r7, #4]
 8002a28:	883b      	ldrh	r3, [r7, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8002a2e:	883b      	ldrh	r3, [r7, #0]
 8002a30:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8002a32:	8abc      	ldrh	r4, [r7, #20]
 8002a34:	8afa      	ldrh	r2, [r7, #22]
 8002a36:	89f9      	ldrh	r1, [r7, #14]
 8002a38:	8a38      	ldrh	r0, [r7, #16]
 8002a3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	4623      	mov	r3, r4
 8002a40:	f000 fd10 	bl	8003464 <ILI9341_Draw_Rectangle>
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71bb      	strb	r3, [r7, #6]
 8002a62:	460b      	mov	r3, r1
 8002a64:	717b      	strb	r3, [r7, #5]
 8002a66:	4613      	mov	r3, r2
 8002a68:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	2b1f      	cmp	r3, #31
 8002a72:	d802      	bhi.n	8002a7a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	71fb      	strb	r3, [r7, #7]
 8002a78:	e002      	b.n	8002a80 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	3b20      	subs	r3, #32
 8002a7e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	753b      	strb	r3, [r7, #20]
 8002a84:	e012      	b.n	8002aac <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8002a86:	7dfa      	ldrb	r2, [r7, #23]
 8002a88:	7d38      	ldrb	r0, [r7, #20]
 8002a8a:	7d39      	ldrb	r1, [r7, #20]
 8002a8c:	4c3b      	ldr	r4, [pc, #236]	; (8002b7c <ILI9341_Draw_Char+0x130>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4423      	add	r3, r4
 8002a98:	4403      	add	r3, r0
 8002a9a:	781a      	ldrb	r2, [r3, #0]
 8002a9c:	f101 0318 	add.w	r3, r1, #24
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002aa6:	7d3b      	ldrb	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	753b      	strb	r3, [r7, #20]
 8002aac:	7d3b      	ldrb	r3, [r7, #20]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d9e9      	bls.n	8002a86 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002ab2:	79bb      	ldrb	r3, [r7, #6]
 8002ab4:	b298      	uxth	r0, r3
 8002ab6:	797b      	ldrb	r3, [r7, #5]
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002abc:	461a      	mov	r2, r3
 8002abe:	0052      	lsls	r2, r2, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	b29c      	uxth	r4, r3
 8002acc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4623      	mov	r3, r4
 8002ad2:	f000 fcc7 	bl	8003464 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	757b      	strb	r3, [r7, #21]
 8002ada:	e047      	b.n	8002b6c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002adc:	2300      	movs	r3, #0
 8002ade:	75bb      	strb	r3, [r7, #22]
 8002ae0:	e03e      	b.n	8002b60 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8002ae2:	7d7b      	ldrb	r3, [r7, #21]
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	443b      	add	r3, r7
 8002ae8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002aec:	461a      	mov	r2, r3
 8002aee:	7dbb      	ldrb	r3, [r7, #22]
 8002af0:	fa42 f303 	asr.w	r3, r2, r3
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02e      	beq.n	8002b5a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d110      	bne.n	8002b24 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	7d7b      	ldrb	r3, [r7, #21]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	797b      	ldrb	r3, [r7, #5]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	7dbb      	ldrb	r3, [r7, #22]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f000 fbc7 	bl	80032b0 <ILI9341_Draw_Pixel>
 8002b22:	e01a      	b.n	8002b5a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002b24:	79bb      	ldrb	r3, [r7, #6]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	7d7b      	ldrb	r3, [r7, #21]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002b2e:	fb11 f303 	smulbb	r3, r1, r3
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	b298      	uxth	r0, r3
 8002b38:	797b      	ldrb	r3, [r7, #5]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	7dbb      	ldrb	r3, [r7, #22]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002b42:	fb11 f303 	smulbb	r3, r1, r3
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002b4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4623      	mov	r3, r4
 8002b56:	f000 fc85 	bl	8003464 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002b5a:	7dbb      	ldrb	r3, [r7, #22]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	75bb      	strb	r3, [r7, #22]
 8002b60:	7dbb      	ldrb	r3, [r7, #22]
 8002b62:	2b07      	cmp	r3, #7
 8002b64:	d9bd      	bls.n	8002ae2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002b66:	7d7b      	ldrb	r3, [r7, #21]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	757b      	strb	r3, [r7, #21]
 8002b6c:	7d7b      	ldrb	r3, [r7, #21]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d9b4      	bls.n	8002adc <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd90      	pop	{r4, r7, pc}
 8002b7c:	08031a70 	.word	0x08031a70

08002b80 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70bb      	strb	r3, [r7, #2]
 8002b96:	4613      	mov	r3, r2
 8002b98:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002b9a:	e017      	b.n	8002bcc <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	7818      	ldrb	r0, [r3, #0]
 8002ba4:	883c      	ldrh	r4, [r7, #0]
 8002ba6:	78ba      	ldrb	r2, [r7, #2]
 8002ba8:	78f9      	ldrb	r1, [r7, #3]
 8002baa:	8bbb      	ldrh	r3, [r7, #28]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	8b3b      	ldrh	r3, [r7, #24]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	f7ff ff4a 	bl	8002a4c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002bb8:	8b3b      	ldrh	r3, [r7, #24]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	4413      	add	r3, r2
 8002bca:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e3      	bne.n	8002b9c <ILI9341_Draw_Text+0x1c>
    }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
	...

08002be0 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002bec:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002bf0:	6018      	str	r0, [r3, #0]
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002bf8:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002bfc:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8002bfe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002c02:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d15e      	bne.n	8002cca <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f000 fa39 	bl	8003084 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002c12:	23f0      	movs	r3, #240	; 0xf0
 8002c14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f000 f9e6 	bl	8002fec <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c26:	48c4      	ldr	r0, [pc, #784]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002c28:	f001 fc94 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c32:	48c1      	ldr	r0, [pc, #772]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002c34:	f001 fc8e 	bl	8004554 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002c44:	e035      	b.n	8002cb2 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002c4c:	e019      	b.n	8002c82 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002c4e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002c52:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c56:	4413      	add	r3, r2
 8002c58:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002c5c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	7819      	ldrb	r1, [r3, #0]
 8002c66:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002c6a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002c6e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c72:	4413      	add	r3, r2
 8002c74:	460a      	mov	r2, r1
 8002c76:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002c78:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002c82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c8a:	d3e0      	bcc.n	8002c4e <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002c8c:	f107 010c 	add.w	r1, r7, #12
 8002c90:	230a      	movs	r3, #10
 8002c92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c96:	48a9      	ldr	r0, [pc, #676]	; (8002f3c <ILI9341_Draw_Image+0x35c>)
 8002c98:	f003 f85a 	bl	8005d50 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002c9c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002ca0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ca4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002ca8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002cac:	3301      	adds	r3, #1
 8002cae:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002cb2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002cb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002cba:	d9c4      	bls.n	8002c46 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc2:	489d      	ldr	r0, [pc, #628]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002cc4:	f001 fc46 	bl	8004554 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8002cc8:	e130      	b.n	8002f2c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8002cca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002cce:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d15e      	bne.n	8002d96 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 f9d3 	bl	8003084 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002cde:	23f0      	movs	r3, #240	; 0xf0
 8002ce0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f980 	bl	8002fec <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002cec:	2201      	movs	r2, #1
 8002cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf2:	4891      	ldr	r0, [pc, #580]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002cf4:	f001 fc2e 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfe:	488e      	ldr	r0, [pc, #568]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002d00:	f001 fc28 	bl	8004554 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002d10:	e035      	b.n	8002d7e <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002d18:	e019      	b.n	8002d4e <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002d1a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8002d1e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d22:	4413      	add	r3, r2
 8002d24:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002d28:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	7819      	ldrb	r1, [r3, #0]
 8002d32:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002d36:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002d3a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d3e:	4413      	add	r3, r2
 8002d40:	460a      	mov	r2, r1
 8002d42:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002d44:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002d4e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d56:	d3e0      	bcc.n	8002d1a <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002d58:	f107 010c 	add.w	r1, r7, #12
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d62:	4876      	ldr	r0, [pc, #472]	; (8002f3c <ILI9341_Draw_Image+0x35c>)
 8002d64:	f002 fff4 	bl	8005d50 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002d68:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002d6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002d70:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002d74:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002d7e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002d82:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002d86:	d9c4      	bls.n	8002d12 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d8e:	486a      	ldr	r0, [pc, #424]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002d90:	f001 fbe0 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002d94:	e0ca      	b.n	8002f2c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8002d96:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002d9a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d15e      	bne.n	8002e62 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8002da4:	2002      	movs	r0, #2
 8002da6:	f000 f96d 	bl	8003084 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002daa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dae:	22f0      	movs	r2, #240	; 0xf0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2000      	movs	r0, #0
 8002db4:	f000 f91a 	bl	8002fec <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dbe:	485e      	ldr	r0, [pc, #376]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002dc0:	f001 fbc8 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dca:	485b      	ldr	r0, [pc, #364]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002dcc:	f001 fbc2 	bl	8004554 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002ddc:	e035      	b.n	8002e4a <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002de4:	e019      	b.n	8002e1a <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002de6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002dea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002dee:	4413      	add	r3, r2
 8002df0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002df4:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	7819      	ldrb	r1, [r3, #0]
 8002dfe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002e02:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002e06:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e0a:	4413      	add	r3, r2
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002e10:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e14:	3301      	adds	r3, #1
 8002e16:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002e1a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e22:	d3e0      	bcc.n	8002de6 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002e24:	f107 010c 	add.w	r1, r7, #12
 8002e28:	230a      	movs	r3, #10
 8002e2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e2e:	4843      	ldr	r0, [pc, #268]	; (8002f3c <ILI9341_Draw_Image+0x35c>)
 8002e30:	f002 ff8e 	bl	8005d50 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002e34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002e38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002e3c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002e40:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002e44:	3301      	adds	r3, #1
 8002e46:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002e4a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002e4e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002e52:	d9c4      	bls.n	8002dde <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e54:	2201      	movs	r2, #1
 8002e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e5a:	4837      	ldr	r0, [pc, #220]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002e5c:	f001 fb7a 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002e60:	e064      	b.n	8002f2c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8002e62:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002e66:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d15d      	bne.n	8002f2c <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f000 f907 	bl	8003084 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002e76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e7a:	22f0      	movs	r2, #240	; 0xf0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f8b4 	bl	8002fec <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e8a:	482b      	ldr	r0, [pc, #172]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002e8c:	f001 fb62 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e96:	4828      	ldr	r0, [pc, #160]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002e98:	f001 fb5c 	bl	8004554 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002ea8:	e035      	b.n	8002f16 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002eb0:	e019      	b.n	8002ee6 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002eb2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eba:	4413      	add	r3, r2
 8002ebc:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002ec0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	7819      	ldrb	r1, [r3, #0]
 8002eca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002ece:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002ed2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed6:	4413      	add	r3, r2
 8002ed8:	460a      	mov	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002edc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002ee6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eee:	d3e0      	bcc.n	8002eb2 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002ef0:	f107 010c 	add.w	r1, r7, #12
 8002ef4:	230a      	movs	r3, #10
 8002ef6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002efa:	4810      	ldr	r0, [pc, #64]	; (8002f3c <ILI9341_Draw_Image+0x35c>)
 8002efc:	f002 ff28 	bl	8005d50 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002f00:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002f04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f08:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002f0c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002f10:	3301      	adds	r3, #1
 8002f12:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002f16:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002f1a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002f1e:	d9c4      	bls.n	8002eaa <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f20:	2201      	movs	r2, #1
 8002f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f26:	4804      	ldr	r0, [pc, #16]	; (8002f38 <ILI9341_Draw_Image+0x358>)
 8002f28:	f001 fb14 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002f2c:	bf00      	nop
 8002f2e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	20000444 	.word	0x20000444

08002f40 <ILI9341_SPI_Send>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002f4a:	1df9      	adds	r1, r7, #7
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <ILI9341_SPI_Send+0x20>)
 8002f52:	f002 fefd 	bl	8005d50 <HAL_SPI_Transmit>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000444 	.word	0x20000444

08002f64 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f74:	480b      	ldr	r0, [pc, #44]	; (8002fa4 <ILI9341_Write_Command+0x40>)
 8002f76:	f001 faed 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f80:	4808      	ldr	r0, [pc, #32]	; (8002fa4 <ILI9341_Write_Command+0x40>)
 8002f82:	f001 fae7 	bl	8004554 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ffd9 	bl	8002f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f94:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <ILI9341_Write_Command+0x40>)
 8002f96:	f001 fadd 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020800 	.word	0x40020800

08002fa8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb8:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <ILI9341_Write_Data+0x40>)
 8002fba:	f001 facb 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc4:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <ILI9341_Write_Data+0x40>)
 8002fc6:	f001 fac5 	bl	8004554 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ffb7 	bl	8002f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <ILI9341_Write_Data+0x40>)
 8002fda:	f001 fabb 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40020800 	.word	0x40020800

08002fec <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	80fb      	strh	r3, [r7, #6]
 8002ffe:	4603      	mov	r3, r0
 8003000:	80bb      	strh	r3, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]
 8003006:	4613      	mov	r3, r2
 8003008:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800300a:	202a      	movs	r0, #42	; 0x2a
 800300c:	f7ff ffaa 	bl	8002f64 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	b29b      	uxth	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ffc5 	bl	8002fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ffc0 	bl	8002fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	b29b      	uxth	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ffb9 	bl	8002fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ffb4 	bl	8002fa8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8003040:	202b      	movs	r0, #43	; 0x2b
 8003042:	f7ff ff8f 	bl	8002f64 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8003046:	88bb      	ldrh	r3, [r7, #4]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	b29b      	uxth	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffaa 	bl	8002fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8003054:	88bb      	ldrh	r3, [r7, #4]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ffa5 	bl	8002fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800305e:	883b      	ldrh	r3, [r7, #0]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	b29b      	uxth	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff9e 	bl	8002fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800306c:	883b      	ldrh	r3, [r7, #0]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff99 	bl	8002fa8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	f7ff ff74 	bl	8002f64 <ILI9341_Write_Command>
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}

08003084 <ILI9341_Set_Rotation>:
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8003092:	2036      	movs	r0, #54	; 0x36
 8003094:	f7ff ff66 	bl	8002f64 <ILI9341_Write_Command>
HAL_Delay(1);
 8003098:	2001      	movs	r0, #1
 800309a:	f000 fc67 	bl	800396c <HAL_Delay>
	
switch(screen_rotation) 
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d837      	bhi.n	8003114 <ILI9341_Set_Rotation+0x90>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <ILI9341_Set_Rotation+0x28>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030d3 	.word	0x080030d3
 80030b4:	080030e9 	.word	0x080030e9
 80030b8:	080030ff 	.word	0x080030ff
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80030bc:	2048      	movs	r0, #72	; 0x48
 80030be:	f7ff ff73 	bl	8002fa8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <ILI9341_Set_Rotation+0x9c>)
 80030c4:	22f0      	movs	r2, #240	; 0xf0
 80030c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <ILI9341_Set_Rotation+0xa0>)
 80030ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030ce:	801a      	strh	r2, [r3, #0]
			break;
 80030d0:	e021      	b.n	8003116 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80030d2:	2028      	movs	r0, #40	; 0x28
 80030d4:	f7ff ff68 	bl	8002fa8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <ILI9341_Set_Rotation+0x9c>)
 80030da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <ILI9341_Set_Rotation+0xa0>)
 80030e2:	22f0      	movs	r2, #240	; 0xf0
 80030e4:	801a      	strh	r2, [r3, #0]
			break;
 80030e6:	e016      	b.n	8003116 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80030e8:	2088      	movs	r0, #136	; 0x88
 80030ea:	f7ff ff5d 	bl	8002fa8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <ILI9341_Set_Rotation+0x9c>)
 80030f0:	22f0      	movs	r2, #240	; 0xf0
 80030f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <ILI9341_Set_Rotation+0xa0>)
 80030f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030fa:	801a      	strh	r2, [r3, #0]
			break;
 80030fc:	e00b      	b.n	8003116 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80030fe:	20e8      	movs	r0, #232	; 0xe8
 8003100:	f7ff ff52 	bl	8002fa8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <ILI9341_Set_Rotation+0x9c>)
 8003106:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800310a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <ILI9341_Set_Rotation+0xa0>)
 800310e:	22f0      	movs	r2, #240	; 0xf0
 8003110:	801a      	strh	r2, [r3, #0]
			break;
 8003112:	e000      	b.n	8003116 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8003114:	bf00      	nop
	}
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000006 	.word	0x20000006
 8003124:	20000004 	.word	0x20000004

08003128 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800312c:	b08d      	sub	sp, #52	; 0x34
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	6039      	str	r1, [r7, #0]
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	466b      	mov	r3, sp
 8003138:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003146:	d202      	bcs.n	800314e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	e002      	b.n	8003154 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800314e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800315a:	4840      	ldr	r0, [pc, #256]	; (800325c <ILI9341_Draw_Colour_Burst+0x134>)
 800315c:	f001 f9fa 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003166:	483d      	ldr	r0, [pc, #244]	; (800325c <ILI9341_Draw_Colour_Burst+0x134>)
 8003168:	f001 f9f4 	bl	8004554 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	b29b      	uxth	r3, r3
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8003176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003178:	460b      	mov	r3, r1
 800317a:	3b01      	subs	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	2300      	movs	r3, #0
 8003180:	4688      	mov	r8, r1
 8003182:	4699      	mov	r9, r3
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003190:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003194:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003198:	2300      	movs	r3, #0
 800319a:	460c      	mov	r4, r1
 800319c:	461d      	mov	r5, r3
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	00eb      	lsls	r3, r5, #3
 80031a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ac:	00e2      	lsls	r2, r4, #3
 80031ae:	1dcb      	adds	r3, r1, #7
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	ebad 0d03 	sub.w	sp, sp, r3
 80031b8:	466b      	mov	r3, sp
 80031ba:	3300      	adds	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c2:	e00e      	b.n	80031e2 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	4413      	add	r3, r2
 80031ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031ce:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	3301      	adds	r3, #1
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	b2d1      	uxtb	r1, r2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	3302      	adds	r3, #2
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3ec      	bcc.n	80031c4 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003204:	fb01 f202 	mul.w	r2, r1, r2
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003216:	e009      	b.n	800322c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	b29a      	uxth	r2, r3
 800321c:	230a      	movs	r3, #10
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	480f      	ldr	r0, [pc, #60]	; (8003260 <ILI9341_Draw_Colour_Burst+0x138>)
 8003222:	f002 fd95 	bl	8005d50 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	3301      	adds	r3, #1
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d3f1      	bcc.n	8003218 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	b29a      	uxth	r2, r3
 8003238:	230a      	movs	r3, #10
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	4808      	ldr	r0, [pc, #32]	; (8003260 <ILI9341_Draw_Colour_Burst+0x138>)
 800323e:	f002 fd87 	bl	8005d50 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003242:	2201      	movs	r2, #1
 8003244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003248:	4804      	ldr	r0, [pc, #16]	; (800325c <ILI9341_Draw_Colour_Burst+0x134>)
 800324a:	f001 f983 	bl	8004554 <HAL_GPIO_WritePin>
 800324e:	46b5      	mov	sp, r6
}
 8003250:	bf00      	nop
 8003252:	3734      	adds	r7, #52	; 0x34
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800325a:	bf00      	nop
 800325c:	40020800 	.word	0x40020800
 8003260:	20000444 	.word	0x20000444

08003264 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <ILI9341_Fill_Screen+0x44>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <ILI9341_Fill_Screen+0x48>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	2100      	movs	r1, #0
 800327c:	2000      	movs	r0, #0
 800327e:	f7ff feb5 	bl	8002fec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <ILI9341_Fill_Screen+0x44>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <ILI9341_Fill_Screen+0x48>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	461a      	mov	r2, r3
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff44 	bl	8003128 <ILI9341_Draw_Colour_Burst>
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000006 	.word	0x20000006
 80032ac:	20000004 	.word	0x20000004

080032b0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	80fb      	strh	r3, [r7, #6]
 80032ba:	460b      	mov	r3, r1
 80032bc:	80bb      	strh	r3, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80032c2:	4b64      	ldr	r3, [pc, #400]	; (8003454 <ILI9341_Draw_Pixel+0x1a4>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	f080 80be 	bcs.w	800344c <ILI9341_Draw_Pixel+0x19c>
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <ILI9341_Draw_Pixel+0x1a8>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	88ba      	ldrh	r2, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f080 80b7 	bcs.w	800344c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e4:	485d      	ldr	r0, [pc, #372]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 80032e6:	f001 f935 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032f0:	485a      	ldr	r0, [pc, #360]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 80032f2:	f001 f92f 	bl	8004554 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80032f6:	202a      	movs	r0, #42	; 0x2a
 80032f8:	f7ff fe22 	bl	8002f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80032fc:	2201      	movs	r2, #1
 80032fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003302:	4856      	ldr	r0, [pc, #344]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003304:	f001 f926 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003308:	2201      	movs	r2, #1
 800330a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800330e:	4853      	ldr	r0, [pc, #332]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003310:	f001 f920 	bl	8004554 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003314:	2200      	movs	r2, #0
 8003316:	f44f 7180 	mov.w	r1, #256	; 0x100
 800331a:	4850      	ldr	r0, [pc, #320]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 800331c:	f001 f91a 	bl	8004554 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	b29b      	uxth	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	753b      	strb	r3, [r7, #20]
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	757b      	strb	r3, [r7, #21]
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	3301      	adds	r3, #1
 8003334:	121b      	asrs	r3, r3, #8
 8003336:	b2db      	uxtb	r3, r3
 8003338:	75bb      	strb	r3, [r7, #22]
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8003344:	f107 0114 	add.w	r1, r7, #20
 8003348:	2301      	movs	r3, #1
 800334a:	2204      	movs	r2, #4
 800334c:	4844      	ldr	r0, [pc, #272]	; (8003460 <ILI9341_Draw_Pixel+0x1b0>)
 800334e:	f002 fcff 	bl	8005d50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003352:	2201      	movs	r2, #1
 8003354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003358:	4840      	ldr	r0, [pc, #256]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 800335a:	f001 f8fb 	bl	8004554 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003364:	483d      	ldr	r0, [pc, #244]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003366:	f001 f8f5 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800336a:	2200      	movs	r2, #0
 800336c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003370:	483a      	ldr	r0, [pc, #232]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003372:	f001 f8ef 	bl	8004554 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8003376:	202b      	movs	r0, #43	; 0x2b
 8003378:	f7ff fde2 	bl	8002f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800337c:	2201      	movs	r2, #1
 800337e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003382:	4836      	ldr	r0, [pc, #216]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003384:	f001 f8e6 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003388:	2201      	movs	r2, #1
 800338a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338e:	4833      	ldr	r0, [pc, #204]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003390:	f001 f8e0 	bl	8004554 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800339a:	4830      	ldr	r0, [pc, #192]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 800339c:	f001 f8da 	bl	8004554 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80033a0:	88bb      	ldrh	r3, [r7, #4]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	743b      	strb	r3, [r7, #16]
 80033aa:	88bb      	ldrh	r3, [r7, #4]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	747b      	strb	r3, [r7, #17]
 80033b0:	88bb      	ldrh	r3, [r7, #4]
 80033b2:	3301      	adds	r3, #1
 80033b4:	121b      	asrs	r3, r3, #8
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	74bb      	strb	r3, [r7, #18]
 80033ba:	88bb      	ldrh	r3, [r7, #4]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80033c4:	f107 0110 	add.w	r1, r7, #16
 80033c8:	2301      	movs	r3, #1
 80033ca:	2204      	movs	r2, #4
 80033cc:	4824      	ldr	r0, [pc, #144]	; (8003460 <ILI9341_Draw_Pixel+0x1b0>)
 80033ce:	f002 fcbf 	bl	8005d50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80033d2:	2201      	movs	r2, #1
 80033d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033d8:	4820      	ldr	r0, [pc, #128]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 80033da:	f001 f8bb 	bl	8004554 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80033de:	2200      	movs	r2, #0
 80033e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e4:	481d      	ldr	r0, [pc, #116]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 80033e6:	f001 f8b5 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033f0:	481a      	ldr	r0, [pc, #104]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 80033f2:	f001 f8af 	bl	8004554 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80033f6:	202c      	movs	r0, #44	; 0x2c
 80033f8:	f7ff fda2 	bl	8002f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80033fc:	2201      	movs	r2, #1
 80033fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003402:	4816      	ldr	r0, [pc, #88]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003404:	f001 f8a6 	bl	8004554 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003408:	2201      	movs	r2, #1
 800340a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800340e:	4813      	ldr	r0, [pc, #76]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003410:	f001 f8a0 	bl	8004554 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003414:	2200      	movs	r2, #0
 8003416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800341a:	4810      	ldr	r0, [pc, #64]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 800341c:	f001 f89a 	bl	8004554 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	b29b      	uxth	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	733b      	strb	r3, [r7, #12]
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003430:	f107 010c 	add.w	r1, r7, #12
 8003434:	2301      	movs	r3, #1
 8003436:	2202      	movs	r2, #2
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <ILI9341_Draw_Pixel+0x1b0>)
 800343a:	f002 fc89 	bl	8005d50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003444:	4805      	ldr	r0, [pc, #20]	; (800345c <ILI9341_Draw_Pixel+0x1ac>)
 8003446:	f001 f885 	bl	8004554 <HAL_GPIO_WritePin>
 800344a:	e000      	b.n	800344e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800344c:	bf00      	nop
	
}
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000006 	.word	0x20000006
 8003458:	20000004 	.word	0x20000004
 800345c:	40020800 	.word	0x40020800
 8003460:	20000444 	.word	0x20000444

08003464 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4604      	mov	r4, r0
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4623      	mov	r3, r4
 8003474:	80fb      	strh	r3, [r7, #6]
 8003476:	4603      	mov	r3, r0
 8003478:	80bb      	strh	r3, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	807b      	strh	r3, [r7, #2]
 800347e:	4613      	mov	r3, r2
 8003480:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <ILI9341_Draw_Rectangle+0xb0>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	429a      	cmp	r2, r3
 800348c:	d23d      	bcs.n	800350a <ILI9341_Draw_Rectangle+0xa6>
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <ILI9341_Draw_Rectangle+0xb4>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	88ba      	ldrh	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d237      	bcs.n	800350a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4413      	add	r3, r2
 80034a0:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <ILI9341_Draw_Rectangle+0xb0>)
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	b292      	uxth	r2, r2
 80034a6:	4293      	cmp	r3, r2
 80034a8:	dd05      	ble.n	80034b6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <ILI9341_Draw_Rectangle+0xb0>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80034b6:	88ba      	ldrh	r2, [r7, #4]
 80034b8:	883b      	ldrh	r3, [r7, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <ILI9341_Draw_Rectangle+0xb4>)
 80034be:	8812      	ldrh	r2, [r2, #0]
 80034c0:	b292      	uxth	r2, r2
 80034c2:	4293      	cmp	r3, r2
 80034c4:	dd05      	ble.n	80034d2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <ILI9341_Draw_Rectangle+0xb4>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	88bb      	ldrh	r3, [r7, #4]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	4413      	add	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29c      	uxth	r4, r3
 80034de:	88ba      	ldrh	r2, [r7, #4]
 80034e0:	883b      	ldrh	r3, [r7, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	88b9      	ldrh	r1, [r7, #4]
 80034ec:	88f8      	ldrh	r0, [r7, #6]
 80034ee:	4622      	mov	r2, r4
 80034f0:	f7ff fd7c 	bl	8002fec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80034f4:	883b      	ldrh	r3, [r7, #0]
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	8b3b      	ldrh	r3, [r7, #24]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fe10 	bl	8003128 <ILI9341_Draw_Colour_Burst>
 8003508:	e000      	b.n	800350c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800350a:	bf00      	nop
}
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	20000006 	.word	0x20000006
 8003518:	20000004 	.word	0x20000004

0800351c <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4604      	mov	r4, r0
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4623      	mov	r3, r4
 800352c:	80fb      	strh	r3, [r7, #6]
 800352e:	4603      	mov	r3, r0
 8003530:	80bb      	strh	r3, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	807b      	strh	r3, [r7, #2]
 8003536:	4613      	mov	r3, r2
 8003538:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <ILI9341_Draw_Horizontal_Line+0x80>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	429a      	cmp	r2, r3
 8003544:	d225      	bcs.n	8003592 <ILI9341_Draw_Horizontal_Line+0x76>
 8003546:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <ILI9341_Draw_Horizontal_Line+0x84>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	88ba      	ldrh	r2, [r7, #4]
 800354e:	429a      	cmp	r2, r3
 8003550:	d21f      	bcs.n	8003592 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	4413      	add	r3, r2
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <ILI9341_Draw_Horizontal_Line+0x80>)
 800355a:	8812      	ldrh	r2, [r2, #0]
 800355c:	b292      	uxth	r2, r2
 800355e:	4293      	cmp	r3, r2
 8003560:	dd05      	ble.n	800356e <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <ILI9341_Draw_Horizontal_Line+0x80>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29a      	uxth	r2, r3
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	4413      	add	r3, r2
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	88bb      	ldrh	r3, [r7, #4]
 800357c:	88b9      	ldrh	r1, [r7, #4]
 800357e:	88f8      	ldrh	r0, [r7, #6]
 8003580:	f7ff fd34 	bl	8002fec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	883b      	ldrh	r3, [r7, #0]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fdcc 	bl	8003128 <ILI9341_Draw_Colour_Burst>
 8003590:	e000      	b.n	8003594 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003592:	bf00      	nop
}
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bd90      	pop	{r4, r7, pc}
 800359a:	bf00      	nop
 800359c:	20000006 	.word	0x20000006
 80035a0:	20000004 	.word	0x20000004

080035a4 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	80fb      	strh	r3, [r7, #6]
 80035b6:	4603      	mov	r3, r0
 80035b8:	80bb      	strh	r3, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]
 80035be:	4613      	mov	r3, r2
 80035c0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <ILI9341_Draw_Vertical_Line+0x80>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d225      	bcs.n	800361a <ILI9341_Draw_Vertical_Line+0x76>
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <ILI9341_Draw_Vertical_Line+0x84>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	88ba      	ldrh	r2, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d21f      	bcs.n	800361a <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 80035da:	88ba      	ldrh	r2, [r7, #4]
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	4413      	add	r3, r2
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <ILI9341_Draw_Vertical_Line+0x84>)
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	b292      	uxth	r2, r2
 80035e6:	4293      	cmp	r3, r2
 80035e8:	dd05      	ble.n	80035f6 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <ILI9341_Draw_Vertical_Line+0x84>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	88bb      	ldrh	r3, [r7, #4]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80035f6:	88ba      	ldrh	r2, [r7, #4]
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	4413      	add	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29b      	uxth	r3, r3
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	88b9      	ldrh	r1, [r7, #4]
 8003606:	88f8      	ldrh	r0, [r7, #6]
 8003608:	f7ff fcf0 	bl	8002fec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 800360c:	887a      	ldrh	r2, [r7, #2]
 800360e:	883b      	ldrh	r3, [r7, #0]
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fd88 	bl	8003128 <ILI9341_Draw_Colour_Burst>
 8003618:	e000      	b.n	800361c <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800361a:	bf00      	nop
}
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	20000006 	.word	0x20000006
 8003628:	20000004 	.word	0x20000004

0800362c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8003632:	2310      	movs	r3, #16
 8003634:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 800363a:	e019      	b.n	8003670 <TP_Read+0x44>
    {
        value <<= 1;
 800363c:	88bb      	ldrh	r3, [r7, #4]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003642:	2201      	movs	r2, #1
 8003644:	2108      	movs	r1, #8
 8003646:	480e      	ldr	r0, [pc, #56]	; (8003680 <TP_Read+0x54>)
 8003648:	f000 ff84 	bl	8004554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800364c:	2200      	movs	r2, #0
 800364e:	2108      	movs	r1, #8
 8003650:	480b      	ldr	r0, [pc, #44]	; (8003680 <TP_Read+0x54>)
 8003652:	f000 ff7f 	bl	8004554 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8003656:	2110      	movs	r1, #16
 8003658:	4809      	ldr	r0, [pc, #36]	; (8003680 <TP_Read+0x54>)
 800365a:	f000 ff63 	bl	8004524 <HAL_GPIO_ReadPin>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <TP_Read+0x3e>
        {
            value++;
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	3301      	adds	r3, #1
 8003668:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	3b01      	subs	r3, #1
 800366e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e2      	bne.n	800363c <TP_Read+0x10>
    };

    return value;
 8003676:	88bb      	ldrh	r3, [r7, #4]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000

08003684 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 800368e:	2308      	movs	r3, #8
 8003690:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8003692:	2200      	movs	r2, #0
 8003694:	2108      	movs	r1, #8
 8003696:	4815      	ldr	r0, [pc, #84]	; (80036ec <TP_Write+0x68>)
 8003698:	f000 ff5c 	bl	8004554 <HAL_GPIO_WritePin>
	
    while(i > 0)
 800369c:	e01e      	b.n	80036dc <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da05      	bge.n	80036b2 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2120      	movs	r1, #32
 80036aa:	4810      	ldr	r0, [pc, #64]	; (80036ec <TP_Write+0x68>)
 80036ac:	f000 ff52 	bl	8004554 <HAL_GPIO_WritePin>
 80036b0:	e004      	b.n	80036bc <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2120      	movs	r1, #32
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <TP_Write+0x68>)
 80036b8:	f000 ff4c 	bl	8004554 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80036c2:	2201      	movs	r2, #1
 80036c4:	2108      	movs	r1, #8
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <TP_Write+0x68>)
 80036c8:	f000 ff44 	bl	8004554 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 80036cc:	2200      	movs	r2, #0
 80036ce:	2108      	movs	r1, #8
 80036d0:	4806      	ldr	r0, [pc, #24]	; (80036ec <TP_Write+0x68>)
 80036d2:	f000 ff3f 	bl	8004554 <HAL_GPIO_WritePin>
        i--;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	3b01      	subs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1dd      	bne.n	800369e <TP_Write+0x1a>
    };
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000

080036f0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80036f8:	2201      	movs	r2, #1
 80036fa:	2108      	movs	r1, #8
 80036fc:	485a      	ldr	r0, [pc, #360]	; (8003868 <TP_Read_Coordinates+0x178>)
 80036fe:	f000 ff29 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8003702:	2201      	movs	r2, #1
 8003704:	2120      	movs	r1, #32
 8003706:	4858      	ldr	r0, [pc, #352]	; (8003868 <TP_Read_Coordinates+0x178>)
 8003708:	f000 ff24 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 800370c:	2201      	movs	r2, #1
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4855      	ldr	r0, [pc, #340]	; (8003868 <TP_Read_Coordinates+0x178>)
 8003712:	f000 ff1f 	bl	8004554 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 800371a:	2300      	movs	r3, #0
 800371c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8003722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003726:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800372c:	2200      	movs	r2, #0
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	484d      	ldr	r0, [pc, #308]	; (8003868 <TP_Read_Coordinates+0x178>)
 8003732:	f000 ff0f 	bl	8004554 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003736:	e023      	b.n	8003780 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8003738:	2090      	movs	r0, #144	; 0x90
 800373a:	f7ff ffa3 	bl	8003684 <TP_Write>

				rawy = TP_Read();	
 800373e:	f7ff ff75 	bl	800362c <TP_Read>
 8003742:	4603      	mov	r3, r0
 8003744:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	4413      	add	r3, r2
 800374c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8003756:	20d0      	movs	r0, #208	; 0xd0
 8003758:	f7ff ff94 	bl	8003684 <TP_Write>
        rawx = TP_Read();
 800375c:	f7ff ff66 	bl	800362c <TP_Read>
 8003760:	4603      	mov	r3, r0
 8003762:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8003764:	89bb      	ldrh	r3, [r7, #12]
 8003766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003768:	4413      	add	r3, r2
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 800376c:	89bb      	ldrh	r3, [r7, #12]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	61fb      	str	r3, [r7, #28]
        samples--;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3b01      	subs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
				counted_samples++;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3301      	adds	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <TP_Read_Coordinates+0xa4>
 8003786:	2104      	movs	r1, #4
 8003788:	4837      	ldr	r0, [pc, #220]	; (8003868 <TP_Read_Coordinates+0x178>)
 800378a:	f000 fecb 	bl	8004524 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0d1      	beq.n	8003738 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003794:	2201      	movs	r2, #1
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	4833      	ldr	r0, [pc, #204]	; (8003868 <TP_Read_Coordinates+0x178>)
 800379a:	f000 fedb 	bl	8004554 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a4:	d14d      	bne.n	8003842 <TP_Read_Coordinates+0x152>
 80037a6:	2104      	movs	r1, #4
 80037a8:	482f      	ldr	r0, [pc, #188]	; (8003868 <TP_Read_Coordinates+0x178>)
 80037aa:	f000 febb 	bl	8004524 <HAL_GPIO_ReadPin>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d146      	bne.n	8003842 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 80037d0:	89bb      	ldrh	r3, [r7, #12]
 80037d2:	425b      	negs	r3, r3
 80037d4:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	425b      	negs	r3, r3
 80037da:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80037dc:	89ba      	ldrh	r2, [r7, #12]
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <TP_Read_Coordinates+0x17c>)
 80037e0:	fba3 1302 	umull	r1, r3, r3, r2
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	0852      	lsrs	r2, r2, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037fa:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003860 <TP_Read_Coordinates+0x170>
 80037fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003806:	ee17 3a90 	vmov	r3, s15
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8003810:	89fb      	ldrh	r3, [r7, #14]
 8003812:	4a17      	ldr	r2, [pc, #92]	; (8003870 <TP_Read_Coordinates+0x180>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	09db      	lsrs	r3, r3, #7
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b0f      	subs	r3, #15
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003826:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003860 <TP_Read_Coordinates+0x170>
 800382a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3302      	adds	r3, #2
 8003832:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003836:	ee17 2a90 	vmov	r2, s15
 800383a:	b292      	uxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800383e:	2301      	movs	r3, #1
 8003840:	e007      	b.n	8003852 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3302      	adds	r3, #2
 800384c:	2200      	movs	r2, #0
 800384e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8003850:	2300      	movs	r3, #0
		}
}
 8003852:	4618      	mov	r0, r3
 8003854:	3728      	adds	r7, #40	; 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	f3af 8000 	nop.w
 8003860:	28f5c28f 	.word	0x28f5c28f
 8003864:	3ff28f5c 	.word	0x3ff28f5c
 8003868:	40021000 	.word	0x40021000
 800386c:	e01e01e1 	.word	0xe01e01e1
 8003870:	a0a0a0a1 	.word	0xa0a0a0a1

08003874 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003878:	2104      	movs	r1, #4
 800387a:	4805      	ldr	r0, [pc, #20]	; (8003890 <TP_Touchpad_Pressed+0x1c>)
 800387c:	f000 fe52 	bl	8004524 <HAL_GPIO_ReadPin>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 800388a:	2300      	movs	r3, #0
	}
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000

08003894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_Init+0x34>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_Init+0x34>)
 800389e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_Init+0x34>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <HAL_Init+0x34>)
 80038aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b0:	2003      	movs	r0, #3
 80038b2:	f000 f931 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f000 f808 	bl	80038cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038bc:	f7fe fbae 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023c00 	.word	0x40023c00

080038cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_InitTick+0x54>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_InitTick+0x58>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f93b 	bl	8003b66 <HAL_SYSTICK_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00e      	b.n	8003918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d80a      	bhi.n	8003916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003900:	2200      	movs	r2, #0
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	f000 f911 	bl	8003b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800390c:	4a06      	ldr	r2, [pc, #24]	; (8003928 <HAL_InitTick+0x5c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000000 	.word	0x20000000
 8003924:	2000000c 	.word	0x2000000c
 8003928:	20000008 	.word	0x20000008

0800392c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_IncTick+0x20>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_IncTick+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_IncTick+0x24>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	2000000c 	.word	0x2000000c
 8003950:	20000a88 	.word	0x20000a88

08003954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return uwTick;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_GetTick+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000a88 	.word	0x20000a88

0800396c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff ffee 	bl	8003954 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d005      	beq.n	8003992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_Delay+0x44>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003992:	bf00      	nop
 8003994:	f7ff ffde 	bl	8003954 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d8f7      	bhi.n	8003994 <HAL_Delay+0x28>
  {
  }
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <__NVIC_SetPriorityGrouping>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <__NVIC_SetPriorityGrouping+0x40>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x40>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00
 80039f8:	05fa0000 	.word	0x05fa0000

080039fc <__NVIC_GetPriorityGrouping>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_SetPriority>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae4:	d301      	bcc.n	8003aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00f      	b.n	8003b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <SysTick_Config+0x40>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af2:	210f      	movs	r1, #15
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f7ff ff8e 	bl	8003a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <SysTick_Config+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b02:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <SysTick_Config+0x40>)
 8003b04:	2207      	movs	r2, #7
 8003b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	e000e010 	.word	0xe000e010

08003b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff47 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b40:	f7ff ff5c 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff ff8e 	bl	8003a6c <NVIC_EncodePriority>
 8003b50:	4602      	mov	r2, r0
 8003b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff5d 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffb0 	bl	8003ad4 <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06a      	b.n	8003c68 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2223      	movs	r2, #35	; 0x23
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fc ff67 	bl	8000a78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_ETH_Init+0xf0>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_ETH_Init+0xf0>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_ETH_Init+0xf0>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_ETH_Init+0xf4>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <HAL_ETH_Init+0xf4>)
 8003bc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bcc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bce:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <HAL_ETH_Init+0xf4>)
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4927      	ldr	r1, [pc, #156]	; (8003c74 <HAL_ETH_Init+0xf4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_ETH_Init+0xf4>)
 8003bde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf8:	f7ff feac 	bl	8003954 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bfe:	e011      	b.n	8003c24 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c00:	f7ff fea8 	bl	8003954 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c0e:	d909      	bls.n	8003c24 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2204      	movs	r2, #4
 8003c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	22e0      	movs	r2, #224	; 0xe0
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e021      	b.n	8003c68 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e4      	bne.n	8003c00 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f958 	bl	8003eec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f9ff 	bl	8004040 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa55 	bl	80040f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f9bd 	bl	8003fd0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2210      	movs	r2, #16
 8003c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40013800 	.word	0x40013800

08003c78 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <ETH_SetMACConfig+0x15c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	7c1b      	ldrb	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <ETH_SetMACConfig+0x28>
 8003c9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c9e:	e000      	b.n	8003ca2 <ETH_SetMACConfig+0x2a>
 8003ca0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7c5b      	ldrb	r3, [r3, #17]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <ETH_SetMACConfig+0x38>
 8003caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cae:	e000      	b.n	8003cb2 <ETH_SetMACConfig+0x3a>
 8003cb0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cb2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	7fdb      	ldrb	r3, [r3, #31]
 8003cbe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003cc0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003cc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	7f92      	ldrb	r2, [r2, #30]
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	d102      	bne.n	8003cd6 <ETH_SetMACConfig+0x5e>
 8003cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd4:	e000      	b.n	8003cd8 <ETH_SetMACConfig+0x60>
 8003cd6:	2200      	movs	r2, #0
                        macconf->Speed |
 8003cd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7f1b      	ldrb	r3, [r3, #28]
 8003cde:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ce0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ce6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	791b      	ldrb	r3, [r3, #4]
 8003cec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	d102      	bne.n	8003d00 <ETH_SetMACConfig+0x88>
 8003cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfe:	e000      	b.n	8003d02 <ETH_SetMACConfig+0x8a>
 8003d00:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	7bdb      	ldrb	r3, [r3, #15]
 8003d08:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d0a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d18:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d32:	2001      	movs	r0, #1
 8003d34:	f7ff fe1a 	bl	800396c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d56:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d5e:	2a00      	cmp	r2, #0
 8003d60:	d101      	bne.n	8003d66 <ETH_SetMACConfig+0xee>
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	e000      	b.n	8003d68 <ETH_SetMACConfig+0xf0>
 8003d66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d68:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d76:	2a01      	cmp	r2, #1
 8003d78:	d101      	bne.n	8003d7e <ETH_SetMACConfig+0x106>
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	e000      	b.n	8003d80 <ETH_SetMACConfig+0x108>
 8003d7e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d80:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d88:	2a01      	cmp	r2, #1
 8003d8a:	d101      	bne.n	8003d90 <ETH_SetMACConfig+0x118>
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	e000      	b.n	8003d92 <ETH_SetMACConfig+0x11a>
 8003d90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d9a:	2a01      	cmp	r2, #1
 8003d9c:	d101      	bne.n	8003da2 <ETH_SetMACConfig+0x12a>
 8003d9e:	2202      	movs	r2, #2
 8003da0:	e000      	b.n	8003da4 <ETH_SetMACConfig+0x12c>
 8003da2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003da4:	4313      	orrs	r3, r2
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f7ff fdd5 	bl	800396c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	619a      	str	r2, [r3, #24]
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	ff20810f 	.word	0xff20810f

08003dd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4b3d      	ldr	r3, [pc, #244]	; (8003ee8 <ETH_SetDMAConfig+0x110>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	7b1b      	ldrb	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <ETH_SetDMAConfig+0x2c>
 8003dfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e02:	e000      	b.n	8003e06 <ETH_SetDMAConfig+0x2e>
 8003e04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	7b5b      	ldrb	r3, [r3, #13]
 8003e0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	7f52      	ldrb	r2, [r2, #29]
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	d102      	bne.n	8003e1c <ETH_SetDMAConfig+0x44>
 8003e16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e1a:	e000      	b.n	8003e1e <ETH_SetDMAConfig+0x46>
 8003e1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	7b9b      	ldrb	r3, [r3, #14]
 8003e24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	7f1b      	ldrb	r3, [r3, #28]
 8003e32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7f9b      	ldrb	r3, [r3, #30]
 8003e3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7ff fd7c 	bl	800396c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	791b      	ldrb	r3, [r3, #4]
 8003e86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ea0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003ea2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003eaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003eb0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ebe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7ff fd4d 	bl	800396c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	f8de3f23 	.word	0xf8de3f23

08003eec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b0a6      	sub	sp, #152	; 0x98
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f00:	2300      	movs	r3, #0
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe86 	bl	8003c78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fa6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff08 	bl	8003dd8 <ETH_SetDMAConfig>
}
 8003fc8:	bf00      	nop
 8003fca:	3798      	adds	r7, #152	; 0x98
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3305      	adds	r3, #5
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	3204      	adds	r2, #4
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <ETH_MACAddressConfig+0x68>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	061a      	lsls	r2, r3, #24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3302      	adds	r3, #2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3301      	adds	r3, #1
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	4313      	orrs	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <ETH_MACAddressConfig+0x6c>)
 8004022:	4413      	add	r3, r2
 8004024:	461a      	mov	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40028040 	.word	0x40028040
 800403c:	40028044 	.word	0x40028044

08004040 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e03e      	b.n	80040cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68d9      	ldr	r1, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2200      	movs	r2, #0
 800406a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	3206      	adds	r2, #6
 8004080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d80c      	bhi.n	80040b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68d9      	ldr	r1, [r3, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	440b      	add	r3, r1
 80040a8:	461a      	mov	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	e004      	b.n	80040ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d9bd      	bls.n	800404e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e4:	611a      	str	r2, [r3, #16]
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e046      	b.n	800418e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6919      	ldr	r1, [r3, #16]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800413c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004144:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	3212      	adds	r2, #18
 800415a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d80c      	bhi.n	800417e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6919      	ldr	r1, [r3, #16]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	e004      	b.n	8004188 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d9b5      	bls.n	8004100 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041be:	60da      	str	r2, [r3, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e175      	b.n	80044d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041ec:	2201      	movs	r2, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	429a      	cmp	r2, r3
 8004206:	f040 8164 	bne.w	80044d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d005      	beq.n	8004222 <HAL_GPIO_Init+0x56>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d130      	bne.n	8004284 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	2203      	movs	r2, #3
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004258:	2201      	movs	r2, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 0201 	and.w	r2, r3, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b03      	cmp	r3, #3
 800428e:	d017      	beq.n	80042c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d123      	bne.n	8004314 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	08da      	lsrs	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3208      	adds	r2, #8
 80042d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	220f      	movs	r2, #15
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	08da      	lsrs	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3208      	adds	r2, #8
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0203 	and.w	r2, r3, #3
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80be 	beq.w	80044d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	4b66      	ldr	r3, [pc, #408]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	4a65      	ldr	r2, [pc, #404]	; (80044f0 <HAL_GPIO_Init+0x324>)
 800435c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004360:	6453      	str	r3, [r2, #68]	; 0x44
 8004362:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800436e:	4a61      	ldr	r2, [pc, #388]	; (80044f4 <HAL_GPIO_Init+0x328>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <HAL_GPIO_Init+0x32c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d037      	beq.n	800440a <HAL_GPIO_Init+0x23e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a57      	ldr	r2, [pc, #348]	; (80044fc <HAL_GPIO_Init+0x330>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_GPIO_Init+0x23a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_GPIO_Init+0x334>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02b      	beq.n	8004402 <HAL_GPIO_Init+0x236>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a55      	ldr	r2, [pc, #340]	; (8004504 <HAL_GPIO_Init+0x338>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d025      	beq.n	80043fe <HAL_GPIO_Init+0x232>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a54      	ldr	r2, [pc, #336]	; (8004508 <HAL_GPIO_Init+0x33c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <HAL_GPIO_Init+0x22e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a53      	ldr	r2, [pc, #332]	; (800450c <HAL_GPIO_Init+0x340>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d019      	beq.n	80043f6 <HAL_GPIO_Init+0x22a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a52      	ldr	r2, [pc, #328]	; (8004510 <HAL_GPIO_Init+0x344>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_GPIO_Init+0x226>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a51      	ldr	r2, [pc, #324]	; (8004514 <HAL_GPIO_Init+0x348>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00d      	beq.n	80043ee <HAL_GPIO_Init+0x222>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a50      	ldr	r2, [pc, #320]	; (8004518 <HAL_GPIO_Init+0x34c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <HAL_GPIO_Init+0x21e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4f      	ldr	r2, [pc, #316]	; (800451c <HAL_GPIO_Init+0x350>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_GPIO_Init+0x21a>
 80043e2:	2309      	movs	r3, #9
 80043e4:	e012      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043e6:	230a      	movs	r3, #10
 80043e8:	e010      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043ea:	2308      	movs	r3, #8
 80043ec:	e00e      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e00c      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043f2:	2306      	movs	r3, #6
 80043f4:	e00a      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043f6:	2305      	movs	r3, #5
 80043f8:	e008      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e006      	b.n	800440c <HAL_GPIO_Init+0x240>
 80043fe:	2303      	movs	r3, #3
 8004400:	e004      	b.n	800440c <HAL_GPIO_Init+0x240>
 8004402:	2302      	movs	r3, #2
 8004404:	e002      	b.n	800440c <HAL_GPIO_Init+0x240>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_GPIO_Init+0x240>
 800440a:	2300      	movs	r3, #0
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	f002 0203 	and.w	r2, r2, #3
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	4093      	lsls	r3, r2
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800441c:	4935      	ldr	r1, [pc, #212]	; (80044f4 <HAL_GPIO_Init+0x328>)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	3302      	adds	r3, #2
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_GPIO_Init+0x354>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800444e:	4a34      	ldr	r2, [pc, #208]	; (8004520 <HAL_GPIO_Init+0x354>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <HAL_GPIO_Init+0x354>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_GPIO_Init+0x354>)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_GPIO_Init+0x354>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_GPIO_Init+0x354>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HAL_GPIO_Init+0x354>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <HAL_GPIO_Init+0x354>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	f67f ae86 	bls.w	80041ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800
 8004504:	40020c00 	.word	0x40020c00
 8004508:	40021000 	.word	0x40021000
 800450c:	40021400 	.word	0x40021400
 8004510:	40021800 	.word	0x40021800
 8004514:	40021c00 	.word	0x40021c00
 8004518:	40022000 	.word	0x40022000
 800451c:	40022400 	.word	0x40022400
 8004520:	40013c00 	.word	0x40013c00

08004524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e001      	b.n	8004546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
 8004560:	4613      	mov	r3, r2
 8004562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004564:	787b      	ldrb	r3, [r7, #1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004570:	e003      	b.n	800457a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	619a      	str	r2, [r3, #24]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004586:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004588:	b08f      	sub	sp, #60	; 0x3c
 800458a:	af0a      	add	r7, sp, #40	; 0x28
 800458c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e116      	b.n	80047c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd ff8a 	bl	80024cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2203      	movs	r2, #3
 80045bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f002 fef2 	bl	80073c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	687e      	ldr	r6, [r7, #4]
 80045e4:	466d      	mov	r5, sp
 80045e6:	f106 0410 	add.w	r4, r6, #16
 80045ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80045fa:	1d33      	adds	r3, r6, #4
 80045fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f002 fe86 	bl	8007310 <USB_CoreInit>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0d7      	b.n	80047c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f002 fee0 	bl	80073e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e04a      	b.n	80046be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	333d      	adds	r3, #61	; 0x3d
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	333c      	adds	r3, #60	; 0x3c
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	b298      	uxth	r0, r3
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3344      	adds	r3, #68	; 0x44
 8004664:	4602      	mov	r2, r0
 8004666:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3340      	adds	r3, #64	; 0x40
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3348      	adds	r3, #72	; 0x48
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	334c      	adds	r3, #76	; 0x4c
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3354      	adds	r3, #84	; 0x54
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	3301      	adds	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3af      	bcc.n	8004628 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e044      	b.n	8004758 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	3301      	adds	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	d3b5      	bcc.n	80046ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	687e      	ldr	r6, [r7, #4]
 800476a:	466d      	mov	r5, sp
 800476c:	f106 0410 	add.w	r4, r6, #16
 8004770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004778:	e894 0003 	ldmia.w	r4, {r0, r1}
 800477c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004780:	1d33      	adds	r3, r6, #4
 8004782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004784:	6838      	ldr	r0, [r7, #0]
 8004786:	f002 fe79 	bl	800747c <USB_DevInit>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e014      	b.n	80047c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f80b 	bl	80047d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f003 f837 	bl	8007832 <USB_DevDisconnect>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_PCDEx_ActivateLPM+0x44>)
 8004800:	4313      	orrs	r3, r2
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	10000003 	.word	0x10000003

08004818 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40007000 	.word	0x40007000

08004838 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004842:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
 800484e:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800485a:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004866:	f7ff f875 	bl	8003954 <HAL_GetTick>
 800486a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800486c:	e009      	b.n	8004882 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800486e:	f7ff f871 	bl	8003954 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800487c:	d901      	bls.n	8004882 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e022      	b.n	80048c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d1ee      	bne.n	800486e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004890:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0f      	ldr	r2, [pc, #60]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800489c:	f7ff f85a 	bl	8003954 <HAL_GetTick>
 80048a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048a2:	e009      	b.n	80048b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048a4:	f7ff f856 	bl	8003954 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048b2:	d901      	bls.n	80048b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e007      	b.n	80048c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c4:	d1ee      	bne.n	80048a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000

080048d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048e0:	2300      	movs	r3, #0
 80048e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e29b      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 8087 	beq.w	8004a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048fc:	4b96      	ldr	r3, [pc, #600]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 030c 	and.w	r3, r3, #12
 8004904:	2b04      	cmp	r3, #4
 8004906:	d00c      	beq.n	8004922 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004908:	4b93      	ldr	r3, [pc, #588]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b08      	cmp	r3, #8
 8004912:	d112      	bne.n	800493a <HAL_RCC_OscConfig+0x62>
 8004914:	4b90      	ldr	r3, [pc, #576]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004920:	d10b      	bne.n	800493a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004922:	4b8d      	ldr	r3, [pc, #564]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d06c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x130>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d168      	bne.n	8004a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e275      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x7a>
 8004944:	4b84      	ldr	r3, [pc, #528]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a83      	ldr	r2, [pc, #524]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800494a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e02e      	b.n	80049b0 <HAL_RCC_OscConfig+0xd8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <HAL_RCC_OscConfig+0x9c>
 800495a:	4b7f      	ldr	r3, [pc, #508]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7e      	ldr	r2, [pc, #504]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b7c      	ldr	r3, [pc, #496]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7b      	ldr	r2, [pc, #492]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800496c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e01d      	b.n	80049b0 <HAL_RCC_OscConfig+0xd8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0xc0>
 800497e:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a75      	ldr	r2, [pc, #468]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b73      	ldr	r3, [pc, #460]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a72      	ldr	r2, [pc, #456]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0xd8>
 8004998:	4b6f      	ldr	r3, [pc, #444]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6e      	ldr	r2, [pc, #440]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 800499e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6b      	ldr	r2, [pc, #428]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 80049aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d013      	beq.n	80049e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fe ffcc 	bl	8003954 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c0:	f7fe ffc8 	bl	8003954 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e229      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0xe8>
 80049de:	e014      	b.n	8004a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fe ffb8 	bl	8003954 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e8:	f7fe ffb4 	bl	8003954 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e215      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fa:	4b57      	ldr	r3, [pc, #348]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x110>
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d069      	beq.n	8004aea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a16:	4b50      	ldr	r3, [pc, #320]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a22:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d11c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x190>
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d116      	bne.n	8004a68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3a:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_RCC_OscConfig+0x17a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e1e9      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a52:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	493d      	ldr	r1, [pc, #244]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	e040      	b.n	8004aea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d023      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a70:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a38      	ldr	r2, [pc, #224]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fe ff6a 	bl	8003954 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fe ff66 	bl	8003954 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e1c7      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b2d      	ldr	r3, [pc, #180]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4929      	ldr	r1, [pc, #164]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
 8004ab6:	e018      	b.n	8004aea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a26      	ldr	r2, [pc, #152]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fe ff46 	bl	8003954 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fe ff42 	bl	8003954 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1a3      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d038      	beq.n	8004b68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d019      	beq.n	8004b32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b02:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fe ff23 	bl	8003954 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b12:	f7fe ff1f 	bl	8003954 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e180      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x23a>
 8004b30:	e01a      	b.n	8004b68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_RCC_OscConfig+0x280>)
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3e:	f7fe ff09 	bl	8003954 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fe ff05 	bl	8003954 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d903      	bls.n	8004b5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e166      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
 8004b58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	4b92      	ldr	r3, [pc, #584]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ee      	bne.n	8004b46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a4 	beq.w	8004cbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b76:	4b8c      	ldr	r3, [pc, #560]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	4b89      	ldr	r3, [pc, #548]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a88      	ldr	r2, [pc, #544]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b86      	ldr	r3, [pc, #536]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9e:	4b83      	ldr	r3, [pc, #524]	; (8004dac <HAL_RCC_OscConfig+0x4d4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d118      	bne.n	8004bdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004baa:	4b80      	ldr	r3, [pc, #512]	; (8004dac <HAL_RCC_OscConfig+0x4d4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7f      	ldr	r2, [pc, #508]	; (8004dac <HAL_RCC_OscConfig+0x4d4>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb6:	f7fe fecd 	bl	8003954 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fe fec9 	bl	8003954 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b64      	cmp	r3, #100	; 0x64
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e12a      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd0:	4b76      	ldr	r3, [pc, #472]	; (8004dac <HAL_RCC_OscConfig+0x4d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x31a>
 8004be4:	4b70      	ldr	r3, [pc, #448]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a6f      	ldr	r2, [pc, #444]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	e02d      	b.n	8004c4e <HAL_RCC_OscConfig+0x376>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x33c>
 8004bfa:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	4b68      	ldr	r3, [pc, #416]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a67      	ldr	r2, [pc, #412]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
 8004c12:	e01c      	b.n	8004c4e <HAL_RCC_OscConfig+0x376>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b05      	cmp	r3, #5
 8004c1a:	d10c      	bne.n	8004c36 <HAL_RCC_OscConfig+0x35e>
 8004c1c:	4b62      	ldr	r3, [pc, #392]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a61      	ldr	r2, [pc, #388]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c22:	f043 0304 	orr.w	r3, r3, #4
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	4b5f      	ldr	r3, [pc, #380]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a5e      	ldr	r2, [pc, #376]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	e00b      	b.n	8004c4e <HAL_RCC_OscConfig+0x376>
 8004c36:	4b5c      	ldr	r3, [pc, #368]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a5b      	ldr	r2, [pc, #364]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	4b59      	ldr	r3, [pc, #356]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a58      	ldr	r2, [pc, #352]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d015      	beq.n	8004c82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c56:	f7fe fe7d 	bl	8003954 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5e:	f7fe fe79 	bl	8003954 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e0d8      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c74:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ee      	beq.n	8004c5e <HAL_RCC_OscConfig+0x386>
 8004c80:	e014      	b.n	8004cac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fe fe67 	bl	8003954 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fe fe63 	bl	8003954 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0c2      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca0:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ee      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d105      	bne.n	8004cbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	4b3d      	ldr	r3, [pc, #244]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	4a3c      	ldr	r2, [pc, #240]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80ae 	beq.w	8004e24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc8:	4b37      	ldr	r3, [pc, #220]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d06d      	beq.n	8004db0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d14b      	bne.n	8004d74 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cdc:	4b32      	ldr	r3, [pc, #200]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fe fe34 	bl	8003954 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fe fe30 	bl	8003954 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e091      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	3b01      	subs	r3, #1
 8004d28:	041b      	lsls	r3, r3, #16
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	491b      	ldr	r1, [pc, #108]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d40:	4b19      	ldr	r3, [pc, #100]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe fe02 	bl	8003954 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fe fdfe 	bl	8003954 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e05f      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d66:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x47c>
 8004d72:	e057      	b.n	8004e24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fe fde8 	bl	8003954 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fe fde4 	bl	8003954 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e045      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_RCC_OscConfig+0x4d0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4b0>
 8004da6:	e03d      	b.n	8004e24 <HAL_RCC_OscConfig+0x54c>
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004db0:	4b1f      	ldr	r3, [pc, #124]	; (8004e30 <HAL_RCC_OscConfig+0x558>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d030      	beq.n	8004e20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d129      	bne.n	8004e20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d122      	bne.n	8004e20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d119      	bne.n	8004e20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d10f      	bne.n	8004e20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800

08004e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0d0      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d910      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 020f 	bic.w	r2, r3, #15
 8004e62:	4965      	ldr	r1, [pc, #404]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b63      	ldr	r3, [pc, #396]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0b8      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d020      	beq.n	8004eca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e94:	4b59      	ldr	r3, [pc, #356]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4a58      	ldr	r2, [pc, #352]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eac:	4b53      	ldr	r3, [pc, #332]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a52      	ldr	r2, [pc, #328]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb8:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	494d      	ldr	r1, [pc, #308]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d040      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d107      	bne.n	8004eee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	4b47      	ldr	r3, [pc, #284]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d115      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e07f      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef6:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e073      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f06:	4b3d      	ldr	r3, [pc, #244]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e06b      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4936      	ldr	r1, [pc, #216]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f28:	f7fe fd14 	bl	8003954 <HAL_GetTick>
 8004f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f30:	f7fe fd10 	bl	8003954 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e053      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f46:	4b2d      	ldr	r3, [pc, #180]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 020c 	and.w	r2, r3, #12
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1eb      	bne.n	8004f30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f58:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d210      	bcs.n	8004f88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 020f 	bic.w	r2, r3, #15
 8004f6e:	4922      	ldr	r1, [pc, #136]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e032      	b.n	8004fee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4916      	ldr	r1, [pc, #88]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fb2:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	490e      	ldr	r1, [pc, #56]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fc6:	f000 f821 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	490a      	ldr	r1, [pc, #40]	; (8005000 <HAL_RCC_ClockConfig+0x1cc>)
 8004fd8:	5ccb      	ldrb	r3, [r1, r3]
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <HAL_RCC_ClockConfig+0x1d0>)
 8004fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_RCC_ClockConfig+0x1d4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc70 	bl	80038cc <HAL_InitTick>

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023c00 	.word	0x40023c00
 8004ffc:	40023800 	.word	0x40023800
 8005000:	08031a58 	.word	0x08031a58
 8005004:	20000000 	.word	0x20000000
 8005008:	20000008 	.word	0x20000008

0800500c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800500c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005010:	b094      	sub	sp, #80	; 0x50
 8005012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
 8005018:	2300      	movs	r3, #0
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501c:	2300      	movs	r3, #0
 800501e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005024:	4b79      	ldr	r3, [pc, #484]	; (800520c <HAL_RCC_GetSysClockFreq+0x200>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 030c 	and.w	r3, r3, #12
 800502c:	2b08      	cmp	r3, #8
 800502e:	d00d      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0x40>
 8005030:	2b08      	cmp	r3, #8
 8005032:	f200 80e1 	bhi.w	80051f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x34>
 800503a:	2b04      	cmp	r3, #4
 800503c:	d003      	beq.n	8005046 <HAL_RCC_GetSysClockFreq+0x3a>
 800503e:	e0db      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005040:	4b73      	ldr	r3, [pc, #460]	; (8005210 <HAL_RCC_GetSysClockFreq+0x204>)
 8005042:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005044:	e0db      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005046:	4b73      	ldr	r3, [pc, #460]	; (8005214 <HAL_RCC_GetSysClockFreq+0x208>)
 8005048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800504a:	e0d8      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800504c:	4b6f      	ldr	r3, [pc, #444]	; (800520c <HAL_RCC_GetSysClockFreq+0x200>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005056:	4b6d      	ldr	r3, [pc, #436]	; (800520c <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d063      	beq.n	800512a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005062:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_GetSysClockFreq+0x200>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	099b      	lsrs	r3, r3, #6
 8005068:	2200      	movs	r2, #0
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
 800506c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
 8005076:	2300      	movs	r3, #0
 8005078:	637b      	str	r3, [r7, #52]	; 0x34
 800507a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800507e:	4622      	mov	r2, r4
 8005080:	462b      	mov	r3, r5
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f04f 0100 	mov.w	r1, #0
 800508a:	0159      	lsls	r1, r3, #5
 800508c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005090:	0150      	lsls	r0, r2, #5
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4621      	mov	r1, r4
 8005098:	1a51      	subs	r1, r2, r1
 800509a:	6139      	str	r1, [r7, #16]
 800509c:	4629      	mov	r1, r5
 800509e:	eb63 0301 	sbc.w	r3, r3, r1
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050b0:	4659      	mov	r1, fp
 80050b2:	018b      	lsls	r3, r1, #6
 80050b4:	4651      	mov	r1, sl
 80050b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ba:	4651      	mov	r1, sl
 80050bc:	018a      	lsls	r2, r1, #6
 80050be:	4651      	mov	r1, sl
 80050c0:	ebb2 0801 	subs.w	r8, r2, r1
 80050c4:	4659      	mov	r1, fp
 80050c6:	eb63 0901 	sbc.w	r9, r3, r1
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050de:	4690      	mov	r8, r2
 80050e0:	4699      	mov	r9, r3
 80050e2:	4623      	mov	r3, r4
 80050e4:	eb18 0303 	adds.w	r3, r8, r3
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	462b      	mov	r3, r5
 80050ec:	eb49 0303 	adc.w	r3, r9, r3
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050fe:	4629      	mov	r1, r5
 8005100:	024b      	lsls	r3, r1, #9
 8005102:	4621      	mov	r1, r4
 8005104:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005108:	4621      	mov	r1, r4
 800510a:	024a      	lsls	r2, r1, #9
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	2200      	movs	r2, #0
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
 8005116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800511c:	f7fb faa4 	bl	8000668 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4613      	mov	r3, r2
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005128:	e058      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800512a:	4b38      	ldr	r3, [pc, #224]	; (800520c <HAL_RCC_GetSysClockFreq+0x200>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	099b      	lsrs	r3, r3, #6
 8005130:	2200      	movs	r2, #0
 8005132:	4618      	mov	r0, r3
 8005134:	4611      	mov	r1, r2
 8005136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800513a:	623b      	str	r3, [r7, #32]
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
 8005140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	f04f 0000 	mov.w	r0, #0
 800514c:	f04f 0100 	mov.w	r1, #0
 8005150:	0159      	lsls	r1, r3, #5
 8005152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005156:	0150      	lsls	r0, r2, #5
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4641      	mov	r1, r8
 800515e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005162:	4649      	mov	r1, r9
 8005164:	eb63 0b01 	sbc.w	fp, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800517c:	ebb2 040a 	subs.w	r4, r2, sl
 8005180:	eb63 050b 	sbc.w	r5, r3, fp
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	00eb      	lsls	r3, r5, #3
 800518e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005192:	00e2      	lsls	r2, r4, #3
 8005194:	4614      	mov	r4, r2
 8005196:	461d      	mov	r5, r3
 8005198:	4643      	mov	r3, r8
 800519a:	18e3      	adds	r3, r4, r3
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	464b      	mov	r3, r9
 80051a0:	eb45 0303 	adc.w	r3, r5, r3
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051b2:	4629      	mov	r1, r5
 80051b4:	028b      	lsls	r3, r1, #10
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051bc:	4621      	mov	r1, r4
 80051be:	028a      	lsls	r2, r1, #10
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c6:	2200      	movs	r2, #0
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	61fa      	str	r2, [r7, #28]
 80051cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d0:	f7fb fa4a 	bl	8000668 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <HAL_RCC_GetSysClockFreq+0x200>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	3301      	adds	r3, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80051ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCC_GetSysClockFreq+0x204>)
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005200:	4618      	mov	r0, r3
 8005202:	3750      	adds	r7, #80	; 0x50
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	00f42400 	.word	0x00f42400
 8005214:	007a1200 	.word	0x007a1200

08005218 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <HAL_RCC_GetHCLKFreq+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000000 	.word	0x20000000

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005234:	f7ff fff0 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0a9b      	lsrs	r3, r3, #10
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	; (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	08031a68 	.word	0x08031a68

08005258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800525c:	f7ff ffdc 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	0b5b      	lsrs	r3, r3, #13
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4903      	ldr	r1, [pc, #12]	; (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40023800 	.word	0x40023800
 800527c:	08031a68 	.word	0x08031a68

08005280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052a8:	4b69      	ldr	r3, [pc, #420]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a68      	ldr	r2, [pc, #416]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052b2:	6093      	str	r3, [r2, #8]
 80052b4:	4b66      	ldr	r3, [pc, #408]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	4964      	ldr	r1, [pc, #400]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d017      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052da:	4b5d      	ldr	r3, [pc, #372]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e8:	4959      	ldr	r1, [pc, #356]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f8:	d101      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005316:	4b4e      	ldr	r3, [pc, #312]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	494a      	ldr	r1, [pc, #296]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005334:	d101      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005336:	2301      	movs	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005352:	2301      	movs	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 808b 	beq.w	800547a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005364:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	4a39      	ldr	r2, [pc, #228]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536e:	6413      	str	r3, [r2, #64]	; 0x40
 8005370:	4b37      	ldr	r3, [pc, #220]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800537c:	4b35      	ldr	r3, [pc, #212]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a34      	ldr	r2, [pc, #208]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005388:	f7fe fae4 	bl	8003954 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005390:	f7fe fae0 	bl	8003954 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	; 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e38f      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053a2:	4b2c      	ldr	r3, [pc, #176]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d035      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d02e      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053cc:	4b20      	ldr	r3, [pc, #128]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053d6:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053ee:	4a18      	ldr	r2, [pc, #96]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d114      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fe faa8 	bl	8003954 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005406:	e00a      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fe faa4 	bl	8003954 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e351      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0ee      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d111      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005446:	400b      	ands	r3, r1
 8005448:	4901      	ldr	r1, [pc, #4]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
 800544e:	e00b      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005450:	40023800 	.word	0x40023800
 8005454:	40007000 	.word	0x40007000
 8005458:	0ffffcff 	.word	0x0ffffcff
 800545c:	4bac      	ldr	r3, [pc, #688]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4aab      	ldr	r2, [pc, #684]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005462:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005466:	6093      	str	r3, [r2, #8]
 8005468:	4ba9      	ldr	r3, [pc, #676]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005474:	49a6      	ldr	r1, [pc, #664]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005476:	4313      	orrs	r3, r2
 8005478:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005486:	4ba2      	ldr	r3, [pc, #648]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548c:	4aa0      	ldr	r2, [pc, #640]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005496:	4b9e      	ldr	r3, [pc, #632]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005498:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	499b      	ldr	r1, [pc, #620]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054b4:	4b96      	ldr	r3, [pc, #600]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c2:	4993      	ldr	r1, [pc, #588]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054d6:	4b8e      	ldr	r3, [pc, #568]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e4:	498a      	ldr	r1, [pc, #552]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054f8:	4b85      	ldr	r3, [pc, #532]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	4982      	ldr	r1, [pc, #520]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800551a:	4b7d      	ldr	r3, [pc, #500]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4979      	ldr	r1, [pc, #484]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553c:	4b74      	ldr	r3, [pc, #464]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	4971      	ldr	r1, [pc, #452]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800555e:	4b6c      	ldr	r3, [pc, #432]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f023 020c 	bic.w	r2, r3, #12
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556c:	4968      	ldr	r1, [pc, #416]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005580:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558e:	4960      	ldr	r1, [pc, #384]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a2:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b0:	4957      	ldr	r1, [pc, #348]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c4:	4b52      	ldr	r3, [pc, #328]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	494f      	ldr	r1, [pc, #316]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055e6:	4b4a      	ldr	r3, [pc, #296]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	4946      	ldr	r1, [pc, #280]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005608:	4b41      	ldr	r3, [pc, #260]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005616:	493e      	ldr	r1, [pc, #248]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800562a:	4b39      	ldr	r3, [pc, #228]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	4935      	ldr	r1, [pc, #212]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800564c:	4b30      	ldr	r3, [pc, #192]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800565a:	492d      	ldr	r1, [pc, #180]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d011      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800566e:	4b28      	ldr	r3, [pc, #160]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567c:	4924      	ldr	r1, [pc, #144]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800568c:	d101      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800569e:	2301      	movs	r3, #1
 80056a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ae:	4b18      	ldr	r3, [pc, #96]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056bc:	4914      	ldr	r1, [pc, #80]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e0:	490b      	ldr	r1, [pc, #44]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00f      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005704:	4902      	ldr	r1, [pc, #8]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800570c:	e002      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005720:	4b8a      	ldr	r3, [pc, #552]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	4986      	ldr	r1, [pc, #536]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005744:	4b81      	ldr	r3, [pc, #516]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005754:	497d      	ldr	r1, [pc, #500]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d006      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80d6 	beq.w	800591c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005770:	4b76      	ldr	r3, [pc, #472]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a75      	ldr	r2, [pc, #468]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800577a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577c:	f7fe f8ea 	bl	8003954 <HAL_GetTick>
 8005780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005784:	f7fe f8e6 	bl	8003954 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e195      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005796:	4b6d      	ldr	r3, [pc, #436]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d021      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11d      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057b6:	4b65      	ldr	r3, [pc, #404]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057c4:	4b61      	ldr	r3, [pc, #388]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ca:	0e1b      	lsrs	r3, r3, #24
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	019a      	lsls	r2, r3, #6
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	071b      	lsls	r3, r3, #28
 80057ea:	4958      	ldr	r1, [pc, #352]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02e      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581c:	d129      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800581e:	4b4b      	ldr	r3, [pc, #300]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800582c:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005832:	0f1b      	lsrs	r3, r3, #28
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	019a      	lsls	r2, r3, #6
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	061b      	lsls	r3, r3, #24
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	071b      	lsls	r3, r3, #28
 8005852:	493e      	ldr	r1, [pc, #248]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800585a:	4b3c      	ldr	r3, [pc, #240]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005860:	f023 021f 	bic.w	r2, r3, #31
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	3b01      	subs	r3, #1
 800586a:	4938      	ldr	r1, [pc, #224]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01d      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	0e1b      	lsrs	r3, r3, #24
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800588c:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800588e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005892:	0f1b      	lsrs	r3, r3, #28
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	019a      	lsls	r2, r3, #6
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	431a      	orrs	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	061b      	lsls	r3, r3, #24
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	4926      	ldr	r1, [pc, #152]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d011      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	019a      	lsls	r2, r3, #6
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	071b      	lsls	r3, r3, #28
 80058e2:	491a      	ldr	r1, [pc, #104]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058ea:	4b18      	ldr	r3, [pc, #96]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f6:	f7fe f82d 	bl	8003954 <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058fe:	f7fe f829 	bl	8003954 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b64      	cmp	r3, #100	; 0x64
 800590a:	d901      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0d8      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005910:	4b0e      	ldr	r3, [pc, #56]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b01      	cmp	r3, #1
 8005920:	f040 80ce 	bne.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005924:	4b09      	ldr	r3, [pc, #36]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a08      	ldr	r2, [pc, #32]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005930:	f7fe f810 	bl	8003954 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005936:	e00b      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005938:	f7fe f80c 	bl	8003954 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	; 0x64
 8005944:	d904      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0bb      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005950:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595c:	d0ec      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800597a:	2b00      	cmp	r3, #0
 800597c:	d02e      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d12a      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005986:	4b51      	ldr	r3, [pc, #324]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005994:	4b4d      	ldr	r3, [pc, #308]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	0f1b      	lsrs	r3, r3, #28
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	019a      	lsls	r2, r3, #6
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	061b      	lsls	r3, r3, #24
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	071b      	lsls	r3, r3, #28
 80059ba:	4944      	ldr	r1, [pc, #272]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059c2:	4b42      	ldr	r3, [pc, #264]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	493d      	ldr	r1, [pc, #244]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d022      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f0:	d11d      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059f2:	4b36      	ldr	r3, [pc, #216]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f8:	0e1b      	lsrs	r3, r3, #24
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	0f1b      	lsrs	r3, r3, #28
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	019a      	lsls	r2, r3, #6
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	071b      	lsls	r3, r3, #28
 8005a26:	4929      	ldr	r1, [pc, #164]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d028      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	0e1b      	lsrs	r3, r3, #24
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	019a      	lsls	r2, r3, #6
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	041b      	lsls	r3, r3, #16
 8005a60:	431a      	orrs	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	061b      	lsls	r3, r3, #24
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	071b      	lsls	r3, r3, #28
 8005a6e:	4917      	ldr	r1, [pc, #92]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4911      	ldr	r1, [pc, #68]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a98:	f7fd ff5c 	bl	8003954 <HAL_GetTick>
 8005a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005aa0:	f7fd ff58 	bl	8003954 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e007      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abe:	d1ef      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3720      	adds	r7, #32
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800

08005ad0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e01c      	b.n	8005b1c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	795b      	ldrb	r3, [r3, #5]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc f9dc 	bl	8001eb0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0204 	orr.w	r2, r2, #4
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	791b      	ldrb	r3, [r3, #4]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_RNG_GenerateRandomNumber+0x1a>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e044      	b.n	8005bc8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	795b      	ldrb	r3, [r3, #5]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d133      	bne.n	8005bb6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b54:	f7fd fefe 	bl	8003954 <HAL_GetTick>
 8005b58:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005b5a:	e018      	b.n	8005b8e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005b5c:	f7fd fefa 	bl	8003954 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d911      	bls.n	8005b8e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d00a      	beq.n	8005b8e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e01c      	b.n	8005bc8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d1df      	bne.n	8005b5c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	715a      	strb	r2, [r3, #5]
 8005bb4:	e004      	b.n	8005bc0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	711a      	strb	r2, [r3, #4]

  return status;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ffa0 	bl	8005b24 <HAL_RNG_GenerateRandomNumber>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	e000      	b.n	8005bf2 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005bf0:	2300      	movs	r3, #0
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e09d      	b.n	8005d48 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1c:	d009      	beq.n	8005c32 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	61da      	str	r2, [r3, #28]
 8005c24:	e005      	b.n	8005c32 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fc f9a1 	bl	8001f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c72:	d902      	bls.n	8005c7a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e002      	b.n	8005c80 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c88:	d007      	beq.n	8005c9a <HAL_SPI_Init+0xa0>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c92:	d002      	beq.n	8005c9a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cdc:	ea42 0103 	orr.w	r1, r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	f003 0204 	and.w	r2, r3, #4
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d16:	ea42 0103 	orr.w	r1, r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_SPI_Transmit+0x22>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e158      	b.n	8006024 <HAL_SPI_Transmit+0x2d4>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d7a:	f7fd fdeb 	bl	8003954 <HAL_GetTick>
 8005d7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
 8005d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d94:	e13d      	b.n	8006012 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_SPI_Transmit+0x52>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005da6:	e134      	b.n	8006012 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2203      	movs	r2, #3
 8005dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df2:	d10f      	bne.n	8005e14 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d007      	beq.n	8005e32 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e3a:	d94b      	bls.n	8005ed4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_Transmit+0xfa>
 8005e44:	8afb      	ldrh	r3, [r7, #22]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d13e      	bne.n	8005ec8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	881a      	ldrh	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	1c9a      	adds	r2, r3, #2
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e6e:	e02b      	b.n	8005ec8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d112      	bne.n	8005ea4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	881a      	ldrh	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ea2:	e011      	b.n	8005ec8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea4:	f7fd fd56 	bl	8003954 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d803      	bhi.n	8005ebc <HAL_SPI_Transmit+0x16c>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d102      	bne.n	8005ec2 <HAL_SPI_Transmit+0x172>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ec6:	e0a4      	b.n	8006012 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ce      	bne.n	8005e70 <HAL_SPI_Transmit+0x120>
 8005ed2:	e07c      	b.n	8005fce <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_SPI_Transmit+0x192>
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d170      	bne.n	8005fc4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d912      	bls.n	8005f12 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	1c9a      	adds	r2, r3, #2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b02      	subs	r3, #2
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f10:	e058      	b.n	8005fc4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f38:	e044      	b.n	8005fc4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d12b      	bne.n	8005fa0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d912      	bls.n	8005f78 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	881a      	ldrh	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	1c9a      	adds	r2, r3, #2
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b02      	subs	r3, #2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f76:	e025      	b.n	8005fc4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	7812      	ldrb	r2, [r2, #0]
 8005f84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f9e:	e011      	b.n	8005fc4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa0:	f7fd fcd8 	bl	8003954 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d803      	bhi.n	8005fb8 <HAL_SPI_Transmit+0x268>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_Transmit+0x26e>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fc2:	e026      	b.n	8006012 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1b5      	bne.n	8005f3a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f948 	bl	8006268 <SPI_EndRxTxTransaction>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fec:	2300      	movs	r3, #0
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e000      	b.n	8006012 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006010:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006022:	7ffb      	ldrb	r3, [r7, #31]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800603c:	f7fd fc8a 	bl	8003954 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	4413      	add	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800604c:	f7fd fc82 	bl	8003954 <HAL_GetTick>
 8006050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006052:	4b39      	ldr	r3, [pc, #228]	; (8006138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	015b      	lsls	r3, r3, #5
 8006058:	0d1b      	lsrs	r3, r3, #20
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006062:	e054      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d050      	beq.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606c:	f7fd fc72 	bl	8003954 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	429a      	cmp	r2, r3
 800607a:	d902      	bls.n	8006082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d13d      	bne.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609a:	d111      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	d004      	beq.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d107      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c8:	d10f      	bne.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e017      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3b01      	subs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d19b      	bne.n	8006064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000000 	.word	0x20000000

0800613c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800614e:	f7fd fc01 	bl	8003954 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	4413      	add	r3, r2
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800615e:	f7fd fbf9 	bl	8003954 <HAL_GetTick>
 8006162:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800616c:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	0d1b      	lsrs	r3, r3, #20
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006184:	e060      	b.n	8006248 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800618c:	d107      	bne.n	800619e <SPI_WaitFifoStateUntilTimeout+0x62>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800619c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d050      	beq.n	8006248 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061a6:	f7fd fbd5 	bl	8003954 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d902      	bls.n	80061bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d13d      	bne.n	8006238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d4:	d111      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d004      	beq.n	80061ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d107      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006202:	d10f      	bne.n	8006224 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e010      	b.n	800625a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3b01      	subs	r3, #1
 8006246:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4013      	ands	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d196      	bne.n	8006186 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3728      	adds	r7, #40	; 0x28
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000000 	.word	0x20000000

08006268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff5b 	bl	800613c <SPI_WaitFifoStateUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e046      	b.n	800632a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800629c:	4b25      	ldr	r3, [pc, #148]	; (8006334 <SPI_EndRxTxTransaction+0xcc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a25      	ldr	r2, [pc, #148]	; (8006338 <SPI_EndRxTxTransaction+0xd0>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0d5b      	lsrs	r3, r3, #21
 80062a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d112      	bne.n	80062e2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff feb0 	bl	800602c <SPI_WaitFlagStateUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e023      	b.n	800632a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	d0f2      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x7a>
 80062fc:	e000      	b.n	8006300 <SPI_EndRxTxTransaction+0x98>
        break;
 80062fe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff ff15 	bl	800613c <SPI_WaitFifoStateUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631c:	f043 0220 	orr.w	r2, r3, #32
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e000      	b.n	800632a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000000 	.word	0x20000000
 8006338:	165e9f81 	.word	0x165e9f81

0800633c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e049      	b.n	80063e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb ffd4 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3304      	adds	r3, #4
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f000 f998 	bl	80066b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e04c      	b.n	800649e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a26      	ldr	r2, [pc, #152]	; (80064ac <HAL_TIM_Base_Start+0xc0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641e:	d01d      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <HAL_TIM_Base_Start+0xc4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <HAL_TIM_Base_Start+0xc8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <HAL_TIM_Base_Start+0xcc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <HAL_TIM_Base_Start+0xd0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <HAL_TIM_Base_Start+0xd4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIM_Base_Start+0x70>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <HAL_TIM_Base_Start+0xd8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d115      	bne.n	8006488 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <HAL_TIM_Base_Start+0xdc>)
 8006464:	4013      	ands	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b06      	cmp	r3, #6
 800646c:	d015      	beq.n	800649a <HAL_TIM_Base_Start+0xae>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d011      	beq.n	800649a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	e008      	b.n	800649a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e000      	b.n	800649c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00
 80064bc:	40010400 	.word	0x40010400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40001800 	.word	0x40001800
 80064c8:	00010007 	.word	0x00010007

080064cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	f241 1311 	movw	r3, #4369	; 0x1111
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10f      	bne.n	8006504 <HAL_TIM_Base_Stop+0x38>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	f240 4344 	movw	r3, #1092	; 0x444
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_TIM_Base_Stop+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e0b4      	b.n	80066a2 <HAL_TIM_ConfigClockSource+0x186>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4b56      	ldr	r3, [pc, #344]	; (80066ac <HAL_TIM_ConfigClockSource+0x190>)
 8006554:	4013      	ands	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006570:	d03e      	beq.n	80065f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006576:	f200 8087 	bhi.w	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	f000 8086 	beq.w	800668e <HAL_TIM_ConfigClockSource+0x172>
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006586:	d87f      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b70      	cmp	r3, #112	; 0x70
 800658a:	d01a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0xa6>
 800658c:	2b70      	cmp	r3, #112	; 0x70
 800658e:	d87b      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b60      	cmp	r3, #96	; 0x60
 8006592:	d050      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x11a>
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d877      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b50      	cmp	r3, #80	; 0x50
 800659a:	d03c      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0xfa>
 800659c:	2b50      	cmp	r3, #80	; 0x50
 800659e:	d873      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d058      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x13a>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d86f      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b30      	cmp	r3, #48	; 0x30
 80065aa:	d064      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d86b      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d060      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d867      	bhi.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05c      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d05a      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x15a>
 80065c0:	e062      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6899      	ldr	r1, [r3, #8]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f000 f987 	bl	80068e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	609a      	str	r2, [r3, #8]
      break;
 80065ee:	e04f      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6899      	ldr	r1, [r3, #8]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f000 f970 	bl	80068e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006612:	609a      	str	r2, [r3, #8]
      break;
 8006614:	e03c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	461a      	mov	r2, r3
 8006624:	f000 f8e4 	bl	80067f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2150      	movs	r1, #80	; 0x50
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f93d 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8006634:	e02c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	461a      	mov	r2, r3
 8006644:	f000 f903 	bl	800684e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2160      	movs	r1, #96	; 0x60
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f92d 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8006654:	e01c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6859      	ldr	r1, [r3, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	461a      	mov	r2, r3
 8006664:	f000 f8c4 	bl	80067f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2140      	movs	r1, #64	; 0x40
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f91d 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8006674:	e00c      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f000 f914 	bl	80068ae <TIM_ITRx_SetConfig>
      break;
 8006686:	e003      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
      break;
 800668c:	e000      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800668e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	fffeff88 	.word	0xfffeff88

080066b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a40      	ldr	r2, [pc, #256]	; (80067c4 <TIM_Base_SetConfig+0x114>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d013      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ce:	d00f      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3d      	ldr	r2, [pc, #244]	; (80067c8 <TIM_Base_SetConfig+0x118>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a3c      	ldr	r2, [pc, #240]	; (80067cc <TIM_Base_SetConfig+0x11c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a3b      	ldr	r2, [pc, #236]	; (80067d0 <TIM_Base_SetConfig+0x120>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a3a      	ldr	r2, [pc, #232]	; (80067d4 <TIM_Base_SetConfig+0x124>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d108      	bne.n	8006702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a2f      	ldr	r2, [pc, #188]	; (80067c4 <TIM_Base_SetConfig+0x114>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02b      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006710:	d027      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2c      	ldr	r2, [pc, #176]	; (80067c8 <TIM_Base_SetConfig+0x118>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d023      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2b      	ldr	r2, [pc, #172]	; (80067cc <TIM_Base_SetConfig+0x11c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01f      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2a      	ldr	r2, [pc, #168]	; (80067d0 <TIM_Base_SetConfig+0x120>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01b      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <TIM_Base_SetConfig+0x124>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d017      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <TIM_Base_SetConfig+0x128>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a27      	ldr	r2, [pc, #156]	; (80067dc <TIM_Base_SetConfig+0x12c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00f      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a26      	ldr	r2, [pc, #152]	; (80067e0 <TIM_Base_SetConfig+0x130>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a23      	ldr	r2, [pc, #140]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d108      	bne.n	8006774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <TIM_Base_SetConfig+0x114>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_Base_SetConfig+0xf8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <TIM_Base_SetConfig+0x124>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d103      	bne.n	80067b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	615a      	str	r2, [r3, #20]
}
 80067b6:	bf00      	nop
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40000400 	.word	0x40000400
 80067cc:	40000800 	.word	0x40000800
 80067d0:	40000c00 	.word	0x40000c00
 80067d4:	40010400 	.word	0x40010400
 80067d8:	40014000 	.word	0x40014000
 80067dc:	40014400 	.word	0x40014400
 80067e0:	40014800 	.word	0x40014800
 80067e4:	40001800 	.word	0x40001800
 80067e8:	40001c00 	.word	0x40001c00
 80067ec:	40002000 	.word	0x40002000

080067f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800681a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 030a 	bic.w	r3, r3, #10
 800682c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800684e:	b480      	push	{r7}
 8006850:	b087      	sub	sp, #28
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f023 0210 	bic.w	r2, r3, #16
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	031b      	lsls	r3, r3, #12
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800688a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f043 0307 	orr.w	r3, r3, #7
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	021a      	lsls	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	431a      	orrs	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e06d      	b.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a30      	ldr	r2, [pc, #192]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2f      	ldr	r2, [pc, #188]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d108      	bne.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d01d      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d10c      	bne.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40001800 	.word	0x40001800

08006a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e040      	b.n	8006ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fb fca4 	bl	80023b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2224      	movs	r2, #36	; 0x24
 8006a6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0201 	bic.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f82c 	bl	8006adc <UART_SetConfig>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e022      	b.n	8006ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa84 	bl	8006fa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb0b 	bl	80070e8 <UART_CheckIdleState>
 8006ad2:	4603      	mov	r3, r0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4ba6      	ldr	r3, [pc, #664]	; (8006da0 <UART_SetConfig+0x2c4>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	430b      	orrs	r3, r1
 8006b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a94      	ldr	r2, [pc, #592]	; (8006da4 <UART_SetConfig+0x2c8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d120      	bne.n	8006b9a <UART_SetConfig+0xbe>
 8006b58:	4b93      	ldr	r3, [pc, #588]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d816      	bhi.n	8006b94 <UART_SetConfig+0xb8>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0x90>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006b83 	.word	0x08006b83
 8006b78:	08006b8f 	.word	0x08006b8f
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e150      	b.n	8006e24 <UART_SetConfig+0x348>
 8006b82:	2302      	movs	r3, #2
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e14d      	b.n	8006e24 <UART_SetConfig+0x348>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e14a      	b.n	8006e24 <UART_SetConfig+0x348>
 8006b8e:	2308      	movs	r3, #8
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e147      	b.n	8006e24 <UART_SetConfig+0x348>
 8006b94:	2310      	movs	r3, #16
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e144      	b.n	8006e24 <UART_SetConfig+0x348>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a83      	ldr	r2, [pc, #524]	; (8006dac <UART_SetConfig+0x2d0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d132      	bne.n	8006c0a <UART_SetConfig+0x12e>
 8006ba4:	4b80      	ldr	r3, [pc, #512]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f003 030c 	and.w	r3, r3, #12
 8006bae:	2b0c      	cmp	r3, #12
 8006bb0:	d828      	bhi.n	8006c04 <UART_SetConfig+0x128>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0xdc>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006c05 	.word	0x08006c05
 8006bc0:	08006c05 	.word	0x08006c05
 8006bc4:	08006c05 	.word	0x08006c05
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006c05 	.word	0x08006c05
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006c05 	.word	0x08006c05
 8006bd8:	08006bf3 	.word	0x08006bf3
 8006bdc:	08006c05 	.word	0x08006c05
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c05 	.word	0x08006c05
 8006be8:	08006bff 	.word	0x08006bff
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e118      	b.n	8006e24 <UART_SetConfig+0x348>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	77fb      	strb	r3, [r7, #31]
 8006bf6:	e115      	b.n	8006e24 <UART_SetConfig+0x348>
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	77fb      	strb	r3, [r7, #31]
 8006bfc:	e112      	b.n	8006e24 <UART_SetConfig+0x348>
 8006bfe:	2308      	movs	r3, #8
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e10f      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c04:	2310      	movs	r3, #16
 8006c06:	77fb      	strb	r3, [r7, #31]
 8006c08:	e10c      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a68      	ldr	r2, [pc, #416]	; (8006db0 <UART_SetConfig+0x2d4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d120      	bne.n	8006c56 <UART_SetConfig+0x17a>
 8006c14:	4b64      	ldr	r3, [pc, #400]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c1e:	2b30      	cmp	r3, #48	; 0x30
 8006c20:	d013      	beq.n	8006c4a <UART_SetConfig+0x16e>
 8006c22:	2b30      	cmp	r3, #48	; 0x30
 8006c24:	d814      	bhi.n	8006c50 <UART_SetConfig+0x174>
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d009      	beq.n	8006c3e <UART_SetConfig+0x162>
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d810      	bhi.n	8006c50 <UART_SetConfig+0x174>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <UART_SetConfig+0x15c>
 8006c32:	2b10      	cmp	r3, #16
 8006c34:	d006      	beq.n	8006c44 <UART_SetConfig+0x168>
 8006c36:	e00b      	b.n	8006c50 <UART_SetConfig+0x174>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e0f2      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e0ef      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c44:	2304      	movs	r3, #4
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e0ec      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e0e9      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c50:	2310      	movs	r3, #16
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e0e6      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a56      	ldr	r2, [pc, #344]	; (8006db4 <UART_SetConfig+0x2d8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d120      	bne.n	8006ca2 <UART_SetConfig+0x1c6>
 8006c60:	4b51      	ldr	r3, [pc, #324]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c6c:	d013      	beq.n	8006c96 <UART_SetConfig+0x1ba>
 8006c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c70:	d814      	bhi.n	8006c9c <UART_SetConfig+0x1c0>
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d009      	beq.n	8006c8a <UART_SetConfig+0x1ae>
 8006c76:	2b80      	cmp	r3, #128	; 0x80
 8006c78:	d810      	bhi.n	8006c9c <UART_SetConfig+0x1c0>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <UART_SetConfig+0x1a8>
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d006      	beq.n	8006c90 <UART_SetConfig+0x1b4>
 8006c82:	e00b      	b.n	8006c9c <UART_SetConfig+0x1c0>
 8006c84:	2300      	movs	r3, #0
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e0cc      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e0c9      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c90:	2304      	movs	r3, #4
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e0c6      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c96:	2308      	movs	r3, #8
 8006c98:	77fb      	strb	r3, [r7, #31]
 8006c9a:	e0c3      	b.n	8006e24 <UART_SetConfig+0x348>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e0c0      	b.n	8006e24 <UART_SetConfig+0x348>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a44      	ldr	r2, [pc, #272]	; (8006db8 <UART_SetConfig+0x2dc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d125      	bne.n	8006cf8 <UART_SetConfig+0x21c>
 8006cac:	4b3e      	ldr	r3, [pc, #248]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cba:	d017      	beq.n	8006cec <UART_SetConfig+0x210>
 8006cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc0:	d817      	bhi.n	8006cf2 <UART_SetConfig+0x216>
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc6:	d00b      	beq.n	8006ce0 <UART_SetConfig+0x204>
 8006cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ccc:	d811      	bhi.n	8006cf2 <UART_SetConfig+0x216>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <UART_SetConfig+0x1fe>
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd6:	d006      	beq.n	8006ce6 <UART_SetConfig+0x20a>
 8006cd8:	e00b      	b.n	8006cf2 <UART_SetConfig+0x216>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e0a1      	b.n	8006e24 <UART_SetConfig+0x348>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e09e      	b.n	8006e24 <UART_SetConfig+0x348>
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e09b      	b.n	8006e24 <UART_SetConfig+0x348>
 8006cec:	2308      	movs	r3, #8
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e098      	b.n	8006e24 <UART_SetConfig+0x348>
 8006cf2:	2310      	movs	r3, #16
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e095      	b.n	8006e24 <UART_SetConfig+0x348>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a2f      	ldr	r2, [pc, #188]	; (8006dbc <UART_SetConfig+0x2e0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d125      	bne.n	8006d4e <UART_SetConfig+0x272>
 8006d02:	4b29      	ldr	r3, [pc, #164]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d10:	d017      	beq.n	8006d42 <UART_SetConfig+0x266>
 8006d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d16:	d817      	bhi.n	8006d48 <UART_SetConfig+0x26c>
 8006d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1c:	d00b      	beq.n	8006d36 <UART_SetConfig+0x25a>
 8006d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d22:	d811      	bhi.n	8006d48 <UART_SetConfig+0x26c>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <UART_SetConfig+0x254>
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2c:	d006      	beq.n	8006d3c <UART_SetConfig+0x260>
 8006d2e:	e00b      	b.n	8006d48 <UART_SetConfig+0x26c>
 8006d30:	2301      	movs	r3, #1
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e076      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d36:	2302      	movs	r3, #2
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e073      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e070      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d42:	2308      	movs	r3, #8
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e06d      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e06a      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <UART_SetConfig+0x2e4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d138      	bne.n	8006dca <UART_SetConfig+0x2ee>
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <UART_SetConfig+0x2cc>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d66:	d017      	beq.n	8006d98 <UART_SetConfig+0x2bc>
 8006d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d6c:	d82a      	bhi.n	8006dc4 <UART_SetConfig+0x2e8>
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d00b      	beq.n	8006d8c <UART_SetConfig+0x2b0>
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d78:	d824      	bhi.n	8006dc4 <UART_SetConfig+0x2e8>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <UART_SetConfig+0x2aa>
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	d006      	beq.n	8006d92 <UART_SetConfig+0x2b6>
 8006d84:	e01e      	b.n	8006dc4 <UART_SetConfig+0x2e8>
 8006d86:	2300      	movs	r3, #0
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e04b      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e048      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d92:	2304      	movs	r3, #4
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e045      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d98:	2308      	movs	r3, #8
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e042      	b.n	8006e24 <UART_SetConfig+0x348>
 8006d9e:	bf00      	nop
 8006da0:	efff69f3 	.word	0xefff69f3
 8006da4:	40011000 	.word	0x40011000
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40004400 	.word	0x40004400
 8006db0:	40004800 	.word	0x40004800
 8006db4:	40004c00 	.word	0x40004c00
 8006db8:	40005000 	.word	0x40005000
 8006dbc:	40011400 	.word	0x40011400
 8006dc0:	40007800 	.word	0x40007800
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e02c      	b.n	8006e24 <UART_SetConfig+0x348>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a72      	ldr	r2, [pc, #456]	; (8006f98 <UART_SetConfig+0x4bc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d125      	bne.n	8006e20 <UART_SetConfig+0x344>
 8006dd4:	4b71      	ldr	r3, [pc, #452]	; (8006f9c <UART_SetConfig+0x4c0>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006de2:	d017      	beq.n	8006e14 <UART_SetConfig+0x338>
 8006de4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006de8:	d817      	bhi.n	8006e1a <UART_SetConfig+0x33e>
 8006dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dee:	d00b      	beq.n	8006e08 <UART_SetConfig+0x32c>
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df4:	d811      	bhi.n	8006e1a <UART_SetConfig+0x33e>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <UART_SetConfig+0x326>
 8006dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dfe:	d006      	beq.n	8006e0e <UART_SetConfig+0x332>
 8006e00:	e00b      	b.n	8006e1a <UART_SetConfig+0x33e>
 8006e02:	2300      	movs	r3, #0
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e00d      	b.n	8006e24 <UART_SetConfig+0x348>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e00a      	b.n	8006e24 <UART_SetConfig+0x348>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e007      	b.n	8006e24 <UART_SetConfig+0x348>
 8006e14:	2308      	movs	r3, #8
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e004      	b.n	8006e24 <UART_SetConfig+0x348>
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e001      	b.n	8006e24 <UART_SetConfig+0x348>
 8006e20:	2310      	movs	r3, #16
 8006e22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2c:	d15b      	bne.n	8006ee6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e2e:	7ffb      	ldrb	r3, [r7, #31]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d828      	bhi.n	8006e86 <UART_SetConfig+0x3aa>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x360>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006e69 	.word	0x08006e69
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	08006e87 	.word	0x08006e87
 8006e4c:	08006e77 	.word	0x08006e77
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e87 	.word	0x08006e87
 8006e58:	08006e87 	.word	0x08006e87
 8006e5c:	08006e7f 	.word	0x08006e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7fe f9e6 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8006e64:	61b8      	str	r0, [r7, #24]
        break;
 8006e66:	e013      	b.n	8006e90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7fe f9f6 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	61b8      	str	r0, [r7, #24]
        break;
 8006e6e:	e00f      	b.n	8006e90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b4b      	ldr	r3, [pc, #300]	; (8006fa0 <UART_SetConfig+0x4c4>)
 8006e72:	61bb      	str	r3, [r7, #24]
        break;
 8006e74:	e00c      	b.n	8006e90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fe f8c9 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006e7a:	61b8      	str	r0, [r7, #24]
        break;
 8006e7c:	e008      	b.n	8006e90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e82:	61bb      	str	r3, [r7, #24]
        break;
 8006e84:	e004      	b.n	8006e90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	77bb      	strb	r3, [r7, #30]
        break;
 8006e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d074      	beq.n	8006f80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	005a      	lsls	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b0f      	cmp	r3, #15
 8006eb0:	d916      	bls.n	8006ee0 <UART_SetConfig+0x404>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb8:	d212      	bcs.n	8006ee0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f023 030f 	bic.w	r3, r3, #15
 8006ec2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	89fb      	ldrh	r3, [r7, #14]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	89fa      	ldrh	r2, [r7, #14]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	e04f      	b.n	8006f80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	77bb      	strb	r3, [r7, #30]
 8006ee4:	e04c      	b.n	8006f80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ee6:	7ffb      	ldrb	r3, [r7, #31]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d828      	bhi.n	8006f3e <UART_SetConfig+0x462>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x418>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	08006f3f 	.word	0x08006f3f
 8006f04:	08006f2f 	.word	0x08006f2f
 8006f08:	08006f3f 	.word	0x08006f3f
 8006f0c:	08006f3f 	.word	0x08006f3f
 8006f10:	08006f3f 	.word	0x08006f3f
 8006f14:	08006f37 	.word	0x08006f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fe f98a 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8006f1c:	61b8      	str	r0, [r7, #24]
        break;
 8006f1e:	e013      	b.n	8006f48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f20:	f7fe f99a 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 8006f24:	61b8      	str	r0, [r7, #24]
        break;
 8006f26:	e00f      	b.n	8006f48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f28:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <UART_SetConfig+0x4c4>)
 8006f2a:	61bb      	str	r3, [r7, #24]
        break;
 8006f2c:	e00c      	b.n	8006f48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fe f86d 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8006f32:	61b8      	str	r0, [r7, #24]
        break;
 8006f34:	e008      	b.n	8006f48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	61bb      	str	r3, [r7, #24]
        break;
 8006f3c:	e004      	b.n	8006f48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	77bb      	strb	r3, [r7, #30]
        break;
 8006f46:	bf00      	nop
    }

    if (pclk != 0U)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	085a      	lsrs	r2, r3, #1
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	441a      	add	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b0f      	cmp	r3, #15
 8006f66:	d909      	bls.n	8006f7c <UART_SetConfig+0x4a0>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6e:	d205      	bcs.n	8006f7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	e001      	b.n	8006f80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3720      	adds	r7, #32
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40007c00 	.word	0x40007c00
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	00f42400 	.word	0x00f42400

08006fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01a      	beq.n	80070ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a2:	d10a      	bne.n	80070ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	605a      	str	r2, [r3, #4]
  }
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f8:	f7fc fc2c 	bl	8003954 <HAL_GetTick>
 80070fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b08      	cmp	r3, #8
 800710a:	d10e      	bne.n	800712a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f831 	bl	8007182 <UART_WaitOnFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e027      	b.n	800717a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b04      	cmp	r3, #4
 8007136:	d10e      	bne.n	8007156 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f81b 	bl	8007182 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e011      	b.n	800717a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b09c      	sub	sp, #112	; 0x70
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007192:	e0a7      	b.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	f000 80a3 	beq.w	80072e4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719e:	f7fc fbd9 	bl	8003954 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d302      	bcc.n	80071b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80071ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d13f      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071c8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	663b      	str	r3, [r7, #96]	; 0x60
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007206:	64ba      	str	r2, [r7, #72]	; 0x48
 8007208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800720c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e068      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d050      	beq.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007250:	d148      	bne.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800725a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	613b      	str	r3, [r7, #16]
   return(result);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072ae:	623a      	str	r2, [r7, #32]
 80072b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	69f9      	ldr	r1, [r7, #28]
 80072b4:	6a3a      	ldr	r2, [r7, #32]
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e5      	bne.n	800728e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e010      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4013      	ands	r3, r2
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	bf0c      	ite	eq
 80072f4:	2301      	moveq	r3, #1
 80072f6:	2300      	movne	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	429a      	cmp	r2, r3
 8007300:	f43f af48 	beq.w	8007194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3770      	adds	r7, #112	; 0x70
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007310:	b084      	sub	sp, #16
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	f107 001c 	add.w	r0, r7, #28
 800731e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	2b01      	cmp	r3, #1
 8007326:	d120      	bne.n	800736a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	4b20      	ldr	r3, [pc, #128]	; (80073bc <USB_CoreInit+0xac>)
 800733a:	4013      	ands	r3, r2
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800734c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d105      	bne.n	800735e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa96 	bl	8007890 <USB_CoreReset>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e010      	b.n	800738c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa8a 	bl	8007890 <USB_CoreReset>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	2b01      	cmp	r3, #1
 8007390:	d10b      	bne.n	80073aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f043 0206 	orr.w	r2, r3, #6
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f043 0220 	orr.w	r2, r3, #32
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b6:	b004      	add	sp, #16
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	ffbdffbf 	.word	0xffbdffbf

080073c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f023 0201 	bic.w	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d115      	bne.n	8007430 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007410:	2001      	movs	r0, #1
 8007412:	f7fc faab 	bl	800396c <HAL_Delay>
      ms++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa29 	bl	8007874 <USB_GetMode>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	d01e      	beq.n	8007466 <USB_SetCurrentMode+0x84>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b31      	cmp	r3, #49	; 0x31
 800742c:	d9f0      	bls.n	8007410 <USB_SetCurrentMode+0x2e>
 800742e:	e01a      	b.n	8007466 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d115      	bne.n	8007462 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007442:	2001      	movs	r0, #1
 8007444:	f7fc fa92 	bl	800396c <HAL_Delay>
      ms++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa10 	bl	8007874 <USB_GetMode>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <USB_SetCurrentMode+0x84>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b31      	cmp	r3, #49	; 0x31
 800745e:	d9f0      	bls.n	8007442 <USB_SetCurrentMode+0x60>
 8007460:	e001      	b.n	8007466 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e005      	b.n	8007472 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b32      	cmp	r3, #50	; 0x32
 800746a:	d101      	bne.n	8007470 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800747c:	b084      	sub	sp, #16
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800748a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e009      	b.n	80074b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3340      	adds	r3, #64	; 0x40
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	3301      	adds	r3, #1
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b0e      	cmp	r3, #14
 80074b4:	d9f2      	bls.n	800749c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11c      	bne.n	80074f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e005      	b.n	8007502 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007508:	461a      	mov	r2, r3
 800750a:	2300      	movs	r3, #0
 800750c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007514:	4619      	mov	r1, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751c:	461a      	mov	r2, r3
 800751e:	680b      	ldr	r3, [r1, #0]
 8007520:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10c      	bne.n	8007542 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800752e:	2100      	movs	r1, #0
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f965 	bl	8007800 <USB_SetDevSpeed>
 8007536:	e008      	b.n	800754a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007538:	2101      	movs	r1, #1
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f960 	bl	8007800 <USB_SetDevSpeed>
 8007540:	e003      	b.n	800754a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007542:	2103      	movs	r1, #3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f95b 	bl	8007800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800754a:	2110      	movs	r1, #16
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f8f3 	bl	8007738 <USB_FlushTxFifo>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f91f 	bl	80077a0 <USB_FlushRxFifo>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007590:	2300      	movs	r3, #0
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	e043      	b.n	800761e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ac:	d118      	bne.n	80075e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	461a      	mov	r2, r3
 80075c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	e013      	b.n	80075f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	461a      	mov	r2, r3
 80075d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	e008      	b.n	80075f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	461a      	mov	r2, r3
 8007600:	2300      	movs	r3, #0
 8007602:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	461a      	mov	r2, r3
 8007612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007616:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	3301      	adds	r3, #1
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	429a      	cmp	r2, r3
 8007624:	d3b7      	bcc.n	8007596 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	e043      	b.n	80076b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007642:	d118      	bne.n	8007676 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	461a      	mov	r2, r3
 8007658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e013      	b.n	8007688 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	461a      	mov	r2, r3
 800766e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e008      	b.n	8007688 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	461a      	mov	r2, r3
 8007684:	2300      	movs	r3, #0
 8007686:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	461a      	mov	r2, r3
 8007696:	2300      	movs	r3, #0
 8007698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3301      	adds	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d3b7      	bcc.n	800762c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f043 0210 	orr.w	r2, r3, #16
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <USB_DevInit+0x2b4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f043 0208 	orr.w	r2, r3, #8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800770e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d105      	bne.n	8007720 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <USB_DevInit+0x2b8>)
 800771a:	4313      	orrs	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772c:	b004      	add	sp, #16
 800772e:	4770      	bx	lr
 8007730:	803c3800 	.word	0x803c3800
 8007734:	40000004 	.word	0x40000004

08007738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a13      	ldr	r2, [pc, #76]	; (800779c <USB_FlushTxFifo+0x64>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d901      	bls.n	8007758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e01b      	b.n	8007790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	daf2      	bge.n	8007746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	019b      	lsls	r3, r3, #6
 8007768:	f043 0220 	orr.w	r2, r3, #32
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <USB_FlushTxFifo+0x64>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e006      	b.n	8007790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b20      	cmp	r3, #32
 800778c:	d0f0      	beq.n	8007770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00030d40 	.word	0x00030d40

080077a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a11      	ldr	r2, [pc, #68]	; (80077fc <USB_FlushRxFifo+0x5c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e018      	b.n	80077f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	daf2      	bge.n	80077ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2210      	movs	r2, #16
 80077ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a08      	ldr	r2, [pc, #32]	; (80077fc <USB_FlushRxFifo+0x5c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e006      	b.n	80077f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d0f0      	beq.n	80077d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	00030d40 	.word	0x00030d40

08007800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800784c:	f023 0303 	bic.w	r3, r3, #3
 8007850:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007860:	f043 0302 	orr.w	r3, r3, #2
 8007864:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f003 0301 	and.w	r3, r3, #1
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <USB_CoreReset+0x64>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e01b      	b.n	80078e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	daf2      	bge.n	800789c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f043 0201 	orr.w	r2, r3, #1
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <USB_CoreReset+0x64>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d901      	bls.n	80078d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e006      	b.n	80078e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d0f0      	beq.n	80078c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	00030d40 	.word	0x00030d40

080078f8 <__errno>:
 80078f8:	4b01      	ldr	r3, [pc, #4]	; (8007900 <__errno+0x8>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000010 	.word	0x20000010

08007904 <__libc_init_array>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4d0d      	ldr	r5, [pc, #52]	; (800793c <__libc_init_array+0x38>)
 8007908:	4c0d      	ldr	r4, [pc, #52]	; (8007940 <__libc_init_array+0x3c>)
 800790a:	1b64      	subs	r4, r4, r5
 800790c:	10a4      	asrs	r4, r4, #2
 800790e:	2600      	movs	r6, #0
 8007910:	42a6      	cmp	r6, r4
 8007912:	d109      	bne.n	8007928 <__libc_init_array+0x24>
 8007914:	4d0b      	ldr	r5, [pc, #44]	; (8007944 <__libc_init_array+0x40>)
 8007916:	4c0c      	ldr	r4, [pc, #48]	; (8007948 <__libc_init_array+0x44>)
 8007918:	f004 fb8a 	bl	800c030 <_init>
 800791c:	1b64      	subs	r4, r4, r5
 800791e:	10a4      	asrs	r4, r4, #2
 8007920:	2600      	movs	r6, #0
 8007922:	42a6      	cmp	r6, r4
 8007924:	d105      	bne.n	8007932 <__libc_init_array+0x2e>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	f855 3b04 	ldr.w	r3, [r5], #4
 800792c:	4798      	blx	r3
 800792e:	3601      	adds	r6, #1
 8007930:	e7ee      	b.n	8007910 <__libc_init_array+0xc>
 8007932:	f855 3b04 	ldr.w	r3, [r5], #4
 8007936:	4798      	blx	r3
 8007938:	3601      	adds	r6, #1
 800793a:	e7f2      	b.n	8007922 <__libc_init_array+0x1e>
 800793c:	0803215c 	.word	0x0803215c
 8007940:	0803215c 	.word	0x0803215c
 8007944:	0803215c 	.word	0x0803215c
 8007948:	08032160 	.word	0x08032160

0800794c <memset>:
 800794c:	4402      	add	r2, r0
 800794e:	4603      	mov	r3, r0
 8007950:	4293      	cmp	r3, r2
 8007952:	d100      	bne.n	8007956 <memset+0xa>
 8007954:	4770      	bx	lr
 8007956:	f803 1b01 	strb.w	r1, [r3], #1
 800795a:	e7f9      	b.n	8007950 <memset+0x4>

0800795c <__cvt>:
 800795c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795e:	ed2d 8b02 	vpush	{d8}
 8007962:	eeb0 8b40 	vmov.f64	d8, d0
 8007966:	b085      	sub	sp, #20
 8007968:	4617      	mov	r7, r2
 800796a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800796c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800796e:	ee18 2a90 	vmov	r2, s17
 8007972:	f025 0520 	bic.w	r5, r5, #32
 8007976:	2a00      	cmp	r2, #0
 8007978:	bfb6      	itet	lt
 800797a:	222d      	movlt	r2, #45	; 0x2d
 800797c:	2200      	movge	r2, #0
 800797e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007982:	2d46      	cmp	r5, #70	; 0x46
 8007984:	460c      	mov	r4, r1
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	d004      	beq.n	8007994 <__cvt+0x38>
 800798a:	2d45      	cmp	r5, #69	; 0x45
 800798c:	d100      	bne.n	8007990 <__cvt+0x34>
 800798e:	3401      	adds	r4, #1
 8007990:	2102      	movs	r1, #2
 8007992:	e000      	b.n	8007996 <__cvt+0x3a>
 8007994:	2103      	movs	r1, #3
 8007996:	ab03      	add	r3, sp, #12
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	ab02      	add	r3, sp, #8
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4622      	mov	r2, r4
 80079a0:	4633      	mov	r3, r6
 80079a2:	eeb0 0b48 	vmov.f64	d0, d8
 80079a6:	f001 fd2f 	bl	8009408 <_dtoa_r>
 80079aa:	2d47      	cmp	r5, #71	; 0x47
 80079ac:	d101      	bne.n	80079b2 <__cvt+0x56>
 80079ae:	07fb      	lsls	r3, r7, #31
 80079b0:	d51a      	bpl.n	80079e8 <__cvt+0x8c>
 80079b2:	2d46      	cmp	r5, #70	; 0x46
 80079b4:	eb00 0204 	add.w	r2, r0, r4
 80079b8:	d10c      	bne.n	80079d4 <__cvt+0x78>
 80079ba:	7803      	ldrb	r3, [r0, #0]
 80079bc:	2b30      	cmp	r3, #48	; 0x30
 80079be:	d107      	bne.n	80079d0 <__cvt+0x74>
 80079c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c8:	bf1c      	itt	ne
 80079ca:	f1c4 0401 	rsbne	r4, r4, #1
 80079ce:	6034      	strne	r4, [r6, #0]
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	441a      	add	r2, r3
 80079d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079dc:	bf08      	it	eq
 80079de:	9203      	streq	r2, [sp, #12]
 80079e0:	2130      	movs	r1, #48	; 0x30
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d307      	bcc.n	80079f8 <__cvt+0x9c>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ec:	1a1b      	subs	r3, r3, r0
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	b005      	add	sp, #20
 80079f2:	ecbd 8b02 	vpop	{d8}
 80079f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f8:	1c5c      	adds	r4, r3, #1
 80079fa:	9403      	str	r4, [sp, #12]
 80079fc:	7019      	strb	r1, [r3, #0]
 80079fe:	e7f0      	b.n	80079e2 <__cvt+0x86>

08007a00 <__exponent>:
 8007a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a02:	4603      	mov	r3, r0
 8007a04:	2900      	cmp	r1, #0
 8007a06:	bfb8      	it	lt
 8007a08:	4249      	neglt	r1, r1
 8007a0a:	f803 2b02 	strb.w	r2, [r3], #2
 8007a0e:	bfb4      	ite	lt
 8007a10:	222d      	movlt	r2, #45	; 0x2d
 8007a12:	222b      	movge	r2, #43	; 0x2b
 8007a14:	2909      	cmp	r1, #9
 8007a16:	7042      	strb	r2, [r0, #1]
 8007a18:	dd2a      	ble.n	8007a70 <__exponent+0x70>
 8007a1a:	f10d 0407 	add.w	r4, sp, #7
 8007a1e:	46a4      	mov	ip, r4
 8007a20:	270a      	movs	r7, #10
 8007a22:	46a6      	mov	lr, r4
 8007a24:	460a      	mov	r2, r1
 8007a26:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a2a:	fb07 1516 	mls	r5, r7, r6, r1
 8007a2e:	3530      	adds	r5, #48	; 0x30
 8007a30:	2a63      	cmp	r2, #99	; 0x63
 8007a32:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	dcf1      	bgt.n	8007a22 <__exponent+0x22>
 8007a3e:	3130      	adds	r1, #48	; 0x30
 8007a40:	f1ae 0502 	sub.w	r5, lr, #2
 8007a44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a48:	1c44      	adds	r4, r0, #1
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4561      	cmp	r1, ip
 8007a4e:	d30a      	bcc.n	8007a66 <__exponent+0x66>
 8007a50:	f10d 0209 	add.w	r2, sp, #9
 8007a54:	eba2 020e 	sub.w	r2, r2, lr
 8007a58:	4565      	cmp	r5, ip
 8007a5a:	bf88      	it	hi
 8007a5c:	2200      	movhi	r2, #0
 8007a5e:	4413      	add	r3, r2
 8007a60:	1a18      	subs	r0, r3, r0
 8007a62:	b003      	add	sp, #12
 8007a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a6e:	e7ed      	b.n	8007a4c <__exponent+0x4c>
 8007a70:	2330      	movs	r3, #48	; 0x30
 8007a72:	3130      	adds	r1, #48	; 0x30
 8007a74:	7083      	strb	r3, [r0, #2]
 8007a76:	70c1      	strb	r1, [r0, #3]
 8007a78:	1d03      	adds	r3, r0, #4
 8007a7a:	e7f1      	b.n	8007a60 <__exponent+0x60>
 8007a7c:	0000      	movs	r0, r0
	...

08007a80 <_printf_float>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	b08b      	sub	sp, #44	; 0x2c
 8007a86:	460c      	mov	r4, r1
 8007a88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	461f      	mov	r7, r3
 8007a90:	4605      	mov	r5, r0
 8007a92:	f002 fd97 	bl	800a5c4 <_localeconv_r>
 8007a96:	f8d0 b000 	ldr.w	fp, [r0]
 8007a9a:	4658      	mov	r0, fp
 8007a9c:	f7f8 fbd0 	bl	8000240 <strlen>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	3307      	adds	r3, #7
 8007ab0:	f023 0307 	bic.w	r3, r3, #7
 8007ab4:	f103 0108 	add.w	r1, r3, #8
 8007ab8:	f8c8 1000 	str.w	r1, [r8]
 8007abc:	4682      	mov	sl, r0
 8007abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ac2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007ac6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007d28 <_printf_float+0x2a8>
 8007aca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007ace:	eeb0 6bc0 	vabs.f64	d6, d0
 8007ad2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ada:	dd24      	ble.n	8007b26 <_printf_float+0xa6>
 8007adc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae4:	d502      	bpl.n	8007aec <_printf_float+0x6c>
 8007ae6:	232d      	movs	r3, #45	; 0x2d
 8007ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aec:	4b90      	ldr	r3, [pc, #576]	; (8007d30 <_printf_float+0x2b0>)
 8007aee:	4891      	ldr	r0, [pc, #580]	; (8007d34 <_printf_float+0x2b4>)
 8007af0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007af4:	bf94      	ite	ls
 8007af6:	4698      	movls	r8, r3
 8007af8:	4680      	movhi	r8, r0
 8007afa:	2303      	movs	r3, #3
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	f022 0204 	bic.w	r2, r2, #4
 8007b02:	2300      	movs	r3, #0
 8007b04:	6022      	str	r2, [r4, #0]
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	9700      	str	r7, [sp, #0]
 8007b0a:	4633      	mov	r3, r6
 8007b0c:	aa09      	add	r2, sp, #36	; 0x24
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f9d3 	bl	8007ebc <_printf_common>
 8007b16:	3001      	adds	r0, #1
 8007b18:	f040 808a 	bne.w	8007c30 <_printf_float+0x1b0>
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	b00b      	add	sp, #44	; 0x2c
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	eeb4 0b40 	vcmp.f64	d0, d0
 8007b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2e:	d709      	bvc.n	8007b44 <_printf_float+0xc4>
 8007b30:	ee10 3a90 	vmov	r3, s1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfbc      	itt	lt
 8007b38:	232d      	movlt	r3, #45	; 0x2d
 8007b3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b3e:	487e      	ldr	r0, [pc, #504]	; (8007d38 <_printf_float+0x2b8>)
 8007b40:	4b7e      	ldr	r3, [pc, #504]	; (8007d3c <_printf_float+0x2bc>)
 8007b42:	e7d5      	b.n	8007af0 <_printf_float+0x70>
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007b4a:	9104      	str	r1, [sp, #16]
 8007b4c:	1c59      	adds	r1, r3, #1
 8007b4e:	d13c      	bne.n	8007bca <_printf_float+0x14a>
 8007b50:	2306      	movs	r3, #6
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	2300      	movs	r3, #0
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	ab08      	add	r3, sp, #32
 8007b5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b62:	ab07      	add	r3, sp, #28
 8007b64:	6861      	ldr	r1, [r4, #4]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	6022      	str	r2, [r4, #0]
 8007b6a:	f10d 031b 	add.w	r3, sp, #27
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f7ff fef4 	bl	800795c <__cvt>
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	9907      	ldr	r1, [sp, #28]
 8007b78:	2b47      	cmp	r3, #71	; 0x47
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	d108      	bne.n	8007b90 <_printf_float+0x110>
 8007b7e:	1cc8      	adds	r0, r1, #3
 8007b80:	db02      	blt.n	8007b88 <_printf_float+0x108>
 8007b82:	6863      	ldr	r3, [r4, #4]
 8007b84:	4299      	cmp	r1, r3
 8007b86:	dd41      	ble.n	8007c0c <_printf_float+0x18c>
 8007b88:	f1a9 0902 	sub.w	r9, r9, #2
 8007b8c:	fa5f f989 	uxtb.w	r9, r9
 8007b90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b94:	d820      	bhi.n	8007bd8 <_printf_float+0x158>
 8007b96:	3901      	subs	r1, #1
 8007b98:	464a      	mov	r2, r9
 8007b9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b9e:	9107      	str	r1, [sp, #28]
 8007ba0:	f7ff ff2e 	bl	8007a00 <__exponent>
 8007ba4:	9a08      	ldr	r2, [sp, #32]
 8007ba6:	9004      	str	r0, [sp, #16]
 8007ba8:	1813      	adds	r3, r2, r0
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	dc02      	bgt.n	8007bb6 <_printf_float+0x136>
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	07d2      	lsls	r2, r2, #31
 8007bb4:	d501      	bpl.n	8007bba <_printf_float+0x13a>
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0a2      	beq.n	8007b08 <_printf_float+0x88>
 8007bc2:	232d      	movs	r3, #45	; 0x2d
 8007bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc8:	e79e      	b.n	8007b08 <_printf_float+0x88>
 8007bca:	9904      	ldr	r1, [sp, #16]
 8007bcc:	2947      	cmp	r1, #71	; 0x47
 8007bce:	d1c1      	bne.n	8007b54 <_printf_float+0xd4>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1bf      	bne.n	8007b54 <_printf_float+0xd4>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e7bc      	b.n	8007b52 <_printf_float+0xd2>
 8007bd8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007bdc:	d118      	bne.n	8007c10 <_printf_float+0x190>
 8007bde:	2900      	cmp	r1, #0
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	dd0b      	ble.n	8007bfc <_printf_float+0x17c>
 8007be4:	6121      	str	r1, [r4, #16]
 8007be6:	b913      	cbnz	r3, 8007bee <_printf_float+0x16e>
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	07d0      	lsls	r0, r2, #31
 8007bec:	d502      	bpl.n	8007bf4 <_printf_float+0x174>
 8007bee:	3301      	adds	r3, #1
 8007bf0:	440b      	add	r3, r1
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	e7de      	b.n	8007bba <_printf_float+0x13a>
 8007bfc:	b913      	cbnz	r3, 8007c04 <_printf_float+0x184>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	07d2      	lsls	r2, r2, #31
 8007c02:	d501      	bpl.n	8007c08 <_printf_float+0x188>
 8007c04:	3302      	adds	r3, #2
 8007c06:	e7f4      	b.n	8007bf2 <_printf_float+0x172>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e7f2      	b.n	8007bf2 <_printf_float+0x172>
 8007c0c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	4299      	cmp	r1, r3
 8007c14:	db05      	blt.n	8007c22 <_printf_float+0x1a2>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	6121      	str	r1, [r4, #16]
 8007c1a:	07d8      	lsls	r0, r3, #31
 8007c1c:	d5ea      	bpl.n	8007bf4 <_printf_float+0x174>
 8007c1e:	1c4b      	adds	r3, r1, #1
 8007c20:	e7e7      	b.n	8007bf2 <_printf_float+0x172>
 8007c22:	2900      	cmp	r1, #0
 8007c24:	bfd4      	ite	le
 8007c26:	f1c1 0202 	rsble	r2, r1, #2
 8007c2a:	2201      	movgt	r2, #1
 8007c2c:	4413      	add	r3, r2
 8007c2e:	e7e0      	b.n	8007bf2 <_printf_float+0x172>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	055a      	lsls	r2, r3, #21
 8007c34:	d407      	bmi.n	8007c46 <_printf_float+0x1c6>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	d12a      	bne.n	8007c9a <_printf_float+0x21a>
 8007c44:	e76a      	b.n	8007b1c <_printf_float+0x9c>
 8007c46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c4a:	f240 80e2 	bls.w	8007e12 <_printf_float+0x392>
 8007c4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5a:	d133      	bne.n	8007cc4 <_printf_float+0x244>
 8007c5c:	4a38      	ldr	r2, [pc, #224]	; (8007d40 <_printf_float+0x2c0>)
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4631      	mov	r1, r6
 8007c62:	4628      	mov	r0, r5
 8007c64:	47b8      	blx	r7
 8007c66:	3001      	adds	r0, #1
 8007c68:	f43f af58 	beq.w	8007b1c <_printf_float+0x9c>
 8007c6c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	db02      	blt.n	8007c7a <_printf_float+0x1fa>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	07d8      	lsls	r0, r3, #31
 8007c78:	d50f      	bpl.n	8007c9a <_printf_float+0x21a>
 8007c7a:	4653      	mov	r3, sl
 8007c7c:	465a      	mov	r2, fp
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f af49 	beq.w	8007b1c <_printf_float+0x9c>
 8007c8a:	f04f 0800 	mov.w	r8, #0
 8007c8e:	f104 091a 	add.w	r9, r4, #26
 8007c92:	9b08      	ldr	r3, [sp, #32]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	4543      	cmp	r3, r8
 8007c98:	dc09      	bgt.n	8007cae <_printf_float+0x22e>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	079b      	lsls	r3, r3, #30
 8007c9e:	f100 8108 	bmi.w	8007eb2 <_printf_float+0x432>
 8007ca2:	68e0      	ldr	r0, [r4, #12]
 8007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca6:	4298      	cmp	r0, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	4618      	movlt	r0, r3
 8007cac:	e738      	b.n	8007b20 <_printf_float+0xa0>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	464a      	mov	r2, r9
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f af2f 	beq.w	8007b1c <_printf_float+0x9c>
 8007cbe:	f108 0801 	add.w	r8, r8, #1
 8007cc2:	e7e6      	b.n	8007c92 <_printf_float+0x212>
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	dc3c      	bgt.n	8007d44 <_printf_float+0x2c4>
 8007cca:	4a1d      	ldr	r2, [pc, #116]	; (8007d40 <_printf_float+0x2c0>)
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f43f af21 	beq.w	8007b1c <_printf_float+0x9c>
 8007cda:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d102      	bne.n	8007ce8 <_printf_float+0x268>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	07d9      	lsls	r1, r3, #31
 8007ce6:	d5d8      	bpl.n	8007c9a <_printf_float+0x21a>
 8007ce8:	4653      	mov	r3, sl
 8007cea:	465a      	mov	r2, fp
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af12 	beq.w	8007b1c <_printf_float+0x9c>
 8007cf8:	f04f 0900 	mov.w	r9, #0
 8007cfc:	f104 0a1a 	add.w	sl, r4, #26
 8007d00:	9b07      	ldr	r3, [sp, #28]
 8007d02:	425b      	negs	r3, r3
 8007d04:	454b      	cmp	r3, r9
 8007d06:	dc01      	bgt.n	8007d0c <_printf_float+0x28c>
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	e795      	b.n	8007c38 <_printf_float+0x1b8>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4652      	mov	r2, sl
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f af00 	beq.w	8007b1c <_printf_float+0x9c>
 8007d1c:	f109 0901 	add.w	r9, r9, #1
 8007d20:	e7ee      	b.n	8007d00 <_printf_float+0x280>
 8007d22:	bf00      	nop
 8007d24:	f3af 8000 	nop.w
 8007d28:	ffffffff 	.word	0xffffffff
 8007d2c:	7fefffff 	.word	0x7fefffff
 8007d30:	08031cb4 	.word	0x08031cb4
 8007d34:	08031cb8 	.word	0x08031cb8
 8007d38:	08031cc0 	.word	0x08031cc0
 8007d3c:	08031cbc 	.word	0x08031cbc
 8007d40:	08031cc4 	.word	0x08031cc4
 8007d44:	9a08      	ldr	r2, [sp, #32]
 8007d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	bfa8      	it	ge
 8007d4c:	461a      	movge	r2, r3
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	4691      	mov	r9, r2
 8007d52:	dc38      	bgt.n	8007dc6 <_printf_float+0x346>
 8007d54:	2300      	movs	r3, #0
 8007d56:	9305      	str	r3, [sp, #20]
 8007d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d5c:	f104 021a 	add.w	r2, r4, #26
 8007d60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d62:	9905      	ldr	r1, [sp, #20]
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	eba3 0309 	sub.w	r3, r3, r9
 8007d6a:	428b      	cmp	r3, r1
 8007d6c:	dc33      	bgt.n	8007dd6 <_printf_float+0x356>
 8007d6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	db3c      	blt.n	8007df0 <_printf_float+0x370>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	07da      	lsls	r2, r3, #31
 8007d7a:	d439      	bmi.n	8007df0 <_printf_float+0x370>
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	9a04      	ldr	r2, [sp, #16]
 8007d80:	9907      	ldr	r1, [sp, #28]
 8007d82:	1a9a      	subs	r2, r3, r2
 8007d84:	eba3 0901 	sub.w	r9, r3, r1
 8007d88:	4591      	cmp	r9, r2
 8007d8a:	bfa8      	it	ge
 8007d8c:	4691      	movge	r9, r2
 8007d8e:	f1b9 0f00 	cmp.w	r9, #0
 8007d92:	dc35      	bgt.n	8007e00 <_printf_float+0x380>
 8007d94:	f04f 0800 	mov.w	r8, #0
 8007d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d9c:	f104 0a1a 	add.w	sl, r4, #26
 8007da0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	eba3 0309 	sub.w	r3, r3, r9
 8007daa:	4543      	cmp	r3, r8
 8007dac:	f77f af75 	ble.w	8007c9a <_printf_float+0x21a>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4652      	mov	r2, sl
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f aeae 	beq.w	8007b1c <_printf_float+0x9c>
 8007dc0:	f108 0801 	add.w	r8, r8, #1
 8007dc4:	e7ec      	b.n	8007da0 <_printf_float+0x320>
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4642      	mov	r2, r8
 8007dcc:	4628      	mov	r0, r5
 8007dce:	47b8      	blx	r7
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d1bf      	bne.n	8007d54 <_printf_float+0x2d4>
 8007dd4:	e6a2      	b.n	8007b1c <_printf_float+0x9c>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	9204      	str	r2, [sp, #16]
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	f43f ae9b 	beq.w	8007b1c <_printf_float+0x9c>
 8007de6:	9b05      	ldr	r3, [sp, #20]
 8007de8:	9a04      	ldr	r2, [sp, #16]
 8007dea:	3301      	adds	r3, #1
 8007dec:	9305      	str	r3, [sp, #20]
 8007dee:	e7b7      	b.n	8007d60 <_printf_float+0x2e0>
 8007df0:	4653      	mov	r3, sl
 8007df2:	465a      	mov	r2, fp
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	47b8      	blx	r7
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d1be      	bne.n	8007d7c <_printf_float+0x2fc>
 8007dfe:	e68d      	b.n	8007b1c <_printf_float+0x9c>
 8007e00:	9a04      	ldr	r2, [sp, #16]
 8007e02:	464b      	mov	r3, r9
 8007e04:	4442      	add	r2, r8
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1c1      	bne.n	8007d94 <_printf_float+0x314>
 8007e10:	e684      	b.n	8007b1c <_printf_float+0x9c>
 8007e12:	9a08      	ldr	r2, [sp, #32]
 8007e14:	2a01      	cmp	r2, #1
 8007e16:	dc01      	bgt.n	8007e1c <_printf_float+0x39c>
 8007e18:	07db      	lsls	r3, r3, #31
 8007e1a:	d537      	bpl.n	8007e8c <_printf_float+0x40c>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	4642      	mov	r2, r8
 8007e20:	4631      	mov	r1, r6
 8007e22:	4628      	mov	r0, r5
 8007e24:	47b8      	blx	r7
 8007e26:	3001      	adds	r0, #1
 8007e28:	f43f ae78 	beq.w	8007b1c <_printf_float+0x9c>
 8007e2c:	4653      	mov	r3, sl
 8007e2e:	465a      	mov	r2, fp
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f ae70 	beq.w	8007b1c <_printf_float+0x9c>
 8007e3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	d01b      	beq.n	8007e82 <_printf_float+0x402>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	f108 0201 	add.w	r2, r8, #1
 8007e50:	3b01      	subs	r3, #1
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d10e      	bne.n	8007e7a <_printf_float+0x3fa>
 8007e5c:	e65e      	b.n	8007b1c <_printf_float+0x9c>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	464a      	mov	r2, r9
 8007e62:	4631      	mov	r1, r6
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b8      	blx	r7
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f43f ae57 	beq.w	8007b1c <_printf_float+0x9c>
 8007e6e:	f108 0801 	add.w	r8, r8, #1
 8007e72:	9b08      	ldr	r3, [sp, #32]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	4543      	cmp	r3, r8
 8007e78:	dcf1      	bgt.n	8007e5e <_printf_float+0x3de>
 8007e7a:	9b04      	ldr	r3, [sp, #16]
 8007e7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e80:	e6db      	b.n	8007c3a <_printf_float+0x1ba>
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	f104 091a 	add.w	r9, r4, #26
 8007e8a:	e7f2      	b.n	8007e72 <_printf_float+0x3f2>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4642      	mov	r2, r8
 8007e90:	e7df      	b.n	8007e52 <_printf_float+0x3d2>
 8007e92:	2301      	movs	r3, #1
 8007e94:	464a      	mov	r2, r9
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f43f ae3d 	beq.w	8007b1c <_printf_float+0x9c>
 8007ea2:	f108 0801 	add.w	r8, r8, #1
 8007ea6:	68e3      	ldr	r3, [r4, #12]
 8007ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eaa:	1a5b      	subs	r3, r3, r1
 8007eac:	4543      	cmp	r3, r8
 8007eae:	dcf0      	bgt.n	8007e92 <_printf_float+0x412>
 8007eb0:	e6f7      	b.n	8007ca2 <_printf_float+0x222>
 8007eb2:	f04f 0800 	mov.w	r8, #0
 8007eb6:	f104 0919 	add.w	r9, r4, #25
 8007eba:	e7f4      	b.n	8007ea6 <_printf_float+0x426>

08007ebc <_printf_common>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	4699      	mov	r9, r3
 8007ec4:	688a      	ldr	r2, [r1, #8]
 8007ec6:	690b      	ldr	r3, [r1, #16]
 8007ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	bfb8      	it	lt
 8007ed0:	4613      	movlt	r3, r2
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed8:	4607      	mov	r7, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b10a      	cbz	r2, 8007ee2 <_printf_common+0x26>
 8007ede:	3301      	adds	r3, #1
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	0699      	lsls	r1, r3, #26
 8007ee6:	bf42      	ittt	mi
 8007ee8:	6833      	ldrmi	r3, [r6, #0]
 8007eea:	3302      	addmi	r3, #2
 8007eec:	6033      	strmi	r3, [r6, #0]
 8007eee:	6825      	ldr	r5, [r4, #0]
 8007ef0:	f015 0506 	ands.w	r5, r5, #6
 8007ef4:	d106      	bne.n	8007f04 <_printf_common+0x48>
 8007ef6:	f104 0a19 	add.w	sl, r4, #25
 8007efa:	68e3      	ldr	r3, [r4, #12]
 8007efc:	6832      	ldr	r2, [r6, #0]
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	42ab      	cmp	r3, r5
 8007f02:	dc26      	bgt.n	8007f52 <_printf_common+0x96>
 8007f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f08:	1e13      	subs	r3, r2, #0
 8007f0a:	6822      	ldr	r2, [r4, #0]
 8007f0c:	bf18      	it	ne
 8007f0e:	2301      	movne	r3, #1
 8007f10:	0692      	lsls	r2, r2, #26
 8007f12:	d42b      	bmi.n	8007f6c <_printf_common+0xb0>
 8007f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f18:	4649      	mov	r1, r9
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	47c0      	blx	r8
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d01e      	beq.n	8007f60 <_printf_common+0xa4>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	68e5      	ldr	r5, [r4, #12]
 8007f26:	6832      	ldr	r2, [r6, #0]
 8007f28:	f003 0306 	and.w	r3, r3, #6
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	bf08      	it	eq
 8007f30:	1aad      	subeq	r5, r5, r2
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	6922      	ldr	r2, [r4, #16]
 8007f36:	bf0c      	ite	eq
 8007f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f3c:	2500      	movne	r5, #0
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	bfc4      	itt	gt
 8007f42:	1a9b      	subgt	r3, r3, r2
 8007f44:	18ed      	addgt	r5, r5, r3
 8007f46:	2600      	movs	r6, #0
 8007f48:	341a      	adds	r4, #26
 8007f4a:	42b5      	cmp	r5, r6
 8007f4c:	d11a      	bne.n	8007f84 <_printf_common+0xc8>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	e008      	b.n	8007f64 <_printf_common+0xa8>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4652      	mov	r2, sl
 8007f56:	4649      	mov	r1, r9
 8007f58:	4638      	mov	r0, r7
 8007f5a:	47c0      	blx	r8
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d103      	bne.n	8007f68 <_printf_common+0xac>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	3501      	adds	r5, #1
 8007f6a:	e7c6      	b.n	8007efa <_printf_common+0x3e>
 8007f6c:	18e1      	adds	r1, r4, r3
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	2030      	movs	r0, #48	; 0x30
 8007f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f76:	4422      	add	r2, r4
 8007f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f80:	3302      	adds	r3, #2
 8007f82:	e7c7      	b.n	8007f14 <_printf_common+0x58>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4622      	mov	r2, r4
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c0      	blx	r8
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d0e6      	beq.n	8007f60 <_printf_common+0xa4>
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7d9      	b.n	8007f4a <_printf_common+0x8e>
	...

08007f98 <_printf_i>:
 8007f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	7e0f      	ldrb	r7, [r1, #24]
 8007f9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fa0:	2f78      	cmp	r7, #120	; 0x78
 8007fa2:	4691      	mov	r9, r2
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	469a      	mov	sl, r3
 8007faa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fae:	d807      	bhi.n	8007fc0 <_printf_i+0x28>
 8007fb0:	2f62      	cmp	r7, #98	; 0x62
 8007fb2:	d80a      	bhi.n	8007fca <_printf_i+0x32>
 8007fb4:	2f00      	cmp	r7, #0
 8007fb6:	f000 80d8 	beq.w	800816a <_printf_i+0x1d2>
 8007fba:	2f58      	cmp	r7, #88	; 0x58
 8007fbc:	f000 80a3 	beq.w	8008106 <_printf_i+0x16e>
 8007fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc8:	e03a      	b.n	8008040 <_printf_i+0xa8>
 8007fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fce:	2b15      	cmp	r3, #21
 8007fd0:	d8f6      	bhi.n	8007fc0 <_printf_i+0x28>
 8007fd2:	a101      	add	r1, pc, #4	; (adr r1, 8007fd8 <_printf_i+0x40>)
 8007fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008045 	.word	0x08008045
 8007fe0:	08007fc1 	.word	0x08007fc1
 8007fe4:	08007fc1 	.word	0x08007fc1
 8007fe8:	08007fc1 	.word	0x08007fc1
 8007fec:	08007fc1 	.word	0x08007fc1
 8007ff0:	08008045 	.word	0x08008045
 8007ff4:	08007fc1 	.word	0x08007fc1
 8007ff8:	08007fc1 	.word	0x08007fc1
 8007ffc:	08007fc1 	.word	0x08007fc1
 8008000:	08007fc1 	.word	0x08007fc1
 8008004:	08008151 	.word	0x08008151
 8008008:	08008075 	.word	0x08008075
 800800c:	08008133 	.word	0x08008133
 8008010:	08007fc1 	.word	0x08007fc1
 8008014:	08007fc1 	.word	0x08007fc1
 8008018:	08008173 	.word	0x08008173
 800801c:	08007fc1 	.word	0x08007fc1
 8008020:	08008075 	.word	0x08008075
 8008024:	08007fc1 	.word	0x08007fc1
 8008028:	08007fc1 	.word	0x08007fc1
 800802c:	0800813b 	.word	0x0800813b
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	602a      	str	r2, [r5, #0]
 8008038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800803c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008040:	2301      	movs	r3, #1
 8008042:	e0a3      	b.n	800818c <_printf_i+0x1f4>
 8008044:	6820      	ldr	r0, [r4, #0]
 8008046:	6829      	ldr	r1, [r5, #0]
 8008048:	0606      	lsls	r6, r0, #24
 800804a:	f101 0304 	add.w	r3, r1, #4
 800804e:	d50a      	bpl.n	8008066 <_printf_i+0xce>
 8008050:	680e      	ldr	r6, [r1, #0]
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	2e00      	cmp	r6, #0
 8008056:	da03      	bge.n	8008060 <_printf_i+0xc8>
 8008058:	232d      	movs	r3, #45	; 0x2d
 800805a:	4276      	negs	r6, r6
 800805c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008060:	485e      	ldr	r0, [pc, #376]	; (80081dc <_printf_i+0x244>)
 8008062:	230a      	movs	r3, #10
 8008064:	e019      	b.n	800809a <_printf_i+0x102>
 8008066:	680e      	ldr	r6, [r1, #0]
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800806e:	bf18      	it	ne
 8008070:	b236      	sxthne	r6, r6
 8008072:	e7ef      	b.n	8008054 <_printf_i+0xbc>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	6820      	ldr	r0, [r4, #0]
 8008078:	1d19      	adds	r1, r3, #4
 800807a:	6029      	str	r1, [r5, #0]
 800807c:	0601      	lsls	r1, r0, #24
 800807e:	d501      	bpl.n	8008084 <_printf_i+0xec>
 8008080:	681e      	ldr	r6, [r3, #0]
 8008082:	e002      	b.n	800808a <_printf_i+0xf2>
 8008084:	0646      	lsls	r6, r0, #25
 8008086:	d5fb      	bpl.n	8008080 <_printf_i+0xe8>
 8008088:	881e      	ldrh	r6, [r3, #0]
 800808a:	4854      	ldr	r0, [pc, #336]	; (80081dc <_printf_i+0x244>)
 800808c:	2f6f      	cmp	r7, #111	; 0x6f
 800808e:	bf0c      	ite	eq
 8008090:	2308      	moveq	r3, #8
 8008092:	230a      	movne	r3, #10
 8008094:	2100      	movs	r1, #0
 8008096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800809a:	6865      	ldr	r5, [r4, #4]
 800809c:	60a5      	str	r5, [r4, #8]
 800809e:	2d00      	cmp	r5, #0
 80080a0:	bfa2      	ittt	ge
 80080a2:	6821      	ldrge	r1, [r4, #0]
 80080a4:	f021 0104 	bicge.w	r1, r1, #4
 80080a8:	6021      	strge	r1, [r4, #0]
 80080aa:	b90e      	cbnz	r6, 80080b0 <_printf_i+0x118>
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	d04d      	beq.n	800814c <_printf_i+0x1b4>
 80080b0:	4615      	mov	r5, r2
 80080b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80080b6:	fb03 6711 	mls	r7, r3, r1, r6
 80080ba:	5dc7      	ldrb	r7, [r0, r7]
 80080bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080c0:	4637      	mov	r7, r6
 80080c2:	42bb      	cmp	r3, r7
 80080c4:	460e      	mov	r6, r1
 80080c6:	d9f4      	bls.n	80080b2 <_printf_i+0x11a>
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d10b      	bne.n	80080e4 <_printf_i+0x14c>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	07de      	lsls	r6, r3, #31
 80080d0:	d508      	bpl.n	80080e4 <_printf_i+0x14c>
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	6861      	ldr	r1, [r4, #4]
 80080d6:	4299      	cmp	r1, r3
 80080d8:	bfde      	ittt	le
 80080da:	2330      	movle	r3, #48	; 0x30
 80080dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080e4:	1b52      	subs	r2, r2, r5
 80080e6:	6122      	str	r2, [r4, #16]
 80080e8:	f8cd a000 	str.w	sl, [sp]
 80080ec:	464b      	mov	r3, r9
 80080ee:	aa03      	add	r2, sp, #12
 80080f0:	4621      	mov	r1, r4
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7ff fee2 	bl	8007ebc <_printf_common>
 80080f8:	3001      	adds	r0, #1
 80080fa:	d14c      	bne.n	8008196 <_printf_i+0x1fe>
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	b004      	add	sp, #16
 8008102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008106:	4835      	ldr	r0, [pc, #212]	; (80081dc <_printf_i+0x244>)
 8008108:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800810c:	6829      	ldr	r1, [r5, #0]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f851 6b04 	ldr.w	r6, [r1], #4
 8008114:	6029      	str	r1, [r5, #0]
 8008116:	061d      	lsls	r5, r3, #24
 8008118:	d514      	bpl.n	8008144 <_printf_i+0x1ac>
 800811a:	07df      	lsls	r7, r3, #31
 800811c:	bf44      	itt	mi
 800811e:	f043 0320 	orrmi.w	r3, r3, #32
 8008122:	6023      	strmi	r3, [r4, #0]
 8008124:	b91e      	cbnz	r6, 800812e <_printf_i+0x196>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	f023 0320 	bic.w	r3, r3, #32
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	2310      	movs	r3, #16
 8008130:	e7b0      	b.n	8008094 <_printf_i+0xfc>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	f043 0320 	orr.w	r3, r3, #32
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	2378      	movs	r3, #120	; 0x78
 800813c:	4828      	ldr	r0, [pc, #160]	; (80081e0 <_printf_i+0x248>)
 800813e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008142:	e7e3      	b.n	800810c <_printf_i+0x174>
 8008144:	0659      	lsls	r1, r3, #25
 8008146:	bf48      	it	mi
 8008148:	b2b6      	uxthmi	r6, r6
 800814a:	e7e6      	b.n	800811a <_printf_i+0x182>
 800814c:	4615      	mov	r5, r2
 800814e:	e7bb      	b.n	80080c8 <_printf_i+0x130>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	6826      	ldr	r6, [r4, #0]
 8008154:	6961      	ldr	r1, [r4, #20]
 8008156:	1d18      	adds	r0, r3, #4
 8008158:	6028      	str	r0, [r5, #0]
 800815a:	0635      	lsls	r5, r6, #24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	d501      	bpl.n	8008164 <_printf_i+0x1cc>
 8008160:	6019      	str	r1, [r3, #0]
 8008162:	e002      	b.n	800816a <_printf_i+0x1d2>
 8008164:	0670      	lsls	r0, r6, #25
 8008166:	d5fb      	bpl.n	8008160 <_printf_i+0x1c8>
 8008168:	8019      	strh	r1, [r3, #0]
 800816a:	2300      	movs	r3, #0
 800816c:	6123      	str	r3, [r4, #16]
 800816e:	4615      	mov	r5, r2
 8008170:	e7ba      	b.n	80080e8 <_printf_i+0x150>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	1d1a      	adds	r2, r3, #4
 8008176:	602a      	str	r2, [r5, #0]
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	6862      	ldr	r2, [r4, #4]
 800817c:	2100      	movs	r1, #0
 800817e:	4628      	mov	r0, r5
 8008180:	f7f8 f866 	bl	8000250 <memchr>
 8008184:	b108      	cbz	r0, 800818a <_printf_i+0x1f2>
 8008186:	1b40      	subs	r0, r0, r5
 8008188:	6060      	str	r0, [r4, #4]
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	6123      	str	r3, [r4, #16]
 800818e:	2300      	movs	r3, #0
 8008190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008194:	e7a8      	b.n	80080e8 <_printf_i+0x150>
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	462a      	mov	r2, r5
 800819a:	4649      	mov	r1, r9
 800819c:	4640      	mov	r0, r8
 800819e:	47d0      	blx	sl
 80081a0:	3001      	adds	r0, #1
 80081a2:	d0ab      	beq.n	80080fc <_printf_i+0x164>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	079b      	lsls	r3, r3, #30
 80081a8:	d413      	bmi.n	80081d2 <_printf_i+0x23a>
 80081aa:	68e0      	ldr	r0, [r4, #12]
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	4298      	cmp	r0, r3
 80081b0:	bfb8      	it	lt
 80081b2:	4618      	movlt	r0, r3
 80081b4:	e7a4      	b.n	8008100 <_printf_i+0x168>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4632      	mov	r2, r6
 80081ba:	4649      	mov	r1, r9
 80081bc:	4640      	mov	r0, r8
 80081be:	47d0      	blx	sl
 80081c0:	3001      	adds	r0, #1
 80081c2:	d09b      	beq.n	80080fc <_printf_i+0x164>
 80081c4:	3501      	adds	r5, #1
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	9903      	ldr	r1, [sp, #12]
 80081ca:	1a5b      	subs	r3, r3, r1
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dcf2      	bgt.n	80081b6 <_printf_i+0x21e>
 80081d0:	e7eb      	b.n	80081aa <_printf_i+0x212>
 80081d2:	2500      	movs	r5, #0
 80081d4:	f104 0619 	add.w	r6, r4, #25
 80081d8:	e7f5      	b.n	80081c6 <_printf_i+0x22e>
 80081da:	bf00      	nop
 80081dc:	08031cc6 	.word	0x08031cc6
 80081e0:	08031cd7 	.word	0x08031cd7

080081e4 <_scanf_float>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	b087      	sub	sp, #28
 80081ea:	4617      	mov	r7, r2
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	688b      	ldr	r3, [r1, #8]
 80081f0:	1e5a      	subs	r2, r3, #1
 80081f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081f6:	bf83      	ittte	hi
 80081f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081fc:	195b      	addhi	r3, r3, r5
 80081fe:	9302      	strhi	r3, [sp, #8]
 8008200:	2300      	movls	r3, #0
 8008202:	bf86      	itte	hi
 8008204:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008208:	608b      	strhi	r3, [r1, #8]
 800820a:	9302      	strls	r3, [sp, #8]
 800820c:	680b      	ldr	r3, [r1, #0]
 800820e:	468b      	mov	fp, r1
 8008210:	2500      	movs	r5, #0
 8008212:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008216:	f84b 3b1c 	str.w	r3, [fp], #28
 800821a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800821e:	4680      	mov	r8, r0
 8008220:	460c      	mov	r4, r1
 8008222:	465e      	mov	r6, fp
 8008224:	46aa      	mov	sl, r5
 8008226:	46a9      	mov	r9, r5
 8008228:	9501      	str	r5, [sp, #4]
 800822a:	68a2      	ldr	r2, [r4, #8]
 800822c:	b152      	cbz	r2, 8008244 <_scanf_float+0x60>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b4e      	cmp	r3, #78	; 0x4e
 8008234:	d864      	bhi.n	8008300 <_scanf_float+0x11c>
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d83c      	bhi.n	80082b4 <_scanf_float+0xd0>
 800823a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800823e:	b2c8      	uxtb	r0, r1
 8008240:	280e      	cmp	r0, #14
 8008242:	d93a      	bls.n	80082ba <_scanf_float+0xd6>
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	d003      	beq.n	8008252 <_scanf_float+0x6e>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008256:	f1ba 0f01 	cmp.w	sl, #1
 800825a:	f200 8113 	bhi.w	8008484 <_scanf_float+0x2a0>
 800825e:	455e      	cmp	r6, fp
 8008260:	f200 8105 	bhi.w	800846e <_scanf_float+0x28a>
 8008264:	2501      	movs	r5, #1
 8008266:	4628      	mov	r0, r5
 8008268:	b007      	add	sp, #28
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008272:	2a0d      	cmp	r2, #13
 8008274:	d8e6      	bhi.n	8008244 <_scanf_float+0x60>
 8008276:	a101      	add	r1, pc, #4	; (adr r1, 800827c <_scanf_float+0x98>)
 8008278:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800827c:	080083bb 	.word	0x080083bb
 8008280:	08008245 	.word	0x08008245
 8008284:	08008245 	.word	0x08008245
 8008288:	08008245 	.word	0x08008245
 800828c:	0800841b 	.word	0x0800841b
 8008290:	080083f3 	.word	0x080083f3
 8008294:	08008245 	.word	0x08008245
 8008298:	08008245 	.word	0x08008245
 800829c:	080083c9 	.word	0x080083c9
 80082a0:	08008245 	.word	0x08008245
 80082a4:	08008245 	.word	0x08008245
 80082a8:	08008245 	.word	0x08008245
 80082ac:	08008245 	.word	0x08008245
 80082b0:	08008381 	.word	0x08008381
 80082b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80082b8:	e7db      	b.n	8008272 <_scanf_float+0x8e>
 80082ba:	290e      	cmp	r1, #14
 80082bc:	d8c2      	bhi.n	8008244 <_scanf_float+0x60>
 80082be:	a001      	add	r0, pc, #4	; (adr r0, 80082c4 <_scanf_float+0xe0>)
 80082c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082c4:	08008373 	.word	0x08008373
 80082c8:	08008245 	.word	0x08008245
 80082cc:	08008373 	.word	0x08008373
 80082d0:	08008407 	.word	0x08008407
 80082d4:	08008245 	.word	0x08008245
 80082d8:	08008321 	.word	0x08008321
 80082dc:	0800835d 	.word	0x0800835d
 80082e0:	0800835d 	.word	0x0800835d
 80082e4:	0800835d 	.word	0x0800835d
 80082e8:	0800835d 	.word	0x0800835d
 80082ec:	0800835d 	.word	0x0800835d
 80082f0:	0800835d 	.word	0x0800835d
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	0800835d 	.word	0x0800835d
 8008300:	2b6e      	cmp	r3, #110	; 0x6e
 8008302:	d809      	bhi.n	8008318 <_scanf_float+0x134>
 8008304:	2b60      	cmp	r3, #96	; 0x60
 8008306:	d8b2      	bhi.n	800826e <_scanf_float+0x8a>
 8008308:	2b54      	cmp	r3, #84	; 0x54
 800830a:	d077      	beq.n	80083fc <_scanf_float+0x218>
 800830c:	2b59      	cmp	r3, #89	; 0x59
 800830e:	d199      	bne.n	8008244 <_scanf_float+0x60>
 8008310:	2d07      	cmp	r5, #7
 8008312:	d197      	bne.n	8008244 <_scanf_float+0x60>
 8008314:	2508      	movs	r5, #8
 8008316:	e029      	b.n	800836c <_scanf_float+0x188>
 8008318:	2b74      	cmp	r3, #116	; 0x74
 800831a:	d06f      	beq.n	80083fc <_scanf_float+0x218>
 800831c:	2b79      	cmp	r3, #121	; 0x79
 800831e:	e7f6      	b.n	800830e <_scanf_float+0x12a>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	05c8      	lsls	r0, r1, #23
 8008324:	d51a      	bpl.n	800835c <_scanf_float+0x178>
 8008326:	9b02      	ldr	r3, [sp, #8]
 8008328:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800832c:	6021      	str	r1, [r4, #0]
 800832e:	f109 0901 	add.w	r9, r9, #1
 8008332:	b11b      	cbz	r3, 800833c <_scanf_float+0x158>
 8008334:	3b01      	subs	r3, #1
 8008336:	3201      	adds	r2, #1
 8008338:	9302      	str	r3, [sp, #8]
 800833a:	60a2      	str	r2, [r4, #8]
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	3b01      	subs	r3, #1
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	3301      	adds	r3, #1
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3b01      	subs	r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	f340 8084 	ble.w	800845c <_scanf_float+0x278>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	3301      	adds	r3, #1
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	e766      	b.n	800822a <_scanf_float+0x46>
 800835c:	eb1a 0f05 	cmn.w	sl, r5
 8008360:	f47f af70 	bne.w	8008244 <_scanf_float+0x60>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	f806 3b01 	strb.w	r3, [r6], #1
 8008370:	e7e4      	b.n	800833c <_scanf_float+0x158>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	0610      	lsls	r0, r2, #24
 8008376:	f57f af65 	bpl.w	8008244 <_scanf_float+0x60>
 800837a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800837e:	e7f4      	b.n	800836a <_scanf_float+0x186>
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	d10e      	bne.n	80083a4 <_scanf_float+0x1c0>
 8008386:	f1b9 0f00 	cmp.w	r9, #0
 800838a:	d10e      	bne.n	80083aa <_scanf_float+0x1c6>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008392:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008396:	d108      	bne.n	80083aa <_scanf_float+0x1c6>
 8008398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	f04f 0a01 	mov.w	sl, #1
 80083a2:	e7e3      	b.n	800836c <_scanf_float+0x188>
 80083a4:	f1ba 0f02 	cmp.w	sl, #2
 80083a8:	d055      	beq.n	8008456 <_scanf_float+0x272>
 80083aa:	2d01      	cmp	r5, #1
 80083ac:	d002      	beq.n	80083b4 <_scanf_float+0x1d0>
 80083ae:	2d04      	cmp	r5, #4
 80083b0:	f47f af48 	bne.w	8008244 <_scanf_float+0x60>
 80083b4:	3501      	adds	r5, #1
 80083b6:	b2ed      	uxtb	r5, r5
 80083b8:	e7d8      	b.n	800836c <_scanf_float+0x188>
 80083ba:	f1ba 0f01 	cmp.w	sl, #1
 80083be:	f47f af41 	bne.w	8008244 <_scanf_float+0x60>
 80083c2:	f04f 0a02 	mov.w	sl, #2
 80083c6:	e7d1      	b.n	800836c <_scanf_float+0x188>
 80083c8:	b97d      	cbnz	r5, 80083ea <_scanf_float+0x206>
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	f47f af3c 	bne.w	800824a <_scanf_float+0x66>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083dc:	f47f af39 	bne.w	8008252 <_scanf_float+0x6e>
 80083e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	2501      	movs	r5, #1
 80083e8:	e7c0      	b.n	800836c <_scanf_float+0x188>
 80083ea:	2d03      	cmp	r5, #3
 80083ec:	d0e2      	beq.n	80083b4 <_scanf_float+0x1d0>
 80083ee:	2d05      	cmp	r5, #5
 80083f0:	e7de      	b.n	80083b0 <_scanf_float+0x1cc>
 80083f2:	2d02      	cmp	r5, #2
 80083f4:	f47f af26 	bne.w	8008244 <_scanf_float+0x60>
 80083f8:	2503      	movs	r5, #3
 80083fa:	e7b7      	b.n	800836c <_scanf_float+0x188>
 80083fc:	2d06      	cmp	r5, #6
 80083fe:	f47f af21 	bne.w	8008244 <_scanf_float+0x60>
 8008402:	2507      	movs	r5, #7
 8008404:	e7b2      	b.n	800836c <_scanf_float+0x188>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	0591      	lsls	r1, r2, #22
 800840a:	f57f af1b 	bpl.w	8008244 <_scanf_float+0x60>
 800840e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	f8cd 9004 	str.w	r9, [sp, #4]
 8008418:	e7a8      	b.n	800836c <_scanf_float+0x188>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008420:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008424:	d006      	beq.n	8008434 <_scanf_float+0x250>
 8008426:	0550      	lsls	r0, r2, #21
 8008428:	f57f af0c 	bpl.w	8008244 <_scanf_float+0x60>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	f43f af0f 	beq.w	8008252 <_scanf_float+0x6e>
 8008434:	0591      	lsls	r1, r2, #22
 8008436:	bf58      	it	pl
 8008438:	9901      	ldrpl	r1, [sp, #4]
 800843a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800843e:	bf58      	it	pl
 8008440:	eba9 0101 	subpl.w	r1, r9, r1
 8008444:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008448:	bf58      	it	pl
 800844a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	e78a      	b.n	800836c <_scanf_float+0x188>
 8008456:	f04f 0a03 	mov.w	sl, #3
 800845a:	e787      	b.n	800836c <_scanf_float+0x188>
 800845c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008460:	4639      	mov	r1, r7
 8008462:	4640      	mov	r0, r8
 8008464:	4798      	blx	r3
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aedf 	beq.w	800822a <_scanf_float+0x46>
 800846c:	e6ea      	b.n	8008244 <_scanf_float+0x60>
 800846e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008476:	463a      	mov	r2, r7
 8008478:	4640      	mov	r0, r8
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	e6ec      	b.n	800825e <_scanf_float+0x7a>
 8008484:	1e6b      	subs	r3, r5, #1
 8008486:	2b06      	cmp	r3, #6
 8008488:	d825      	bhi.n	80084d6 <_scanf_float+0x2f2>
 800848a:	2d02      	cmp	r5, #2
 800848c:	d836      	bhi.n	80084fc <_scanf_float+0x318>
 800848e:	455e      	cmp	r6, fp
 8008490:	f67f aee8 	bls.w	8008264 <_scanf_float+0x80>
 8008494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008498:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800849c:	463a      	mov	r2, r7
 800849e:	4640      	mov	r0, r8
 80084a0:	4798      	blx	r3
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	e7f1      	b.n	800848e <_scanf_float+0x2aa>
 80084aa:	9802      	ldr	r0, [sp, #8]
 80084ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	463a      	mov	r2, r7
 80084b8:	4640      	mov	r0, r8
 80084ba:	4798      	blx	r3
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	3b01      	subs	r3, #1
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084c6:	fa5f fa8a 	uxtb.w	sl, sl
 80084ca:	f1ba 0f02 	cmp.w	sl, #2
 80084ce:	d1ec      	bne.n	80084aa <_scanf_float+0x2c6>
 80084d0:	3d03      	subs	r5, #3
 80084d2:	b2ed      	uxtb	r5, r5
 80084d4:	1b76      	subs	r6, r6, r5
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	05da      	lsls	r2, r3, #23
 80084da:	d52f      	bpl.n	800853c <_scanf_float+0x358>
 80084dc:	055b      	lsls	r3, r3, #21
 80084de:	d510      	bpl.n	8008502 <_scanf_float+0x31e>
 80084e0:	455e      	cmp	r6, fp
 80084e2:	f67f aebf 	bls.w	8008264 <_scanf_float+0x80>
 80084e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084ee:	463a      	mov	r2, r7
 80084f0:	4640      	mov	r0, r8
 80084f2:	4798      	blx	r3
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	e7f1      	b.n	80084e0 <_scanf_float+0x2fc>
 80084fc:	46aa      	mov	sl, r5
 80084fe:	9602      	str	r6, [sp, #8]
 8008500:	e7df      	b.n	80084c2 <_scanf_float+0x2de>
 8008502:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	2965      	cmp	r1, #101	; 0x65
 800850a:	f103 33ff 	add.w	r3, r3, #4294967295
 800850e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	d00c      	beq.n	8008530 <_scanf_float+0x34c>
 8008516:	2945      	cmp	r1, #69	; 0x45
 8008518:	d00a      	beq.n	8008530 <_scanf_float+0x34c>
 800851a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800851e:	463a      	mov	r2, r7
 8008520:	4640      	mov	r0, r8
 8008522:	4798      	blx	r3
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800852a:	3b01      	subs	r3, #1
 800852c:	1eb5      	subs	r5, r6, #2
 800852e:	6123      	str	r3, [r4, #16]
 8008530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008534:	463a      	mov	r2, r7
 8008536:	4640      	mov	r0, r8
 8008538:	4798      	blx	r3
 800853a:	462e      	mov	r6, r5
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	f015 0510 	ands.w	r5, r5, #16
 8008542:	d14e      	bne.n	80085e2 <_scanf_float+0x3fe>
 8008544:	7035      	strb	r5, [r6, #0]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800854c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008550:	d119      	bne.n	8008586 <_scanf_float+0x3a2>
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	454b      	cmp	r3, r9
 8008556:	eba3 0209 	sub.w	r2, r3, r9
 800855a:	d121      	bne.n	80085a0 <_scanf_float+0x3bc>
 800855c:	2200      	movs	r2, #0
 800855e:	4659      	mov	r1, fp
 8008560:	4640      	mov	r0, r8
 8008562:	f000 fe3b 	bl	80091dc <_strtod_r>
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	f012 0f02 	tst.w	r2, #2
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	d021      	beq.n	80085b6 <_scanf_float+0x3d2>
 8008572:	9903      	ldr	r1, [sp, #12]
 8008574:	1d1a      	adds	r2, r3, #4
 8008576:	600a      	str	r2, [r1, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	ed83 0b00 	vstr	d0, [r3]
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	60e3      	str	r3, [r4, #12]
 8008584:	e66f      	b.n	8008266 <_scanf_float+0x82>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0e7      	beq.n	800855c <_scanf_float+0x378>
 800858c:	9905      	ldr	r1, [sp, #20]
 800858e:	230a      	movs	r3, #10
 8008590:	462a      	mov	r2, r5
 8008592:	3101      	adds	r1, #1
 8008594:	4640      	mov	r0, r8
 8008596:	f000 fea9 	bl	80092ec <_strtol_r>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	9e05      	ldr	r6, [sp, #20]
 800859e:	1ac2      	subs	r2, r0, r3
 80085a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80085a4:	429e      	cmp	r6, r3
 80085a6:	bf28      	it	cs
 80085a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80085ac:	490e      	ldr	r1, [pc, #56]	; (80085e8 <_scanf_float+0x404>)
 80085ae:	4630      	mov	r0, r6
 80085b0:	f000 f824 	bl	80085fc <siprintf>
 80085b4:	e7d2      	b.n	800855c <_scanf_float+0x378>
 80085b6:	9903      	ldr	r1, [sp, #12]
 80085b8:	f012 0f04 	tst.w	r2, #4
 80085bc:	f103 0204 	add.w	r2, r3, #4
 80085c0:	600a      	str	r2, [r1, #0]
 80085c2:	d1d9      	bne.n	8008578 <_scanf_float+0x394>
 80085c4:	eeb4 0b40 	vcmp.f64	d0, d0
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	681e      	ldr	r6, [r3, #0]
 80085ce:	d705      	bvc.n	80085dc <_scanf_float+0x3f8>
 80085d0:	4806      	ldr	r0, [pc, #24]	; (80085ec <_scanf_float+0x408>)
 80085d2:	f000 f80d 	bl	80085f0 <nanf>
 80085d6:	ed86 0a00 	vstr	s0, [r6]
 80085da:	e7d0      	b.n	800857e <_scanf_float+0x39a>
 80085dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80085e0:	e7f9      	b.n	80085d6 <_scanf_float+0x3f2>
 80085e2:	2500      	movs	r5, #0
 80085e4:	e63f      	b.n	8008266 <_scanf_float+0x82>
 80085e6:	bf00      	nop
 80085e8:	08031ce8 	.word	0x08031ce8
 80085ec:	080320f0 	.word	0x080320f0

080085f0 <nanf>:
 80085f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80085f8 <nanf+0x8>
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	7fc00000 	.word	0x7fc00000

080085fc <siprintf>:
 80085fc:	b40e      	push	{r1, r2, r3}
 80085fe:	b500      	push	{lr}
 8008600:	b09c      	sub	sp, #112	; 0x70
 8008602:	ab1d      	add	r3, sp, #116	; 0x74
 8008604:	9002      	str	r0, [sp, #8]
 8008606:	9006      	str	r0, [sp, #24]
 8008608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800860c:	4809      	ldr	r0, [pc, #36]	; (8008634 <siprintf+0x38>)
 800860e:	9107      	str	r1, [sp, #28]
 8008610:	9104      	str	r1, [sp, #16]
 8008612:	4909      	ldr	r1, [pc, #36]	; (8008638 <siprintf+0x3c>)
 8008614:	f853 2b04 	ldr.w	r2, [r3], #4
 8008618:	9105      	str	r1, [sp, #20]
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	a902      	add	r1, sp, #8
 8008620:	f002 fe0c 	bl	800b23c <_svfiprintf_r>
 8008624:	9b02      	ldr	r3, [sp, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	b01c      	add	sp, #112	; 0x70
 800862c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008630:	b003      	add	sp, #12
 8008632:	4770      	bx	lr
 8008634:	20000010 	.word	0x20000010
 8008638:	ffff0208 	.word	0xffff0208

0800863c <sulp>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	460d      	mov	r5, r1
 8008642:	4616      	mov	r6, r2
 8008644:	ec45 4b10 	vmov	d0, r4, r5
 8008648:	f002 fb5a 	bl	800ad00 <__ulp>
 800864c:	b17e      	cbz	r6, 800866e <sulp+0x32>
 800864e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008656:	2b00      	cmp	r3, #0
 8008658:	dd09      	ble.n	800866e <sulp+0x32>
 800865a:	051b      	lsls	r3, r3, #20
 800865c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008660:	2000      	movs	r0, #0
 8008662:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008666:	ec41 0b17 	vmov	d7, r0, r1
 800866a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800866e:	bd70      	pop	{r4, r5, r6, pc}

08008670 <_strtod_l>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	ed2d 8b0e 	vpush	{d8-d14}
 8008678:	b097      	sub	sp, #92	; 0x5c
 800867a:	461f      	mov	r7, r3
 800867c:	2300      	movs	r3, #0
 800867e:	9312      	str	r3, [sp, #72]	; 0x48
 8008680:	4ba1      	ldr	r3, [pc, #644]	; (8008908 <_strtod_l+0x298>)
 8008682:	920d      	str	r2, [sp, #52]	; 0x34
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	9307      	str	r3, [sp, #28]
 8008688:	4604      	mov	r4, r0
 800868a:	4618      	mov	r0, r3
 800868c:	468b      	mov	fp, r1
 800868e:	f7f7 fdd7 	bl	8000240 <strlen>
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	4605      	mov	r5, r0
 8008698:	f04f 0900 	mov.w	r9, #0
 800869c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80086a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086a2:	7813      	ldrb	r3, [r2, #0]
 80086a4:	2b2b      	cmp	r3, #43	; 0x2b
 80086a6:	d04d      	beq.n	8008744 <_strtod_l+0xd4>
 80086a8:	d83a      	bhi.n	8008720 <_strtod_l+0xb0>
 80086aa:	2b0d      	cmp	r3, #13
 80086ac:	d833      	bhi.n	8008716 <_strtod_l+0xa6>
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d833      	bhi.n	800871a <_strtod_l+0xaa>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d03d      	beq.n	8008732 <_strtod_l+0xc2>
 80086b6:	2300      	movs	r3, #0
 80086b8:	9308      	str	r3, [sp, #32]
 80086ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80086bc:	7833      	ldrb	r3, [r6, #0]
 80086be:	2b30      	cmp	r3, #48	; 0x30
 80086c0:	f040 80b0 	bne.w	8008824 <_strtod_l+0x1b4>
 80086c4:	7873      	ldrb	r3, [r6, #1]
 80086c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086ca:	2b58      	cmp	r3, #88	; 0x58
 80086cc:	d167      	bne.n	800879e <_strtod_l+0x12e>
 80086ce:	9b08      	ldr	r3, [sp, #32]
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	ab12      	add	r3, sp, #72	; 0x48
 80086d4:	9702      	str	r7, [sp, #8]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	4a8c      	ldr	r2, [pc, #560]	; (800890c <_strtod_l+0x29c>)
 80086da:	ab13      	add	r3, sp, #76	; 0x4c
 80086dc:	a911      	add	r1, sp, #68	; 0x44
 80086de:	4620      	mov	r0, r4
 80086e0:	f001 fc68 	bl	8009fb4 <__gethex>
 80086e4:	f010 0507 	ands.w	r5, r0, #7
 80086e8:	4607      	mov	r7, r0
 80086ea:	d005      	beq.n	80086f8 <_strtod_l+0x88>
 80086ec:	2d06      	cmp	r5, #6
 80086ee:	d12b      	bne.n	8008748 <_strtod_l+0xd8>
 80086f0:	3601      	adds	r6, #1
 80086f2:	2300      	movs	r3, #0
 80086f4:	9611      	str	r6, [sp, #68]	; 0x44
 80086f6:	9308      	str	r3, [sp, #32]
 80086f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f040 854e 	bne.w	800919c <_strtod_l+0xb2c>
 8008700:	9b08      	ldr	r3, [sp, #32]
 8008702:	b1e3      	cbz	r3, 800873e <_strtod_l+0xce>
 8008704:	ec49 8b17 	vmov	d7, r8, r9
 8008708:	eeb1 0b47 	vneg.f64	d0, d7
 800870c:	b017      	add	sp, #92	; 0x5c
 800870e:	ecbd 8b0e 	vpop	{d8-d14}
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008716:	2b20      	cmp	r3, #32
 8008718:	d1cd      	bne.n	80086b6 <_strtod_l+0x46>
 800871a:	3201      	adds	r2, #1
 800871c:	9211      	str	r2, [sp, #68]	; 0x44
 800871e:	e7bf      	b.n	80086a0 <_strtod_l+0x30>
 8008720:	2b2d      	cmp	r3, #45	; 0x2d
 8008722:	d1c8      	bne.n	80086b6 <_strtod_l+0x46>
 8008724:	2301      	movs	r3, #1
 8008726:	9308      	str	r3, [sp, #32]
 8008728:	1c53      	adds	r3, r2, #1
 800872a:	9311      	str	r3, [sp, #68]	; 0x44
 800872c:	7853      	ldrb	r3, [r2, #1]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1c3      	bne.n	80086ba <_strtod_l+0x4a>
 8008732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008734:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008738:	2b00      	cmp	r3, #0
 800873a:	f040 852d 	bne.w	8009198 <_strtod_l+0xb28>
 800873e:	ec49 8b10 	vmov	d0, r8, r9
 8008742:	e7e3      	b.n	800870c <_strtod_l+0x9c>
 8008744:	2300      	movs	r3, #0
 8008746:	e7ee      	b.n	8008726 <_strtod_l+0xb6>
 8008748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800874a:	b13a      	cbz	r2, 800875c <_strtod_l+0xec>
 800874c:	2135      	movs	r1, #53	; 0x35
 800874e:	a814      	add	r0, sp, #80	; 0x50
 8008750:	f002 fbde 	bl	800af10 <__copybits>
 8008754:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008756:	4620      	mov	r0, r4
 8008758:	f001 ffa0 	bl	800a69c <_Bfree>
 800875c:	3d01      	subs	r5, #1
 800875e:	2d04      	cmp	r5, #4
 8008760:	d806      	bhi.n	8008770 <_strtod_l+0x100>
 8008762:	e8df f005 	tbb	[pc, r5]
 8008766:	030a      	.short	0x030a
 8008768:	1714      	.short	0x1714
 800876a:	0a          	.byte	0x0a
 800876b:	00          	.byte	0x00
 800876c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008770:	073f      	lsls	r7, r7, #28
 8008772:	d5c1      	bpl.n	80086f8 <_strtod_l+0x88>
 8008774:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008778:	e7be      	b.n	80086f8 <_strtod_l+0x88>
 800877a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800877e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008780:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008784:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008788:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800878c:	e7f0      	b.n	8008770 <_strtod_l+0x100>
 800878e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008910 <_strtod_l+0x2a0>
 8008792:	e7ed      	b.n	8008770 <_strtod_l+0x100>
 8008794:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008798:	f04f 38ff 	mov.w	r8, #4294967295
 800879c:	e7e8      	b.n	8008770 <_strtod_l+0x100>
 800879e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	9211      	str	r2, [sp, #68]	; 0x44
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b30      	cmp	r3, #48	; 0x30
 80087a8:	d0f9      	beq.n	800879e <_strtod_l+0x12e>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0a4      	beq.n	80086f8 <_strtod_l+0x88>
 80087ae:	2301      	movs	r3, #1
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b8:	930a      	str	r3, [sp, #40]	; 0x28
 80087ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80087be:	f8cd a018 	str.w	sl, [sp, #24]
 80087c2:	220a      	movs	r2, #10
 80087c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80087c6:	7807      	ldrb	r7, [r0, #0]
 80087c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80087cc:	b2d9      	uxtb	r1, r3
 80087ce:	2909      	cmp	r1, #9
 80087d0:	d92a      	bls.n	8008828 <_strtod_l+0x1b8>
 80087d2:	9907      	ldr	r1, [sp, #28]
 80087d4:	462a      	mov	r2, r5
 80087d6:	f002 fe4b 	bl	800b470 <strncmp>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d033      	beq.n	8008846 <_strtod_l+0x1d6>
 80087de:	2000      	movs	r0, #0
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	463a      	mov	r2, r7
 80087e4:	4601      	mov	r1, r0
 80087e6:	4607      	mov	r7, r0
 80087e8:	2a65      	cmp	r2, #101	; 0x65
 80087ea:	d001      	beq.n	80087f0 <_strtod_l+0x180>
 80087ec:	2a45      	cmp	r2, #69	; 0x45
 80087ee:	d117      	bne.n	8008820 <_strtod_l+0x1b0>
 80087f0:	b91b      	cbnz	r3, 80087fa <_strtod_l+0x18a>
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	4303      	orrs	r3, r0
 80087f6:	d09c      	beq.n	8008732 <_strtod_l+0xc2>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80087fe:	f10b 0201 	add.w	r2, fp, #1
 8008802:	9211      	str	r2, [sp, #68]	; 0x44
 8008804:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008808:	2a2b      	cmp	r2, #43	; 0x2b
 800880a:	d071      	beq.n	80088f0 <_strtod_l+0x280>
 800880c:	2a2d      	cmp	r2, #45	; 0x2d
 800880e:	d077      	beq.n	8008900 <_strtod_l+0x290>
 8008810:	f04f 0e00 	mov.w	lr, #0
 8008814:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008818:	2d09      	cmp	r5, #9
 800881a:	d97f      	bls.n	800891c <_strtod_l+0x2ac>
 800881c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008820:	2500      	movs	r5, #0
 8008822:	e09b      	b.n	800895c <_strtod_l+0x2ec>
 8008824:	2300      	movs	r3, #0
 8008826:	e7c3      	b.n	80087b0 <_strtod_l+0x140>
 8008828:	9906      	ldr	r1, [sp, #24]
 800882a:	2908      	cmp	r1, #8
 800882c:	bfdd      	ittte	le
 800882e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008830:	fb02 3301 	mlale	r3, r2, r1, r3
 8008834:	9309      	strle	r3, [sp, #36]	; 0x24
 8008836:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	3001      	adds	r0, #1
 800883e:	3301      	adds	r3, #1
 8008840:	9306      	str	r3, [sp, #24]
 8008842:	9011      	str	r0, [sp, #68]	; 0x44
 8008844:	e7be      	b.n	80087c4 <_strtod_l+0x154>
 8008846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008848:	195a      	adds	r2, r3, r5
 800884a:	9211      	str	r2, [sp, #68]	; 0x44
 800884c:	5d5a      	ldrb	r2, [r3, r5]
 800884e:	9b06      	ldr	r3, [sp, #24]
 8008850:	b3a3      	cbz	r3, 80088bc <_strtod_l+0x24c>
 8008852:	4607      	mov	r7, r0
 8008854:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008858:	2909      	cmp	r1, #9
 800885a:	d912      	bls.n	8008882 <_strtod_l+0x212>
 800885c:	2101      	movs	r1, #1
 800885e:	e7c3      	b.n	80087e8 <_strtod_l+0x178>
 8008860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	9211      	str	r2, [sp, #68]	; 0x44
 8008866:	785a      	ldrb	r2, [r3, #1]
 8008868:	3001      	adds	r0, #1
 800886a:	2a30      	cmp	r2, #48	; 0x30
 800886c:	d0f8      	beq.n	8008860 <_strtod_l+0x1f0>
 800886e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008872:	2b08      	cmp	r3, #8
 8008874:	f200 8497 	bhi.w	80091a6 <_strtod_l+0xb36>
 8008878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800887a:	930a      	str	r3, [sp, #40]	; 0x28
 800887c:	4607      	mov	r7, r0
 800887e:	2000      	movs	r0, #0
 8008880:	4603      	mov	r3, r0
 8008882:	3a30      	subs	r2, #48	; 0x30
 8008884:	f100 0101 	add.w	r1, r0, #1
 8008888:	d012      	beq.n	80088b0 <_strtod_l+0x240>
 800888a:	440f      	add	r7, r1
 800888c:	eb00 0c03 	add.w	ip, r0, r3
 8008890:	4619      	mov	r1, r3
 8008892:	250a      	movs	r5, #10
 8008894:	4561      	cmp	r1, ip
 8008896:	d113      	bne.n	80088c0 <_strtod_l+0x250>
 8008898:	1819      	adds	r1, r3, r0
 800889a:	2908      	cmp	r1, #8
 800889c:	f103 0301 	add.w	r3, r3, #1
 80088a0:	4403      	add	r3, r0
 80088a2:	dc1c      	bgt.n	80088de <_strtod_l+0x26e>
 80088a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088a6:	210a      	movs	r1, #10
 80088a8:	fb01 2200 	mla	r2, r1, r0, r2
 80088ac:	9209      	str	r2, [sp, #36]	; 0x24
 80088ae:	2100      	movs	r1, #0
 80088b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088b2:	1c50      	adds	r0, r2, #1
 80088b4:	9011      	str	r0, [sp, #68]	; 0x44
 80088b6:	7852      	ldrb	r2, [r2, #1]
 80088b8:	4608      	mov	r0, r1
 80088ba:	e7cb      	b.n	8008854 <_strtod_l+0x1e4>
 80088bc:	9806      	ldr	r0, [sp, #24]
 80088be:	e7d4      	b.n	800886a <_strtod_l+0x1fa>
 80088c0:	2908      	cmp	r1, #8
 80088c2:	dc04      	bgt.n	80088ce <_strtod_l+0x25e>
 80088c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80088c6:	436e      	muls	r6, r5
 80088c8:	9609      	str	r6, [sp, #36]	; 0x24
 80088ca:	3101      	adds	r1, #1
 80088cc:	e7e2      	b.n	8008894 <_strtod_l+0x224>
 80088ce:	f101 0e01 	add.w	lr, r1, #1
 80088d2:	f1be 0f10 	cmp.w	lr, #16
 80088d6:	bfd8      	it	le
 80088d8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80088dc:	e7f5      	b.n	80088ca <_strtod_l+0x25a>
 80088de:	2b10      	cmp	r3, #16
 80088e0:	bfdc      	itt	le
 80088e2:	210a      	movle	r1, #10
 80088e4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80088e8:	e7e1      	b.n	80088ae <_strtod_l+0x23e>
 80088ea:	2700      	movs	r7, #0
 80088ec:	2101      	movs	r1, #1
 80088ee:	e780      	b.n	80087f2 <_strtod_l+0x182>
 80088f0:	f04f 0e00 	mov.w	lr, #0
 80088f4:	f10b 0202 	add.w	r2, fp, #2
 80088f8:	9211      	str	r2, [sp, #68]	; 0x44
 80088fa:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80088fe:	e789      	b.n	8008814 <_strtod_l+0x1a4>
 8008900:	f04f 0e01 	mov.w	lr, #1
 8008904:	e7f6      	b.n	80088f4 <_strtod_l+0x284>
 8008906:	bf00      	nop
 8008908:	08031f38 	.word	0x08031f38
 800890c:	08031cf0 	.word	0x08031cf0
 8008910:	7ff00000 	.word	0x7ff00000
 8008914:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008916:	1c55      	adds	r5, r2, #1
 8008918:	9511      	str	r5, [sp, #68]	; 0x44
 800891a:	7852      	ldrb	r2, [r2, #1]
 800891c:	2a30      	cmp	r2, #48	; 0x30
 800891e:	d0f9      	beq.n	8008914 <_strtod_l+0x2a4>
 8008920:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008924:	2d08      	cmp	r5, #8
 8008926:	f63f af7b 	bhi.w	8008820 <_strtod_l+0x1b0>
 800892a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800892e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008930:	9207      	str	r2, [sp, #28]
 8008932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008934:	1c55      	adds	r5, r2, #1
 8008936:	9511      	str	r5, [sp, #68]	; 0x44
 8008938:	7852      	ldrb	r2, [r2, #1]
 800893a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800893e:	2e09      	cmp	r6, #9
 8008940:	d937      	bls.n	80089b2 <_strtod_l+0x342>
 8008942:	9e07      	ldr	r6, [sp, #28]
 8008944:	1bad      	subs	r5, r5, r6
 8008946:	2d08      	cmp	r5, #8
 8008948:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800894c:	dc02      	bgt.n	8008954 <_strtod_l+0x2e4>
 800894e:	4565      	cmp	r5, ip
 8008950:	bfa8      	it	ge
 8008952:	4665      	movge	r5, ip
 8008954:	f1be 0f00 	cmp.w	lr, #0
 8008958:	d000      	beq.n	800895c <_strtod_l+0x2ec>
 800895a:	426d      	negs	r5, r5
 800895c:	2b00      	cmp	r3, #0
 800895e:	d14d      	bne.n	80089fc <_strtod_l+0x38c>
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	4303      	orrs	r3, r0
 8008964:	f47f aec8 	bne.w	80086f8 <_strtod_l+0x88>
 8008968:	2900      	cmp	r1, #0
 800896a:	f47f aee2 	bne.w	8008732 <_strtod_l+0xc2>
 800896e:	2a69      	cmp	r2, #105	; 0x69
 8008970:	d027      	beq.n	80089c2 <_strtod_l+0x352>
 8008972:	dc24      	bgt.n	80089be <_strtod_l+0x34e>
 8008974:	2a49      	cmp	r2, #73	; 0x49
 8008976:	d024      	beq.n	80089c2 <_strtod_l+0x352>
 8008978:	2a4e      	cmp	r2, #78	; 0x4e
 800897a:	f47f aeda 	bne.w	8008732 <_strtod_l+0xc2>
 800897e:	4996      	ldr	r1, [pc, #600]	; (8008bd8 <_strtod_l+0x568>)
 8008980:	a811      	add	r0, sp, #68	; 0x44
 8008982:	f001 fd6f 	bl	800a464 <__match>
 8008986:	2800      	cmp	r0, #0
 8008988:	f43f aed3 	beq.w	8008732 <_strtod_l+0xc2>
 800898c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b28      	cmp	r3, #40	; 0x28
 8008992:	d12d      	bne.n	80089f0 <_strtod_l+0x380>
 8008994:	4991      	ldr	r1, [pc, #580]	; (8008bdc <_strtod_l+0x56c>)
 8008996:	aa14      	add	r2, sp, #80	; 0x50
 8008998:	a811      	add	r0, sp, #68	; 0x44
 800899a:	f001 fd77 	bl	800a48c <__hexnan>
 800899e:	2805      	cmp	r0, #5
 80089a0:	d126      	bne.n	80089f0 <_strtod_l+0x380>
 80089a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089a4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80089a8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80089ac:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80089b0:	e6a2      	b.n	80086f8 <_strtod_l+0x88>
 80089b2:	250a      	movs	r5, #10
 80089b4:	fb05 250c 	mla	r5, r5, ip, r2
 80089b8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80089bc:	e7b9      	b.n	8008932 <_strtod_l+0x2c2>
 80089be:	2a6e      	cmp	r2, #110	; 0x6e
 80089c0:	e7db      	b.n	800897a <_strtod_l+0x30a>
 80089c2:	4987      	ldr	r1, [pc, #540]	; (8008be0 <_strtod_l+0x570>)
 80089c4:	a811      	add	r0, sp, #68	; 0x44
 80089c6:	f001 fd4d 	bl	800a464 <__match>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f43f aeb1 	beq.w	8008732 <_strtod_l+0xc2>
 80089d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089d2:	4984      	ldr	r1, [pc, #528]	; (8008be4 <_strtod_l+0x574>)
 80089d4:	3b01      	subs	r3, #1
 80089d6:	a811      	add	r0, sp, #68	; 0x44
 80089d8:	9311      	str	r3, [sp, #68]	; 0x44
 80089da:	f001 fd43 	bl	800a464 <__match>
 80089de:	b910      	cbnz	r0, 80089e6 <_strtod_l+0x376>
 80089e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089e2:	3301      	adds	r3, #1
 80089e4:	9311      	str	r3, [sp, #68]	; 0x44
 80089e6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008bf8 <_strtod_l+0x588>
 80089ea:	f04f 0800 	mov.w	r8, #0
 80089ee:	e683      	b.n	80086f8 <_strtod_l+0x88>
 80089f0:	487d      	ldr	r0, [pc, #500]	; (8008be8 <_strtod_l+0x578>)
 80089f2:	f002 fd25 	bl	800b440 <nan>
 80089f6:	ec59 8b10 	vmov	r8, r9, d0
 80089fa:	e67d      	b.n	80086f8 <_strtod_l+0x88>
 80089fc:	1bea      	subs	r2, r5, r7
 80089fe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008a02:	9207      	str	r2, [sp, #28]
 8008a04:	9a06      	ldr	r2, [sp, #24]
 8008a06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	bf08      	it	eq
 8008a0e:	461a      	moveq	r2, r3
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	9206      	str	r2, [sp, #24]
 8008a14:	461a      	mov	r2, r3
 8008a16:	bfa8      	it	ge
 8008a18:	2210      	movge	r2, #16
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	ec59 8b17 	vmov	r8, r9, d7
 8008a20:	dd0c      	ble.n	8008a3c <_strtod_l+0x3cc>
 8008a22:	4972      	ldr	r1, [pc, #456]	; (8008bec <_strtod_l+0x57c>)
 8008a24:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008a28:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008a2c:	ee06 aa90 	vmov	s13, sl
 8008a30:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008a34:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008a38:	ec59 8b16 	vmov	r8, r9, d6
 8008a3c:	2b0f      	cmp	r3, #15
 8008a3e:	dc36      	bgt.n	8008aae <_strtod_l+0x43e>
 8008a40:	9907      	ldr	r1, [sp, #28]
 8008a42:	2900      	cmp	r1, #0
 8008a44:	f43f ae58 	beq.w	80086f8 <_strtod_l+0x88>
 8008a48:	dd23      	ble.n	8008a92 <_strtod_l+0x422>
 8008a4a:	2916      	cmp	r1, #22
 8008a4c:	dc0b      	bgt.n	8008a66 <_strtod_l+0x3f6>
 8008a4e:	4b67      	ldr	r3, [pc, #412]	; (8008bec <_strtod_l+0x57c>)
 8008a50:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008a54:	ed93 7b00 	vldr	d7, [r3]
 8008a58:	ec49 8b16 	vmov	d6, r8, r9
 8008a5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a60:	ec59 8b17 	vmov	r8, r9, d7
 8008a64:	e648      	b.n	80086f8 <_strtod_l+0x88>
 8008a66:	9807      	ldr	r0, [sp, #28]
 8008a68:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008a6c:	4281      	cmp	r1, r0
 8008a6e:	db1e      	blt.n	8008aae <_strtod_l+0x43e>
 8008a70:	4a5e      	ldr	r2, [pc, #376]	; (8008bec <_strtod_l+0x57c>)
 8008a72:	f1c3 030f 	rsb	r3, r3, #15
 8008a76:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008a7a:	ed91 7b00 	vldr	d7, [r1]
 8008a7e:	ec49 8b16 	vmov	d6, r8, r9
 8008a82:	1ac3      	subs	r3, r0, r3
 8008a84:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a8c:	ed92 6b00 	vldr	d6, [r2]
 8008a90:	e7e4      	b.n	8008a5c <_strtod_l+0x3ec>
 8008a92:	9907      	ldr	r1, [sp, #28]
 8008a94:	3116      	adds	r1, #22
 8008a96:	db0a      	blt.n	8008aae <_strtod_l+0x43e>
 8008a98:	4b54      	ldr	r3, [pc, #336]	; (8008bec <_strtod_l+0x57c>)
 8008a9a:	1b7d      	subs	r5, r7, r5
 8008a9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008aa0:	ed95 7b00 	vldr	d7, [r5]
 8008aa4:	ec49 8b16 	vmov	d6, r8, r9
 8008aa8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008aac:	e7d8      	b.n	8008a60 <_strtod_l+0x3f0>
 8008aae:	9907      	ldr	r1, [sp, #28]
 8008ab0:	1a9a      	subs	r2, r3, r2
 8008ab2:	440a      	add	r2, r1
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	dd6f      	ble.n	8008b98 <_strtod_l+0x528>
 8008ab8:	f012 000f 	ands.w	r0, r2, #15
 8008abc:	d00a      	beq.n	8008ad4 <_strtod_l+0x464>
 8008abe:	494b      	ldr	r1, [pc, #300]	; (8008bec <_strtod_l+0x57c>)
 8008ac0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008ac4:	ed91 7b00 	vldr	d7, [r1]
 8008ac8:	ec49 8b16 	vmov	d6, r8, r9
 8008acc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ad0:	ec59 8b17 	vmov	r8, r9, d7
 8008ad4:	f032 020f 	bics.w	r2, r2, #15
 8008ad8:	d04f      	beq.n	8008b7a <_strtod_l+0x50a>
 8008ada:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008ade:	dd22      	ble.n	8008b26 <_strtod_l+0x4b6>
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	462e      	mov	r6, r5
 8008ae4:	9506      	str	r5, [sp, #24]
 8008ae6:	462f      	mov	r7, r5
 8008ae8:	2322      	movs	r3, #34	; 0x22
 8008aea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008bf8 <_strtod_l+0x588>
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	f04f 0800 	mov.w	r8, #0
 8008af4:	9b06      	ldr	r3, [sp, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f43f adfe 	beq.w	80086f8 <_strtod_l+0x88>
 8008afc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008afe:	4620      	mov	r0, r4
 8008b00:	f001 fdcc 	bl	800a69c <_Bfree>
 8008b04:	4639      	mov	r1, r7
 8008b06:	4620      	mov	r0, r4
 8008b08:	f001 fdc8 	bl	800a69c <_Bfree>
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f001 fdc4 	bl	800a69c <_Bfree>
 8008b14:	9906      	ldr	r1, [sp, #24]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f001 fdc0 	bl	800a69c <_Bfree>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f001 fdbc 	bl	800a69c <_Bfree>
 8008b24:	e5e8      	b.n	80086f8 <_strtod_l+0x88>
 8008b26:	2000      	movs	r0, #0
 8008b28:	ec49 8b17 	vmov	d7, r8, r9
 8008b2c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008bf0 <_strtod_l+0x580>
 8008b30:	1112      	asrs	r2, r2, #4
 8008b32:	4601      	mov	r1, r0
 8008b34:	2a01      	cmp	r2, #1
 8008b36:	dc23      	bgt.n	8008b80 <_strtod_l+0x510>
 8008b38:	b108      	cbz	r0, 8008b3e <_strtod_l+0x4ce>
 8008b3a:	ec59 8b17 	vmov	r8, r9, d7
 8008b3e:	4a2c      	ldr	r2, [pc, #176]	; (8008bf0 <_strtod_l+0x580>)
 8008b40:	482c      	ldr	r0, [pc, #176]	; (8008bf4 <_strtod_l+0x584>)
 8008b42:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008b46:	ed92 7b00 	vldr	d7, [r2]
 8008b4a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008b4e:	ec49 8b16 	vmov	d6, r8, r9
 8008b52:	4a29      	ldr	r2, [pc, #164]	; (8008bf8 <_strtod_l+0x588>)
 8008b54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b58:	ee17 1a90 	vmov	r1, s15
 8008b5c:	400a      	ands	r2, r1
 8008b5e:	4282      	cmp	r2, r0
 8008b60:	ec59 8b17 	vmov	r8, r9, d7
 8008b64:	d8bc      	bhi.n	8008ae0 <_strtod_l+0x470>
 8008b66:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008b6a:	4282      	cmp	r2, r0
 8008b6c:	bf86      	itte	hi
 8008b6e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008bfc <_strtod_l+0x58c>
 8008b72:	f04f 38ff 	movhi.w	r8, #4294967295
 8008b76:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	9204      	str	r2, [sp, #16]
 8008b7e:	e078      	b.n	8008c72 <_strtod_l+0x602>
 8008b80:	07d6      	lsls	r6, r2, #31
 8008b82:	d504      	bpl.n	8008b8e <_strtod_l+0x51e>
 8008b84:	ed9c 6b00 	vldr	d6, [ip]
 8008b88:	2001      	movs	r0, #1
 8008b8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b8e:	3101      	adds	r1, #1
 8008b90:	1052      	asrs	r2, r2, #1
 8008b92:	f10c 0c08 	add.w	ip, ip, #8
 8008b96:	e7cd      	b.n	8008b34 <_strtod_l+0x4c4>
 8008b98:	d0ef      	beq.n	8008b7a <_strtod_l+0x50a>
 8008b9a:	4252      	negs	r2, r2
 8008b9c:	f012 000f 	ands.w	r0, r2, #15
 8008ba0:	d00a      	beq.n	8008bb8 <_strtod_l+0x548>
 8008ba2:	4912      	ldr	r1, [pc, #72]	; (8008bec <_strtod_l+0x57c>)
 8008ba4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008ba8:	ed91 7b00 	vldr	d7, [r1]
 8008bac:	ec49 8b16 	vmov	d6, r8, r9
 8008bb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008bb4:	ec59 8b17 	vmov	r8, r9, d7
 8008bb8:	1112      	asrs	r2, r2, #4
 8008bba:	d0de      	beq.n	8008b7a <_strtod_l+0x50a>
 8008bbc:	2a1f      	cmp	r2, #31
 8008bbe:	dd1f      	ble.n	8008c00 <_strtod_l+0x590>
 8008bc0:	2500      	movs	r5, #0
 8008bc2:	462e      	mov	r6, r5
 8008bc4:	9506      	str	r5, [sp, #24]
 8008bc6:	462f      	mov	r7, r5
 8008bc8:	2322      	movs	r3, #34	; 0x22
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	f04f 0900 	mov.w	r9, #0
 8008bd2:	6023      	str	r3, [r4, #0]
 8008bd4:	e78e      	b.n	8008af4 <_strtod_l+0x484>
 8008bd6:	bf00      	nop
 8008bd8:	08031cc1 	.word	0x08031cc1
 8008bdc:	08031d04 	.word	0x08031d04
 8008be0:	08031cb9 	.word	0x08031cb9
 8008be4:	08031e44 	.word	0x08031e44
 8008be8:	080320f0 	.word	0x080320f0
 8008bec:	08031fd0 	.word	0x08031fd0
 8008bf0:	08031fa8 	.word	0x08031fa8
 8008bf4:	7ca00000 	.word	0x7ca00000
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	7fefffff 	.word	0x7fefffff
 8008c00:	f012 0110 	ands.w	r1, r2, #16
 8008c04:	bf18      	it	ne
 8008c06:	216a      	movne	r1, #106	; 0x6a
 8008c08:	9104      	str	r1, [sp, #16]
 8008c0a:	ec49 8b17 	vmov	d7, r8, r9
 8008c0e:	49be      	ldr	r1, [pc, #760]	; (8008f08 <_strtod_l+0x898>)
 8008c10:	2000      	movs	r0, #0
 8008c12:	07d6      	lsls	r6, r2, #31
 8008c14:	d504      	bpl.n	8008c20 <_strtod_l+0x5b0>
 8008c16:	ed91 6b00 	vldr	d6, [r1]
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c20:	1052      	asrs	r2, r2, #1
 8008c22:	f101 0108 	add.w	r1, r1, #8
 8008c26:	d1f4      	bne.n	8008c12 <_strtod_l+0x5a2>
 8008c28:	b108      	cbz	r0, 8008c2e <_strtod_l+0x5be>
 8008c2a:	ec59 8b17 	vmov	r8, r9, d7
 8008c2e:	9a04      	ldr	r2, [sp, #16]
 8008c30:	b1c2      	cbz	r2, 8008c64 <_strtod_l+0x5f4>
 8008c32:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008c36:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	4648      	mov	r0, r9
 8008c3e:	dd11      	ble.n	8008c64 <_strtod_l+0x5f4>
 8008c40:	2a1f      	cmp	r2, #31
 8008c42:	f340 812e 	ble.w	8008ea2 <_strtod_l+0x832>
 8008c46:	2a34      	cmp	r2, #52	; 0x34
 8008c48:	bfde      	ittt	le
 8008c4a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008c4e:	f04f 32ff 	movle.w	r2, #4294967295
 8008c52:	fa02 f101 	lslle.w	r1, r2, r1
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	bfcc      	ite	gt
 8008c5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008c60:	ea01 0900 	andle.w	r9, r1, r0
 8008c64:	ec49 8b17 	vmov	d7, r8, r9
 8008c68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c70:	d0a6      	beq.n	8008bc0 <_strtod_l+0x550>
 8008c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c74:	9200      	str	r2, [sp, #0]
 8008c76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f001 fd76 	bl	800a76c <__s2b>
 8008c80:	9006      	str	r0, [sp, #24]
 8008c82:	2800      	cmp	r0, #0
 8008c84:	f43f af2c 	beq.w	8008ae0 <_strtod_l+0x470>
 8008c88:	9b07      	ldr	r3, [sp, #28]
 8008c8a:	1b7d      	subs	r5, r7, r5
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfb4      	ite	lt
 8008c90:	462b      	movlt	r3, r5
 8008c92:	2300      	movge	r3, #0
 8008c94:	9309      	str	r3, [sp, #36]	; 0x24
 8008c96:	9b07      	ldr	r3, [sp, #28]
 8008c98:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008ee8 <_strtod_l+0x878>
 8008c9c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008ef0 <_strtod_l+0x880>
 8008ca0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008ef8 <_strtod_l+0x888>
 8008ca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ca8:	2500      	movs	r5, #0
 8008caa:	930c      	str	r3, [sp, #48]	; 0x30
 8008cac:	462e      	mov	r6, r5
 8008cae:	9b06      	ldr	r3, [sp, #24]
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	6859      	ldr	r1, [r3, #4]
 8008cb4:	f001 fcb2 	bl	800a61c <_Balloc>
 8008cb8:	4607      	mov	r7, r0
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f43f af14 	beq.w	8008ae8 <_strtod_l+0x478>
 8008cc0:	9b06      	ldr	r3, [sp, #24]
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	3202      	adds	r2, #2
 8008cc6:	f103 010c 	add.w	r1, r3, #12
 8008cca:	0092      	lsls	r2, r2, #2
 8008ccc:	300c      	adds	r0, #12
 8008cce:	f001 fc97 	bl	800a600 <memcpy>
 8008cd2:	ec49 8b10 	vmov	d0, r8, r9
 8008cd6:	aa14      	add	r2, sp, #80	; 0x50
 8008cd8:	a913      	add	r1, sp, #76	; 0x4c
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f002 f88c 	bl	800adf8 <__d2b>
 8008ce0:	ec49 8b18 	vmov	d8, r8, r9
 8008ce4:	9012      	str	r0, [sp, #72]	; 0x48
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	f43f aefe 	beq.w	8008ae8 <_strtod_l+0x478>
 8008cec:	2101      	movs	r1, #1
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f001 fdd6 	bl	800a8a0 <__i2b>
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f43f aef6 	beq.w	8008ae8 <_strtod_l+0x478>
 8008cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cfe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bfab      	itete	ge
 8008d04:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008d06:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008d08:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008d0c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008d10:	bfac      	ite	ge
 8008d12:	eb03 0b02 	addge.w	fp, r3, r2
 8008d16:	eba2 0a03 	sublt.w	sl, r2, r3
 8008d1a:	9a04      	ldr	r2, [sp, #16]
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	440b      	add	r3, r1
 8008d20:	4a7a      	ldr	r2, [pc, #488]	; (8008f0c <_strtod_l+0x89c>)
 8008d22:	3b01      	subs	r3, #1
 8008d24:	4293      	cmp	r3, r2
 8008d26:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008d2a:	f280 80cd 	bge.w	8008ec8 <_strtod_l+0x858>
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2a1f      	cmp	r2, #31
 8008d32:	eba1 0102 	sub.w	r1, r1, r2
 8008d36:	f04f 0001 	mov.w	r0, #1
 8008d3a:	f300 80b9 	bgt.w	8008eb0 <_strtod_l+0x840>
 8008d3e:	fa00 f302 	lsl.w	r3, r0, r2
 8008d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d44:	2300      	movs	r3, #0
 8008d46:	930a      	str	r3, [sp, #40]	; 0x28
 8008d48:	eb0b 0301 	add.w	r3, fp, r1
 8008d4c:	9a04      	ldr	r2, [sp, #16]
 8008d4e:	459b      	cmp	fp, r3
 8008d50:	448a      	add	sl, r1
 8008d52:	4492      	add	sl, r2
 8008d54:	465a      	mov	r2, fp
 8008d56:	bfa8      	it	ge
 8008d58:	461a      	movge	r2, r3
 8008d5a:	4552      	cmp	r2, sl
 8008d5c:	bfa8      	it	ge
 8008d5e:	4652      	movge	r2, sl
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	bfc2      	ittt	gt
 8008d64:	1a9b      	subgt	r3, r3, r2
 8008d66:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008d6a:	ebab 0b02 	subgt.w	fp, fp, r2
 8008d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d70:	2a00      	cmp	r2, #0
 8008d72:	dd18      	ble.n	8008da6 <_strtod_l+0x736>
 8008d74:	4631      	mov	r1, r6
 8008d76:	4620      	mov	r0, r4
 8008d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d7a:	f001 fe51 	bl	800aa20 <__pow5mult>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f43f aeb1 	beq.w	8008ae8 <_strtod_l+0x478>
 8008d86:	4601      	mov	r1, r0
 8008d88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f001 fd9e 	bl	800a8cc <__multiply>
 8008d90:	900e      	str	r0, [sp, #56]	; 0x38
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f43f aea8 	beq.w	8008ae8 <_strtod_l+0x478>
 8008d98:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 fc7e 	bl	800a69c <_Bfree>
 8008da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008da4:	9212      	str	r2, [sp, #72]	; 0x48
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f300 8093 	bgt.w	8008ed2 <_strtod_l+0x862>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dd08      	ble.n	8008dc4 <_strtod_l+0x754>
 8008db2:	4639      	mov	r1, r7
 8008db4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 fe32 	bl	800aa20 <__pow5mult>
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f ae92 	beq.w	8008ae8 <_strtod_l+0x478>
 8008dc4:	f1ba 0f00 	cmp.w	sl, #0
 8008dc8:	dd08      	ble.n	8008ddc <_strtod_l+0x76c>
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4652      	mov	r2, sl
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f001 fe80 	bl	800aad4 <__lshift>
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f ae86 	beq.w	8008ae8 <_strtod_l+0x478>
 8008ddc:	f1bb 0f00 	cmp.w	fp, #0
 8008de0:	dd08      	ble.n	8008df4 <_strtod_l+0x784>
 8008de2:	4631      	mov	r1, r6
 8008de4:	465a      	mov	r2, fp
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 fe74 	bl	800aad4 <__lshift>
 8008dec:	4606      	mov	r6, r0
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f43f ae7a 	beq.w	8008ae8 <_strtod_l+0x478>
 8008df4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008df6:	463a      	mov	r2, r7
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f001 fef7 	bl	800abec <__mdiff>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	2800      	cmp	r0, #0
 8008e02:	f43f ae71 	beq.w	8008ae8 <_strtod_l+0x478>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008e0c:	60c3      	str	r3, [r0, #12]
 8008e0e:	4631      	mov	r1, r6
 8008e10:	f001 fed0 	bl	800abb4 <__mcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	da7d      	bge.n	8008f14 <_strtod_l+0x8a4>
 8008e18:	ea5a 0308 	orrs.w	r3, sl, r8
 8008e1c:	f040 80a3 	bne.w	8008f66 <_strtod_l+0x8f6>
 8008e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 809e 	bne.w	8008f66 <_strtod_l+0x8f6>
 8008e2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e2e:	0d1b      	lsrs	r3, r3, #20
 8008e30:	051b      	lsls	r3, r3, #20
 8008e32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008e36:	f240 8096 	bls.w	8008f66 <_strtod_l+0x8f6>
 8008e3a:	696b      	ldr	r3, [r5, #20]
 8008e3c:	b91b      	cbnz	r3, 8008e46 <_strtod_l+0x7d6>
 8008e3e:	692b      	ldr	r3, [r5, #16]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f340 8090 	ble.w	8008f66 <_strtod_l+0x8f6>
 8008e46:	4629      	mov	r1, r5
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f001 fe42 	bl	800aad4 <__lshift>
 8008e50:	4631      	mov	r1, r6
 8008e52:	4605      	mov	r5, r0
 8008e54:	f001 feae 	bl	800abb4 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f340 8084 	ble.w	8008f66 <_strtod_l+0x8f6>
 8008e5e:	9904      	ldr	r1, [sp, #16]
 8008e60:	4a2b      	ldr	r2, [pc, #172]	; (8008f10 <_strtod_l+0x8a0>)
 8008e62:	464b      	mov	r3, r9
 8008e64:	2900      	cmp	r1, #0
 8008e66:	f000 809d 	beq.w	8008fa4 <_strtod_l+0x934>
 8008e6a:	ea02 0109 	and.w	r1, r2, r9
 8008e6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e72:	f300 8097 	bgt.w	8008fa4 <_strtod_l+0x934>
 8008e76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e7a:	f77f aea5 	ble.w	8008bc8 <_strtod_l+0x558>
 8008e7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008f00 <_strtod_l+0x890>
 8008e82:	ec49 8b16 	vmov	d6, r8, r9
 8008e86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008e8a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e8e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	bf08      	it	eq
 8008e96:	2322      	moveq	r3, #34	; 0x22
 8008e98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e9c:	bf08      	it	eq
 8008e9e:	6023      	streq	r3, [r4, #0]
 8008ea0:	e62c      	b.n	8008afc <_strtod_l+0x48c>
 8008ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8008eaa:	ea02 0808 	and.w	r8, r2, r8
 8008eae:	e6d9      	b.n	8008c64 <_strtod_l+0x5f4>
 8008eb0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008eb4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008eb8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008ebc:	33e2      	adds	r3, #226	; 0xe2
 8008ebe:	fa00 f303 	lsl.w	r3, r0, r3
 8008ec2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008ec6:	e73f      	b.n	8008d48 <_strtod_l+0x6d8>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ed0:	e73a      	b.n	8008d48 <_strtod_l+0x6d8>
 8008ed2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f001 fdfc 	bl	800aad4 <__lshift>
 8008edc:	9012      	str	r0, [sp, #72]	; 0x48
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f47f af64 	bne.w	8008dac <_strtod_l+0x73c>
 8008ee4:	e600      	b.n	8008ae8 <_strtod_l+0x478>
 8008ee6:	bf00      	nop
 8008ee8:	94a03595 	.word	0x94a03595
 8008eec:	3fcfffff 	.word	0x3fcfffff
 8008ef0:	94a03595 	.word	0x94a03595
 8008ef4:	3fdfffff 	.word	0x3fdfffff
 8008ef8:	35afe535 	.word	0x35afe535
 8008efc:	3fe00000 	.word	0x3fe00000
 8008f00:	00000000 	.word	0x00000000
 8008f04:	39500000 	.word	0x39500000
 8008f08:	08031d18 	.word	0x08031d18
 8008f0c:	fffffc02 	.word	0xfffffc02
 8008f10:	7ff00000 	.word	0x7ff00000
 8008f14:	46cb      	mov	fp, r9
 8008f16:	d15f      	bne.n	8008fd8 <_strtod_l+0x968>
 8008f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f1c:	f1ba 0f00 	cmp.w	sl, #0
 8008f20:	d02a      	beq.n	8008f78 <_strtod_l+0x908>
 8008f22:	4aa7      	ldr	r2, [pc, #668]	; (80091c0 <_strtod_l+0xb50>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d12b      	bne.n	8008f80 <_strtod_l+0x910>
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	4642      	mov	r2, r8
 8008f2c:	b1fb      	cbz	r3, 8008f6e <_strtod_l+0x8fe>
 8008f2e:	4ba5      	ldr	r3, [pc, #660]	; (80091c4 <_strtod_l+0xb54>)
 8008f30:	ea09 0303 	and.w	r3, r9, r3
 8008f34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f38:	f04f 31ff 	mov.w	r1, #4294967295
 8008f3c:	d81a      	bhi.n	8008f74 <_strtod_l+0x904>
 8008f3e:	0d1b      	lsrs	r3, r3, #20
 8008f40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f44:	fa01 f303 	lsl.w	r3, r1, r3
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d119      	bne.n	8008f80 <_strtod_l+0x910>
 8008f4c:	4b9e      	ldr	r3, [pc, #632]	; (80091c8 <_strtod_l+0xb58>)
 8008f4e:	459b      	cmp	fp, r3
 8008f50:	d102      	bne.n	8008f58 <_strtod_l+0x8e8>
 8008f52:	3201      	adds	r2, #1
 8008f54:	f43f adc8 	beq.w	8008ae8 <_strtod_l+0x478>
 8008f58:	4b9a      	ldr	r3, [pc, #616]	; (80091c4 <_strtod_l+0xb54>)
 8008f5a:	ea0b 0303 	and.w	r3, fp, r3
 8008f5e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	9b04      	ldr	r3, [sp, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d188      	bne.n	8008e7e <_strtod_l+0x80e>
 8008f6c:	e5c6      	b.n	8008afc <_strtod_l+0x48c>
 8008f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f72:	e7e9      	b.n	8008f48 <_strtod_l+0x8d8>
 8008f74:	460b      	mov	r3, r1
 8008f76:	e7e7      	b.n	8008f48 <_strtod_l+0x8d8>
 8008f78:	ea53 0308 	orrs.w	r3, r3, r8
 8008f7c:	f43f af6f 	beq.w	8008e5e <_strtod_l+0x7ee>
 8008f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f82:	b1cb      	cbz	r3, 8008fb8 <_strtod_l+0x948>
 8008f84:	ea13 0f0b 	tst.w	r3, fp
 8008f88:	d0ed      	beq.n	8008f66 <_strtod_l+0x8f6>
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	4649      	mov	r1, r9
 8008f90:	f1ba 0f00 	cmp.w	sl, #0
 8008f94:	d014      	beq.n	8008fc0 <_strtod_l+0x950>
 8008f96:	f7ff fb51 	bl	800863c <sulp>
 8008f9a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008f9e:	ec59 8b17 	vmov	r8, r9, d7
 8008fa2:	e7e0      	b.n	8008f66 <_strtod_l+0x8f6>
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008faa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008fae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008fb2:	f04f 38ff 	mov.w	r8, #4294967295
 8008fb6:	e7d6      	b.n	8008f66 <_strtod_l+0x8f6>
 8008fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fba:	ea13 0f08 	tst.w	r3, r8
 8008fbe:	e7e3      	b.n	8008f88 <_strtod_l+0x918>
 8008fc0:	f7ff fb3c 	bl	800863c <sulp>
 8008fc4:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008fc8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	ec59 8b10 	vmov	r8, r9, d0
 8008fd4:	d1c7      	bne.n	8008f66 <_strtod_l+0x8f6>
 8008fd6:	e5f7      	b.n	8008bc8 <_strtod_l+0x558>
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f001 ff68 	bl	800aeb0 <__ratio>
 8008fe0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008fe4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	d865      	bhi.n	80090ba <_strtod_l+0xa4a>
 8008fee:	f1ba 0f00 	cmp.w	sl, #0
 8008ff2:	d042      	beq.n	800907a <_strtod_l+0xa0a>
 8008ff4:	4b75      	ldr	r3, [pc, #468]	; (80091cc <_strtod_l+0xb5c>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008ffc:	4871      	ldr	r0, [pc, #452]	; (80091c4 <_strtod_l+0xb54>)
 8008ffe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80091d8 <_strtod_l+0xb68>
 8009002:	ea0b 0100 	and.w	r1, fp, r0
 8009006:	4561      	cmp	r1, ip
 8009008:	f040 808e 	bne.w	8009128 <_strtod_l+0xab8>
 800900c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009010:	ec49 8b10 	vmov	d0, r8, r9
 8009014:	ec43 2b1c 	vmov	d12, r2, r3
 8009018:	910a      	str	r1, [sp, #40]	; 0x28
 800901a:	f001 fe71 	bl	800ad00 <__ulp>
 800901e:	ec49 8b1e 	vmov	d14, r8, r9
 8009022:	4868      	ldr	r0, [pc, #416]	; (80091c4 <_strtod_l+0xb54>)
 8009024:	eeac eb00 	vfma.f64	d14, d12, d0
 8009028:	ee1e 3a90 	vmov	r3, s29
 800902c:	4a68      	ldr	r2, [pc, #416]	; (80091d0 <_strtod_l+0xb60>)
 800902e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009030:	4018      	ands	r0, r3
 8009032:	4290      	cmp	r0, r2
 8009034:	ec59 8b1e 	vmov	r8, r9, d14
 8009038:	d94e      	bls.n	80090d8 <_strtod_l+0xa68>
 800903a:	ee18 3a90 	vmov	r3, s17
 800903e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009042:	4293      	cmp	r3, r2
 8009044:	d104      	bne.n	8009050 <_strtod_l+0x9e0>
 8009046:	ee18 3a10 	vmov	r3, s16
 800904a:	3301      	adds	r3, #1
 800904c:	f43f ad4c 	beq.w	8008ae8 <_strtod_l+0x478>
 8009050:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80091c8 <_strtod_l+0xb58>
 8009054:	f04f 38ff 	mov.w	r8, #4294967295
 8009058:	9912      	ldr	r1, [sp, #72]	; 0x48
 800905a:	4620      	mov	r0, r4
 800905c:	f001 fb1e 	bl	800a69c <_Bfree>
 8009060:	4639      	mov	r1, r7
 8009062:	4620      	mov	r0, r4
 8009064:	f001 fb1a 	bl	800a69c <_Bfree>
 8009068:	4631      	mov	r1, r6
 800906a:	4620      	mov	r0, r4
 800906c:	f001 fb16 	bl	800a69c <_Bfree>
 8009070:	4629      	mov	r1, r5
 8009072:	4620      	mov	r0, r4
 8009074:	f001 fb12 	bl	800a69c <_Bfree>
 8009078:	e619      	b.n	8008cae <_strtod_l+0x63e>
 800907a:	f1b8 0f00 	cmp.w	r8, #0
 800907e:	d112      	bne.n	80090a6 <_strtod_l+0xa36>
 8009080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009084:	b9b3      	cbnz	r3, 80090b4 <_strtod_l+0xa44>
 8009086:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800908a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800908e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009092:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009096:	bf58      	it	pl
 8009098:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800909c:	eeb1 7b4d 	vneg.f64	d7, d13
 80090a0:	ec53 2b17 	vmov	r2, r3, d7
 80090a4:	e7aa      	b.n	8008ffc <_strtod_l+0x98c>
 80090a6:	f1b8 0f01 	cmp.w	r8, #1
 80090aa:	d103      	bne.n	80090b4 <_strtod_l+0xa44>
 80090ac:	f1b9 0f00 	cmp.w	r9, #0
 80090b0:	f43f ad8a 	beq.w	8008bc8 <_strtod_l+0x558>
 80090b4:	4b47      	ldr	r3, [pc, #284]	; (80091d4 <_strtod_l+0xb64>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	e79e      	b.n	8008ff8 <_strtod_l+0x988>
 80090ba:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80090be:	ee20 db0d 	vmul.f64	d13, d0, d13
 80090c2:	f1ba 0f00 	cmp.w	sl, #0
 80090c6:	d104      	bne.n	80090d2 <_strtod_l+0xa62>
 80090c8:	eeb1 7b4d 	vneg.f64	d7, d13
 80090cc:	ec53 2b17 	vmov	r2, r3, d7
 80090d0:	e794      	b.n	8008ffc <_strtod_l+0x98c>
 80090d2:	eeb0 7b4d 	vmov.f64	d7, d13
 80090d6:	e7f9      	b.n	80090cc <_strtod_l+0xa5c>
 80090d8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1ba      	bne.n	8009058 <_strtod_l+0x9e8>
 80090e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090e6:	0d1b      	lsrs	r3, r3, #20
 80090e8:	051b      	lsls	r3, r3, #20
 80090ea:	4299      	cmp	r1, r3
 80090ec:	d1b4      	bne.n	8009058 <_strtod_l+0x9e8>
 80090ee:	ec51 0b1d 	vmov	r0, r1, d13
 80090f2:	f7f7 fad1 	bl	8000698 <__aeabi_d2lz>
 80090f6:	f7f7 fa89 	bl	800060c <__aeabi_l2d>
 80090fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090fe:	ec41 0b17 	vmov	d7, r0, r1
 8009102:	ea43 0308 	orr.w	r3, r3, r8
 8009106:	ea53 030a 	orrs.w	r3, r3, sl
 800910a:	ee3d db47 	vsub.f64	d13, d13, d7
 800910e:	d03c      	beq.n	800918a <_strtod_l+0xb1a>
 8009110:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009118:	f53f acf0 	bmi.w	8008afc <_strtod_l+0x48c>
 800911c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009124:	dd98      	ble.n	8009058 <_strtod_l+0x9e8>
 8009126:	e4e9      	b.n	8008afc <_strtod_l+0x48c>
 8009128:	9804      	ldr	r0, [sp, #16]
 800912a:	b1f0      	cbz	r0, 800916a <_strtod_l+0xafa>
 800912c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009130:	d81b      	bhi.n	800916a <_strtod_l+0xafa>
 8009132:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80091b8 <_strtod_l+0xb48>
 8009136:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913e:	d811      	bhi.n	8009164 <_strtod_l+0xaf4>
 8009140:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009144:	ee1d 3a10 	vmov	r3, s26
 8009148:	2b01      	cmp	r3, #1
 800914a:	bf38      	it	cc
 800914c:	2301      	movcc	r3, #1
 800914e:	ee0d 3a10 	vmov	s26, r3
 8009152:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009156:	f1ba 0f00 	cmp.w	sl, #0
 800915a:	d113      	bne.n	8009184 <_strtod_l+0xb14>
 800915c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009160:	ec53 2b17 	vmov	r2, r3, d7
 8009164:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009168:	1a43      	subs	r3, r0, r1
 800916a:	eeb0 0b48 	vmov.f64	d0, d8
 800916e:	ec43 2b1c 	vmov	d12, r2, r3
 8009172:	910a      	str	r1, [sp, #40]	; 0x28
 8009174:	f001 fdc4 	bl	800ad00 <__ulp>
 8009178:	990a      	ldr	r1, [sp, #40]	; 0x28
 800917a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800917e:	ec59 8b18 	vmov	r8, r9, d8
 8009182:	e7ab      	b.n	80090dc <_strtod_l+0xa6c>
 8009184:	eeb0 7b4d 	vmov.f64	d7, d13
 8009188:	e7ea      	b.n	8009160 <_strtod_l+0xaf0>
 800918a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009192:	f57f af61 	bpl.w	8009058 <_strtod_l+0x9e8>
 8009196:	e4b1      	b.n	8008afc <_strtod_l+0x48c>
 8009198:	2300      	movs	r3, #0
 800919a:	9308      	str	r3, [sp, #32]
 800919c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800919e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	f7ff baad 	b.w	8008700 <_strtod_l+0x90>
 80091a6:	2a65      	cmp	r2, #101	; 0x65
 80091a8:	f43f ab9f 	beq.w	80088ea <_strtod_l+0x27a>
 80091ac:	2a45      	cmp	r2, #69	; 0x45
 80091ae:	f43f ab9c 	beq.w	80088ea <_strtod_l+0x27a>
 80091b2:	2101      	movs	r1, #1
 80091b4:	f7ff bbd4 	b.w	8008960 <_strtod_l+0x2f0>
 80091b8:	ffc00000 	.word	0xffc00000
 80091bc:	41dfffff 	.word	0x41dfffff
 80091c0:	000fffff 	.word	0x000fffff
 80091c4:	7ff00000 	.word	0x7ff00000
 80091c8:	7fefffff 	.word	0x7fefffff
 80091cc:	3ff00000 	.word	0x3ff00000
 80091d0:	7c9fffff 	.word	0x7c9fffff
 80091d4:	bff00000 	.word	0xbff00000
 80091d8:	7fe00000 	.word	0x7fe00000

080091dc <_strtod_r>:
 80091dc:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <_strtod_r+0x8>)
 80091de:	f7ff ba47 	b.w	8008670 <_strtod_l>
 80091e2:	bf00      	nop
 80091e4:	20000078 	.word	0x20000078

080091e8 <_strtol_l.constprop.0>:
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ee:	d001      	beq.n	80091f4 <_strtol_l.constprop.0+0xc>
 80091f0:	2b24      	cmp	r3, #36	; 0x24
 80091f2:	d906      	bls.n	8009202 <_strtol_l.constprop.0+0x1a>
 80091f4:	f7fe fb80 	bl	80078f8 <__errno>
 80091f8:	2316      	movs	r3, #22
 80091fa:	6003      	str	r3, [r0, #0]
 80091fc:	2000      	movs	r0, #0
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009202:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092e8 <_strtol_l.constprop.0+0x100>
 8009206:	460d      	mov	r5, r1
 8009208:	462e      	mov	r6, r5
 800920a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800920e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009212:	f017 0708 	ands.w	r7, r7, #8
 8009216:	d1f7      	bne.n	8009208 <_strtol_l.constprop.0+0x20>
 8009218:	2c2d      	cmp	r4, #45	; 0x2d
 800921a:	d132      	bne.n	8009282 <_strtol_l.constprop.0+0x9a>
 800921c:	782c      	ldrb	r4, [r5, #0]
 800921e:	2701      	movs	r7, #1
 8009220:	1cb5      	adds	r5, r6, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d05b      	beq.n	80092de <_strtol_l.constprop.0+0xf6>
 8009226:	2b10      	cmp	r3, #16
 8009228:	d109      	bne.n	800923e <_strtol_l.constprop.0+0x56>
 800922a:	2c30      	cmp	r4, #48	; 0x30
 800922c:	d107      	bne.n	800923e <_strtol_l.constprop.0+0x56>
 800922e:	782c      	ldrb	r4, [r5, #0]
 8009230:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009234:	2c58      	cmp	r4, #88	; 0x58
 8009236:	d14d      	bne.n	80092d4 <_strtol_l.constprop.0+0xec>
 8009238:	786c      	ldrb	r4, [r5, #1]
 800923a:	2310      	movs	r3, #16
 800923c:	3502      	adds	r5, #2
 800923e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009242:	f108 38ff 	add.w	r8, r8, #4294967295
 8009246:	f04f 0c00 	mov.w	ip, #0
 800924a:	fbb8 f9f3 	udiv	r9, r8, r3
 800924e:	4666      	mov	r6, ip
 8009250:	fb03 8a19 	mls	sl, r3, r9, r8
 8009254:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009258:	f1be 0f09 	cmp.w	lr, #9
 800925c:	d816      	bhi.n	800928c <_strtol_l.constprop.0+0xa4>
 800925e:	4674      	mov	r4, lr
 8009260:	42a3      	cmp	r3, r4
 8009262:	dd24      	ble.n	80092ae <_strtol_l.constprop.0+0xc6>
 8009264:	f1bc 0f00 	cmp.w	ip, #0
 8009268:	db1e      	blt.n	80092a8 <_strtol_l.constprop.0+0xc0>
 800926a:	45b1      	cmp	r9, r6
 800926c:	d31c      	bcc.n	80092a8 <_strtol_l.constprop.0+0xc0>
 800926e:	d101      	bne.n	8009274 <_strtol_l.constprop.0+0x8c>
 8009270:	45a2      	cmp	sl, r4
 8009272:	db19      	blt.n	80092a8 <_strtol_l.constprop.0+0xc0>
 8009274:	fb06 4603 	mla	r6, r6, r3, r4
 8009278:	f04f 0c01 	mov.w	ip, #1
 800927c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009280:	e7e8      	b.n	8009254 <_strtol_l.constprop.0+0x6c>
 8009282:	2c2b      	cmp	r4, #43	; 0x2b
 8009284:	bf04      	itt	eq
 8009286:	782c      	ldrbeq	r4, [r5, #0]
 8009288:	1cb5      	addeq	r5, r6, #2
 800928a:	e7ca      	b.n	8009222 <_strtol_l.constprop.0+0x3a>
 800928c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009290:	f1be 0f19 	cmp.w	lr, #25
 8009294:	d801      	bhi.n	800929a <_strtol_l.constprop.0+0xb2>
 8009296:	3c37      	subs	r4, #55	; 0x37
 8009298:	e7e2      	b.n	8009260 <_strtol_l.constprop.0+0x78>
 800929a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800929e:	f1be 0f19 	cmp.w	lr, #25
 80092a2:	d804      	bhi.n	80092ae <_strtol_l.constprop.0+0xc6>
 80092a4:	3c57      	subs	r4, #87	; 0x57
 80092a6:	e7db      	b.n	8009260 <_strtol_l.constprop.0+0x78>
 80092a8:	f04f 3cff 	mov.w	ip, #4294967295
 80092ac:	e7e6      	b.n	800927c <_strtol_l.constprop.0+0x94>
 80092ae:	f1bc 0f00 	cmp.w	ip, #0
 80092b2:	da05      	bge.n	80092c0 <_strtol_l.constprop.0+0xd8>
 80092b4:	2322      	movs	r3, #34	; 0x22
 80092b6:	6003      	str	r3, [r0, #0]
 80092b8:	4646      	mov	r6, r8
 80092ba:	b942      	cbnz	r2, 80092ce <_strtol_l.constprop.0+0xe6>
 80092bc:	4630      	mov	r0, r6
 80092be:	e79e      	b.n	80091fe <_strtol_l.constprop.0+0x16>
 80092c0:	b107      	cbz	r7, 80092c4 <_strtol_l.constprop.0+0xdc>
 80092c2:	4276      	negs	r6, r6
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	d0f9      	beq.n	80092bc <_strtol_l.constprop.0+0xd4>
 80092c8:	f1bc 0f00 	cmp.w	ip, #0
 80092cc:	d000      	beq.n	80092d0 <_strtol_l.constprop.0+0xe8>
 80092ce:	1e69      	subs	r1, r5, #1
 80092d0:	6011      	str	r1, [r2, #0]
 80092d2:	e7f3      	b.n	80092bc <_strtol_l.constprop.0+0xd4>
 80092d4:	2430      	movs	r4, #48	; 0x30
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1b1      	bne.n	800923e <_strtol_l.constprop.0+0x56>
 80092da:	2308      	movs	r3, #8
 80092dc:	e7af      	b.n	800923e <_strtol_l.constprop.0+0x56>
 80092de:	2c30      	cmp	r4, #48	; 0x30
 80092e0:	d0a5      	beq.n	800922e <_strtol_l.constprop.0+0x46>
 80092e2:	230a      	movs	r3, #10
 80092e4:	e7ab      	b.n	800923e <_strtol_l.constprop.0+0x56>
 80092e6:	bf00      	nop
 80092e8:	08031d41 	.word	0x08031d41

080092ec <_strtol_r>:
 80092ec:	f7ff bf7c 	b.w	80091e8 <_strtol_l.constprop.0>

080092f0 <quorem>:
 80092f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	6903      	ldr	r3, [r0, #16]
 80092f6:	690c      	ldr	r4, [r1, #16]
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	4607      	mov	r7, r0
 80092fc:	f2c0 8081 	blt.w	8009402 <quorem+0x112>
 8009300:	3c01      	subs	r4, #1
 8009302:	f101 0814 	add.w	r8, r1, #20
 8009306:	f100 0514 	add.w	r5, r0, #20
 800930a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009318:	3301      	adds	r3, #1
 800931a:	429a      	cmp	r2, r3
 800931c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009320:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009324:	fbb2 f6f3 	udiv	r6, r2, r3
 8009328:	d331      	bcc.n	800938e <quorem+0x9e>
 800932a:	f04f 0e00 	mov.w	lr, #0
 800932e:	4640      	mov	r0, r8
 8009330:	46ac      	mov	ip, r5
 8009332:	46f2      	mov	sl, lr
 8009334:	f850 2b04 	ldr.w	r2, [r0], #4
 8009338:	b293      	uxth	r3, r2
 800933a:	fb06 e303 	mla	r3, r6, r3, lr
 800933e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009342:	b29b      	uxth	r3, r3
 8009344:	ebaa 0303 	sub.w	r3, sl, r3
 8009348:	f8dc a000 	ldr.w	sl, [ip]
 800934c:	0c12      	lsrs	r2, r2, #16
 800934e:	fa13 f38a 	uxtah	r3, r3, sl
 8009352:	fb06 e202 	mla	r2, r6, r2, lr
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	9b00      	ldr	r3, [sp, #0]
 800935a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800935e:	b292      	uxth	r2, r2
 8009360:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009364:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009368:	f8bd 3000 	ldrh.w	r3, [sp]
 800936c:	4581      	cmp	r9, r0
 800936e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009372:	f84c 3b04 	str.w	r3, [ip], #4
 8009376:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800937a:	d2db      	bcs.n	8009334 <quorem+0x44>
 800937c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009380:	b92b      	cbnz	r3, 800938e <quorem+0x9e>
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	3b04      	subs	r3, #4
 8009386:	429d      	cmp	r5, r3
 8009388:	461a      	mov	r2, r3
 800938a:	d32e      	bcc.n	80093ea <quorem+0xfa>
 800938c:	613c      	str	r4, [r7, #16]
 800938e:	4638      	mov	r0, r7
 8009390:	f001 fc10 	bl	800abb4 <__mcmp>
 8009394:	2800      	cmp	r0, #0
 8009396:	db24      	blt.n	80093e2 <quorem+0xf2>
 8009398:	3601      	adds	r6, #1
 800939a:	4628      	mov	r0, r5
 800939c:	f04f 0c00 	mov.w	ip, #0
 80093a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80093a4:	f8d0 e000 	ldr.w	lr, [r0]
 80093a8:	b293      	uxth	r3, r2
 80093aa:	ebac 0303 	sub.w	r3, ip, r3
 80093ae:	0c12      	lsrs	r2, r2, #16
 80093b0:	fa13 f38e 	uxtah	r3, r3, lr
 80093b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093bc:	b29b      	uxth	r3, r3
 80093be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093c2:	45c1      	cmp	r9, r8
 80093c4:	f840 3b04 	str.w	r3, [r0], #4
 80093c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093cc:	d2e8      	bcs.n	80093a0 <quorem+0xb0>
 80093ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093d6:	b922      	cbnz	r2, 80093e2 <quorem+0xf2>
 80093d8:	3b04      	subs	r3, #4
 80093da:	429d      	cmp	r5, r3
 80093dc:	461a      	mov	r2, r3
 80093de:	d30a      	bcc.n	80093f6 <quorem+0x106>
 80093e0:	613c      	str	r4, [r7, #16]
 80093e2:	4630      	mov	r0, r6
 80093e4:	b003      	add	sp, #12
 80093e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ea:	6812      	ldr	r2, [r2, #0]
 80093ec:	3b04      	subs	r3, #4
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	d1cc      	bne.n	800938c <quorem+0x9c>
 80093f2:	3c01      	subs	r4, #1
 80093f4:	e7c7      	b.n	8009386 <quorem+0x96>
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	3b04      	subs	r3, #4
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	d1f0      	bne.n	80093e0 <quorem+0xf0>
 80093fe:	3c01      	subs	r4, #1
 8009400:	e7eb      	b.n	80093da <quorem+0xea>
 8009402:	2000      	movs	r0, #0
 8009404:	e7ee      	b.n	80093e4 <quorem+0xf4>
	...

08009408 <_dtoa_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	ed2d 8b02 	vpush	{d8}
 8009410:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009412:	b091      	sub	sp, #68	; 0x44
 8009414:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009418:	ec59 8b10 	vmov	r8, r9, d0
 800941c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800941e:	9106      	str	r1, [sp, #24]
 8009420:	4606      	mov	r6, r0
 8009422:	9208      	str	r2, [sp, #32]
 8009424:	930c      	str	r3, [sp, #48]	; 0x30
 8009426:	b975      	cbnz	r5, 8009446 <_dtoa_r+0x3e>
 8009428:	2010      	movs	r0, #16
 800942a:	f001 f8cf 	bl	800a5cc <malloc>
 800942e:	4602      	mov	r2, r0
 8009430:	6270      	str	r0, [r6, #36]	; 0x24
 8009432:	b920      	cbnz	r0, 800943e <_dtoa_r+0x36>
 8009434:	4baa      	ldr	r3, [pc, #680]	; (80096e0 <_dtoa_r+0x2d8>)
 8009436:	21ea      	movs	r1, #234	; 0xea
 8009438:	48aa      	ldr	r0, [pc, #680]	; (80096e4 <_dtoa_r+0x2dc>)
 800943a:	f002 f83b 	bl	800b4b4 <__assert_func>
 800943e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009442:	6005      	str	r5, [r0, #0]
 8009444:	60c5      	str	r5, [r0, #12]
 8009446:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	b151      	cbz	r1, 8009462 <_dtoa_r+0x5a>
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	604a      	str	r2, [r1, #4]
 8009450:	2301      	movs	r3, #1
 8009452:	4093      	lsls	r3, r2
 8009454:	608b      	str	r3, [r1, #8]
 8009456:	4630      	mov	r0, r6
 8009458:	f001 f920 	bl	800a69c <_Bfree>
 800945c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	f1b9 0300 	subs.w	r3, r9, #0
 8009466:	bfbb      	ittet	lt
 8009468:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800946c:	9303      	strlt	r3, [sp, #12]
 800946e:	2300      	movge	r3, #0
 8009470:	2201      	movlt	r2, #1
 8009472:	bfac      	ite	ge
 8009474:	6023      	strge	r3, [r4, #0]
 8009476:	6022      	strlt	r2, [r4, #0]
 8009478:	4b9b      	ldr	r3, [pc, #620]	; (80096e8 <_dtoa_r+0x2e0>)
 800947a:	9c03      	ldr	r4, [sp, #12]
 800947c:	43a3      	bics	r3, r4
 800947e:	d11c      	bne.n	80094ba <_dtoa_r+0xb2>
 8009480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009482:	f242 730f 	movw	r3, #9999	; 0x270f
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800948c:	ea53 0308 	orrs.w	r3, r3, r8
 8009490:	f000 84fd 	beq.w	8009e8e <_dtoa_r+0xa86>
 8009494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009496:	b963      	cbnz	r3, 80094b2 <_dtoa_r+0xaa>
 8009498:	4b94      	ldr	r3, [pc, #592]	; (80096ec <_dtoa_r+0x2e4>)
 800949a:	e01f      	b.n	80094dc <_dtoa_r+0xd4>
 800949c:	4b94      	ldr	r3, [pc, #592]	; (80096f0 <_dtoa_r+0x2e8>)
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	3308      	adds	r3, #8
 80094a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	9801      	ldr	r0, [sp, #4]
 80094a8:	b011      	add	sp, #68	; 0x44
 80094aa:	ecbd 8b02 	vpop	{d8}
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	4b8e      	ldr	r3, [pc, #568]	; (80096ec <_dtoa_r+0x2e4>)
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	3303      	adds	r3, #3
 80094b8:	e7f3      	b.n	80094a2 <_dtoa_r+0x9a>
 80094ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80094be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c6:	d10b      	bne.n	80094e0 <_dtoa_r+0xd8>
 80094c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ca:	2301      	movs	r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 84d9 	beq.w	8009e88 <_dtoa_r+0xa80>
 80094d6:	4887      	ldr	r0, [pc, #540]	; (80096f4 <_dtoa_r+0x2ec>)
 80094d8:	6018      	str	r0, [r3, #0]
 80094da:	1e43      	subs	r3, r0, #1
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	e7e2      	b.n	80094a6 <_dtoa_r+0x9e>
 80094e0:	a90f      	add	r1, sp, #60	; 0x3c
 80094e2:	aa0e      	add	r2, sp, #56	; 0x38
 80094e4:	4630      	mov	r0, r6
 80094e6:	eeb0 0b48 	vmov.f64	d0, d8
 80094ea:	f001 fc85 	bl	800adf8 <__d2b>
 80094ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80094f2:	4605      	mov	r5, r0
 80094f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d046      	beq.n	8009588 <_dtoa_r+0x180>
 80094fa:	ee18 4a90 	vmov	r4, s17
 80094fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009502:	ec53 2b18 	vmov	r2, r3, d8
 8009506:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800950a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800950e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009512:	2400      	movs	r4, #0
 8009514:	ec43 2b16 	vmov	d6, r2, r3
 8009518:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800951c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80096c8 <_dtoa_r+0x2c0>
 8009520:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009524:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80096d0 <_dtoa_r+0x2c8>
 8009528:	eea7 6b05 	vfma.f64	d6, d7, d5
 800952c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80096d8 <_dtoa_r+0x2d0>
 8009530:	ee07 1a90 	vmov	s15, r1
 8009534:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009538:	eeb0 7b46 	vmov.f64	d7, d6
 800953c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009540:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009544:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	ee16 ba90 	vmov	fp, s13
 8009550:	940a      	str	r4, [sp, #40]	; 0x28
 8009552:	d508      	bpl.n	8009566 <_dtoa_r+0x15e>
 8009554:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009558:	eeb4 6b47 	vcmp.f64	d6, d7
 800955c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009560:	bf18      	it	ne
 8009562:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009566:	f1bb 0f16 	cmp.w	fp, #22
 800956a:	d82f      	bhi.n	80095cc <_dtoa_r+0x1c4>
 800956c:	4b62      	ldr	r3, [pc, #392]	; (80096f8 <_dtoa_r+0x2f0>)
 800956e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009572:	ed93 7b00 	vldr	d7, [r3]
 8009576:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800957a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957e:	d501      	bpl.n	8009584 <_dtoa_r+0x17c>
 8009580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009584:	2300      	movs	r3, #0
 8009586:	e022      	b.n	80095ce <_dtoa_r+0x1c6>
 8009588:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800958a:	4401      	add	r1, r0
 800958c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009590:	2b20      	cmp	r3, #32
 8009592:	bfc1      	itttt	gt
 8009594:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009598:	fa04 f303 	lslgt.w	r3, r4, r3
 800959c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80095a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80095a4:	bfd6      	itet	le
 80095a6:	f1c3 0320 	rsble	r3, r3, #32
 80095aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80095ae:	fa08 f803 	lslle.w	r8, r8, r3
 80095b2:	ee07 8a90 	vmov	s15, r8
 80095b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80095ba:	3901      	subs	r1, #1
 80095bc:	ee17 4a90 	vmov	r4, s15
 80095c0:	ec53 2b17 	vmov	r2, r3, d7
 80095c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80095c8:	2401      	movs	r4, #1
 80095ca:	e7a3      	b.n	8009514 <_dtoa_r+0x10c>
 80095cc:	2301      	movs	r3, #1
 80095ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d0:	1a43      	subs	r3, r0, r1
 80095d2:	1e5a      	subs	r2, r3, #1
 80095d4:	bf45      	ittet	mi
 80095d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80095da:	9304      	strmi	r3, [sp, #16]
 80095dc:	2300      	movpl	r3, #0
 80095de:	2300      	movmi	r3, #0
 80095e0:	9205      	str	r2, [sp, #20]
 80095e2:	bf54      	ite	pl
 80095e4:	9304      	strpl	r3, [sp, #16]
 80095e6:	9305      	strmi	r3, [sp, #20]
 80095e8:	f1bb 0f00 	cmp.w	fp, #0
 80095ec:	db18      	blt.n	8009620 <_dtoa_r+0x218>
 80095ee:	9b05      	ldr	r3, [sp, #20]
 80095f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80095f4:	445b      	add	r3, fp
 80095f6:	9305      	str	r3, [sp, #20]
 80095f8:	2300      	movs	r3, #0
 80095fa:	9a06      	ldr	r2, [sp, #24]
 80095fc:	2a09      	cmp	r2, #9
 80095fe:	d849      	bhi.n	8009694 <_dtoa_r+0x28c>
 8009600:	2a05      	cmp	r2, #5
 8009602:	bfc4      	itt	gt
 8009604:	3a04      	subgt	r2, #4
 8009606:	9206      	strgt	r2, [sp, #24]
 8009608:	9a06      	ldr	r2, [sp, #24]
 800960a:	f1a2 0202 	sub.w	r2, r2, #2
 800960e:	bfcc      	ite	gt
 8009610:	2400      	movgt	r4, #0
 8009612:	2401      	movle	r4, #1
 8009614:	2a03      	cmp	r2, #3
 8009616:	d848      	bhi.n	80096aa <_dtoa_r+0x2a2>
 8009618:	e8df f002 	tbb	[pc, r2]
 800961c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	2200      	movs	r2, #0
 8009624:	eba3 030b 	sub.w	r3, r3, fp
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	9209      	str	r2, [sp, #36]	; 0x24
 800962c:	f1cb 0300 	rsb	r3, fp, #0
 8009630:	e7e3      	b.n	80095fa <_dtoa_r+0x1f2>
 8009632:	2200      	movs	r2, #0
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	9a08      	ldr	r2, [sp, #32]
 8009638:	2a00      	cmp	r2, #0
 800963a:	dc39      	bgt.n	80096b0 <_dtoa_r+0x2a8>
 800963c:	f04f 0a01 	mov.w	sl, #1
 8009640:	46d1      	mov	r9, sl
 8009642:	4652      	mov	r2, sl
 8009644:	f8cd a020 	str.w	sl, [sp, #32]
 8009648:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800964a:	2100      	movs	r1, #0
 800964c:	6079      	str	r1, [r7, #4]
 800964e:	2004      	movs	r0, #4
 8009650:	f100 0c14 	add.w	ip, r0, #20
 8009654:	4594      	cmp	ip, r2
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	d92f      	bls.n	80096ba <_dtoa_r+0x2b2>
 800965a:	4630      	mov	r0, r6
 800965c:	930d      	str	r3, [sp, #52]	; 0x34
 800965e:	f000 ffdd 	bl	800a61c <_Balloc>
 8009662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009664:	9001      	str	r0, [sp, #4]
 8009666:	4602      	mov	r2, r0
 8009668:	2800      	cmp	r0, #0
 800966a:	d149      	bne.n	8009700 <_dtoa_r+0x2f8>
 800966c:	4b23      	ldr	r3, [pc, #140]	; (80096fc <_dtoa_r+0x2f4>)
 800966e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009672:	e6e1      	b.n	8009438 <_dtoa_r+0x30>
 8009674:	2201      	movs	r2, #1
 8009676:	e7dd      	b.n	8009634 <_dtoa_r+0x22c>
 8009678:	2200      	movs	r2, #0
 800967a:	9207      	str	r2, [sp, #28]
 800967c:	9a08      	ldr	r2, [sp, #32]
 800967e:	eb0b 0a02 	add.w	sl, fp, r2
 8009682:	f10a 0901 	add.w	r9, sl, #1
 8009686:	464a      	mov	r2, r9
 8009688:	2a01      	cmp	r2, #1
 800968a:	bfb8      	it	lt
 800968c:	2201      	movlt	r2, #1
 800968e:	e7db      	b.n	8009648 <_dtoa_r+0x240>
 8009690:	2201      	movs	r2, #1
 8009692:	e7f2      	b.n	800967a <_dtoa_r+0x272>
 8009694:	2401      	movs	r4, #1
 8009696:	2200      	movs	r2, #0
 8009698:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800969c:	f04f 3aff 	mov.w	sl, #4294967295
 80096a0:	2100      	movs	r1, #0
 80096a2:	46d1      	mov	r9, sl
 80096a4:	2212      	movs	r2, #18
 80096a6:	9108      	str	r1, [sp, #32]
 80096a8:	e7ce      	b.n	8009648 <_dtoa_r+0x240>
 80096aa:	2201      	movs	r2, #1
 80096ac:	9207      	str	r2, [sp, #28]
 80096ae:	e7f5      	b.n	800969c <_dtoa_r+0x294>
 80096b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80096b4:	46d1      	mov	r9, sl
 80096b6:	4652      	mov	r2, sl
 80096b8:	e7c6      	b.n	8009648 <_dtoa_r+0x240>
 80096ba:	3101      	adds	r1, #1
 80096bc:	6079      	str	r1, [r7, #4]
 80096be:	0040      	lsls	r0, r0, #1
 80096c0:	e7c6      	b.n	8009650 <_dtoa_r+0x248>
 80096c2:	bf00      	nop
 80096c4:	f3af 8000 	nop.w
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	08031e4e 	.word	0x08031e4e
 80096e4:	08031e65 	.word	0x08031e65
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	08031e4a 	.word	0x08031e4a
 80096f0:	08031e41 	.word	0x08031e41
 80096f4:	08031cc5 	.word	0x08031cc5
 80096f8:	08031fd0 	.word	0x08031fd0
 80096fc:	08031ec0 	.word	0x08031ec0
 8009700:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009702:	9901      	ldr	r1, [sp, #4]
 8009704:	6011      	str	r1, [r2, #0]
 8009706:	f1b9 0f0e 	cmp.w	r9, #14
 800970a:	d86c      	bhi.n	80097e6 <_dtoa_r+0x3de>
 800970c:	2c00      	cmp	r4, #0
 800970e:	d06a      	beq.n	80097e6 <_dtoa_r+0x3de>
 8009710:	f1bb 0f00 	cmp.w	fp, #0
 8009714:	f340 80a0 	ble.w	8009858 <_dtoa_r+0x450>
 8009718:	49c1      	ldr	r1, [pc, #772]	; (8009a20 <_dtoa_r+0x618>)
 800971a:	f00b 020f 	and.w	r2, fp, #15
 800971e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009722:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009726:	ed92 7b00 	vldr	d7, [r2]
 800972a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800972e:	f000 8087 	beq.w	8009840 <_dtoa_r+0x438>
 8009732:	4abc      	ldr	r2, [pc, #752]	; (8009a24 <_dtoa_r+0x61c>)
 8009734:	ed92 6b08 	vldr	d6, [r2, #32]
 8009738:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800973c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009740:	f001 010f 	and.w	r1, r1, #15
 8009744:	2203      	movs	r2, #3
 8009746:	48b7      	ldr	r0, [pc, #732]	; (8009a24 <_dtoa_r+0x61c>)
 8009748:	2900      	cmp	r1, #0
 800974a:	d17b      	bne.n	8009844 <_dtoa_r+0x43c>
 800974c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009750:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009754:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800975a:	2900      	cmp	r1, #0
 800975c:	f000 80a2 	beq.w	80098a4 <_dtoa_r+0x49c>
 8009760:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009768:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800976c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009770:	f140 8098 	bpl.w	80098a4 <_dtoa_r+0x49c>
 8009774:	f1b9 0f00 	cmp.w	r9, #0
 8009778:	f000 8094 	beq.w	80098a4 <_dtoa_r+0x49c>
 800977c:	f1ba 0f00 	cmp.w	sl, #0
 8009780:	dd2f      	ble.n	80097e2 <_dtoa_r+0x3da>
 8009782:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800978a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800978e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009792:	3201      	adds	r2, #1
 8009794:	4650      	mov	r0, sl
 8009796:	ed9d 6b02 	vldr	d6, [sp, #8]
 800979a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800979e:	ee07 2a90 	vmov	s15, r2
 80097a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80097a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80097aa:	ee15 4a90 	vmov	r4, s11
 80097ae:	ec52 1b15 	vmov	r1, r2, d5
 80097b2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d177      	bne.n	80098aa <_dtoa_r+0x4a2>
 80097ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80097be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80097c2:	ec42 1b17 	vmov	d7, r1, r2
 80097c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ce:	f300 8263 	bgt.w	8009c98 <_dtoa_r+0x890>
 80097d2:	eeb1 7b47 	vneg.f64	d7, d7
 80097d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80097da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097de:	f100 8258 	bmi.w	8009c92 <_dtoa_r+0x88a>
 80097e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80097e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	f2c0 811d 	blt.w	8009a28 <_dtoa_r+0x620>
 80097ee:	f1bb 0f0e 	cmp.w	fp, #14
 80097f2:	f300 8119 	bgt.w	8009a28 <_dtoa_r+0x620>
 80097f6:	4b8a      	ldr	r3, [pc, #552]	; (8009a20 <_dtoa_r+0x618>)
 80097f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097fc:	ed93 6b00 	vldr	d6, [r3]
 8009800:	9b08      	ldr	r3, [sp, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f280 80b7 	bge.w	8009976 <_dtoa_r+0x56e>
 8009808:	f1b9 0f00 	cmp.w	r9, #0
 800980c:	f300 80b3 	bgt.w	8009976 <_dtoa_r+0x56e>
 8009810:	f040 823f 	bne.w	8009c92 <_dtoa_r+0x88a>
 8009814:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009818:	ee26 6b07 	vmul.f64	d6, d6, d7
 800981c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009820:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009828:	464c      	mov	r4, r9
 800982a:	464f      	mov	r7, r9
 800982c:	f280 8215 	bge.w	8009c5a <_dtoa_r+0x852>
 8009830:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009834:	2331      	movs	r3, #49	; 0x31
 8009836:	f808 3b01 	strb.w	r3, [r8], #1
 800983a:	f10b 0b01 	add.w	fp, fp, #1
 800983e:	e211      	b.n	8009c64 <_dtoa_r+0x85c>
 8009840:	2202      	movs	r2, #2
 8009842:	e780      	b.n	8009746 <_dtoa_r+0x33e>
 8009844:	07cc      	lsls	r4, r1, #31
 8009846:	d504      	bpl.n	8009852 <_dtoa_r+0x44a>
 8009848:	ed90 6b00 	vldr	d6, [r0]
 800984c:	3201      	adds	r2, #1
 800984e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009852:	1049      	asrs	r1, r1, #1
 8009854:	3008      	adds	r0, #8
 8009856:	e777      	b.n	8009748 <_dtoa_r+0x340>
 8009858:	d022      	beq.n	80098a0 <_dtoa_r+0x498>
 800985a:	f1cb 0100 	rsb	r1, fp, #0
 800985e:	4a70      	ldr	r2, [pc, #448]	; (8009a20 <_dtoa_r+0x618>)
 8009860:	f001 000f 	and.w	r0, r1, #15
 8009864:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009868:	ed92 7b00 	vldr	d7, [r2]
 800986c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009870:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009874:	486b      	ldr	r0, [pc, #428]	; (8009a24 <_dtoa_r+0x61c>)
 8009876:	1109      	asrs	r1, r1, #4
 8009878:	2400      	movs	r4, #0
 800987a:	2202      	movs	r2, #2
 800987c:	b929      	cbnz	r1, 800988a <_dtoa_r+0x482>
 800987e:	2c00      	cmp	r4, #0
 8009880:	f43f af6a 	beq.w	8009758 <_dtoa_r+0x350>
 8009884:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009888:	e766      	b.n	8009758 <_dtoa_r+0x350>
 800988a:	07cf      	lsls	r7, r1, #31
 800988c:	d505      	bpl.n	800989a <_dtoa_r+0x492>
 800988e:	ed90 6b00 	vldr	d6, [r0]
 8009892:	3201      	adds	r2, #1
 8009894:	2401      	movs	r4, #1
 8009896:	ee27 7b06 	vmul.f64	d7, d7, d6
 800989a:	1049      	asrs	r1, r1, #1
 800989c:	3008      	adds	r0, #8
 800989e:	e7ed      	b.n	800987c <_dtoa_r+0x474>
 80098a0:	2202      	movs	r2, #2
 80098a2:	e759      	b.n	8009758 <_dtoa_r+0x350>
 80098a4:	465f      	mov	r7, fp
 80098a6:	4648      	mov	r0, r9
 80098a8:	e775      	b.n	8009796 <_dtoa_r+0x38e>
 80098aa:	ec42 1b17 	vmov	d7, r1, r2
 80098ae:	4a5c      	ldr	r2, [pc, #368]	; (8009a20 <_dtoa_r+0x618>)
 80098b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80098b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80098b8:	9a01      	ldr	r2, [sp, #4]
 80098ba:	1814      	adds	r4, r2, r0
 80098bc:	9a07      	ldr	r2, [sp, #28]
 80098be:	b352      	cbz	r2, 8009916 <_dtoa_r+0x50e>
 80098c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80098c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80098c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80098d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80098d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80098dc:	ee14 2a90 	vmov	r2, s9
 80098e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80098e4:	3230      	adds	r2, #48	; 0x30
 80098e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80098ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f2:	f808 2b01 	strb.w	r2, [r8], #1
 80098f6:	d439      	bmi.n	800996c <_dtoa_r+0x564>
 80098f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80098fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	d472      	bmi.n	80099ec <_dtoa_r+0x5e4>
 8009906:	45a0      	cmp	r8, r4
 8009908:	f43f af6b 	beq.w	80097e2 <_dtoa_r+0x3da>
 800990c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009910:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009914:	e7e0      	b.n	80098d8 <_dtoa_r+0x4d0>
 8009916:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800991a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800991e:	4621      	mov	r1, r4
 8009920:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009924:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009928:	ee14 2a90 	vmov	r2, s9
 800992c:	3230      	adds	r2, #48	; 0x30
 800992e:	f808 2b01 	strb.w	r2, [r8], #1
 8009932:	45a0      	cmp	r8, r4
 8009934:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009938:	ee36 6b45 	vsub.f64	d6, d6, d5
 800993c:	d118      	bne.n	8009970 <_dtoa_r+0x568>
 800993e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009942:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009946:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800994a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994e:	dc4d      	bgt.n	80099ec <_dtoa_r+0x5e4>
 8009950:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009954:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995c:	f57f af41 	bpl.w	80097e2 <_dtoa_r+0x3da>
 8009960:	4688      	mov	r8, r1
 8009962:	3901      	subs	r1, #1
 8009964:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009968:	2b30      	cmp	r3, #48	; 0x30
 800996a:	d0f9      	beq.n	8009960 <_dtoa_r+0x558>
 800996c:	46bb      	mov	fp, r7
 800996e:	e02a      	b.n	80099c6 <_dtoa_r+0x5be>
 8009970:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009974:	e7d6      	b.n	8009924 <_dtoa_r+0x51c>
 8009976:	ed9d 7b02 	vldr	d7, [sp, #8]
 800997a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800997e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009982:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009986:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800998a:	ee15 3a10 	vmov	r3, s10
 800998e:	3330      	adds	r3, #48	; 0x30
 8009990:	f808 3b01 	strb.w	r3, [r8], #1
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	eba8 0303 	sub.w	r3, r8, r3
 800999a:	4599      	cmp	r9, r3
 800999c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80099a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80099a4:	d133      	bne.n	8009a0e <_dtoa_r+0x606>
 80099a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80099aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80099ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b2:	dc1a      	bgt.n	80099ea <_dtoa_r+0x5e2>
 80099b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80099b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099bc:	d103      	bne.n	80099c6 <_dtoa_r+0x5be>
 80099be:	ee15 3a10 	vmov	r3, s10
 80099c2:	07d9      	lsls	r1, r3, #31
 80099c4:	d411      	bmi.n	80099ea <_dtoa_r+0x5e2>
 80099c6:	4629      	mov	r1, r5
 80099c8:	4630      	mov	r0, r6
 80099ca:	f000 fe67 	bl	800a69c <_Bfree>
 80099ce:	2300      	movs	r3, #0
 80099d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d2:	f888 3000 	strb.w	r3, [r8]
 80099d6:	f10b 0301 	add.w	r3, fp, #1
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f43f ad61 	beq.w	80094a6 <_dtoa_r+0x9e>
 80099e4:	f8c3 8000 	str.w	r8, [r3]
 80099e8:	e55d      	b.n	80094a6 <_dtoa_r+0x9e>
 80099ea:	465f      	mov	r7, fp
 80099ec:	4643      	mov	r3, r8
 80099ee:	4698      	mov	r8, r3
 80099f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099f4:	2a39      	cmp	r2, #57	; 0x39
 80099f6:	d106      	bne.n	8009a06 <_dtoa_r+0x5fe>
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d1f7      	bne.n	80099ee <_dtoa_r+0x5e6>
 80099fe:	9901      	ldr	r1, [sp, #4]
 8009a00:	2230      	movs	r2, #48	; 0x30
 8009a02:	3701      	adds	r7, #1
 8009a04:	700a      	strb	r2, [r1, #0]
 8009a06:	781a      	ldrb	r2, [r3, #0]
 8009a08:	3201      	adds	r2, #1
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	e7ae      	b.n	800996c <_dtoa_r+0x564>
 8009a0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1a:	d1b2      	bne.n	8009982 <_dtoa_r+0x57a>
 8009a1c:	e7d3      	b.n	80099c6 <_dtoa_r+0x5be>
 8009a1e:	bf00      	nop
 8009a20:	08031fd0 	.word	0x08031fd0
 8009a24:	08031fa8 	.word	0x08031fa8
 8009a28:	9907      	ldr	r1, [sp, #28]
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	f000 80d0 	beq.w	8009bd0 <_dtoa_r+0x7c8>
 8009a30:	9906      	ldr	r1, [sp, #24]
 8009a32:	2901      	cmp	r1, #1
 8009a34:	f300 80b4 	bgt.w	8009ba0 <_dtoa_r+0x798>
 8009a38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	f000 80ac 	beq.w	8009b98 <_dtoa_r+0x790>
 8009a40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009a48:	461c      	mov	r4, r3
 8009a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a4c:	9b04      	ldr	r3, [sp, #16]
 8009a4e:	4413      	add	r3, r2
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	9b05      	ldr	r3, [sp, #20]
 8009a54:	2101      	movs	r1, #1
 8009a56:	4413      	add	r3, r2
 8009a58:	4630      	mov	r0, r6
 8009a5a:	9305      	str	r3, [sp, #20]
 8009a5c:	f000 ff20 	bl	800a8a0 <__i2b>
 8009a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a62:	4607      	mov	r7, r0
 8009a64:	f1b8 0f00 	cmp.w	r8, #0
 8009a68:	dd0d      	ble.n	8009a86 <_dtoa_r+0x67e>
 8009a6a:	9a05      	ldr	r2, [sp, #20]
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	dd0a      	ble.n	8009a86 <_dtoa_r+0x67e>
 8009a70:	4542      	cmp	r2, r8
 8009a72:	9904      	ldr	r1, [sp, #16]
 8009a74:	bfa8      	it	ge
 8009a76:	4642      	movge	r2, r8
 8009a78:	1a89      	subs	r1, r1, r2
 8009a7a:	9104      	str	r1, [sp, #16]
 8009a7c:	9905      	ldr	r1, [sp, #20]
 8009a7e:	eba8 0802 	sub.w	r8, r8, r2
 8009a82:	1a8a      	subs	r2, r1, r2
 8009a84:	9205      	str	r2, [sp, #20]
 8009a86:	b303      	cbz	r3, 8009aca <_dtoa_r+0x6c2>
 8009a88:	9a07      	ldr	r2, [sp, #28]
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	f000 80a5 	beq.w	8009bda <_dtoa_r+0x7d2>
 8009a90:	2c00      	cmp	r4, #0
 8009a92:	dd13      	ble.n	8009abc <_dtoa_r+0x6b4>
 8009a94:	4639      	mov	r1, r7
 8009a96:	4622      	mov	r2, r4
 8009a98:	4630      	mov	r0, r6
 8009a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a9c:	f000 ffc0 	bl	800aa20 <__pow5mult>
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 ff10 	bl	800a8cc <__multiply>
 8009aac:	4629      	mov	r1, r5
 8009aae:	900a      	str	r0, [sp, #40]	; 0x28
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 fdf3 	bl	800a69c <_Bfree>
 8009ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aba:	4615      	mov	r5, r2
 8009abc:	1b1a      	subs	r2, r3, r4
 8009abe:	d004      	beq.n	8009aca <_dtoa_r+0x6c2>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 ffac 	bl	800aa20 <__pow5mult>
 8009ac8:	4605      	mov	r5, r0
 8009aca:	2101      	movs	r1, #1
 8009acc:	4630      	mov	r0, r6
 8009ace:	f000 fee7 	bl	800a8a0 <__i2b>
 8009ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	f340 8081 	ble.w	8009bde <_dtoa_r+0x7d6>
 8009adc:	461a      	mov	r2, r3
 8009ade:	4601      	mov	r1, r0
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 ff9d 	bl	800aa20 <__pow5mult>
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	4604      	mov	r4, r0
 8009aec:	dd7a      	ble.n	8009be4 <_dtoa_r+0x7dc>
 8009aee:	2300      	movs	r3, #0
 8009af0:	930a      	str	r3, [sp, #40]	; 0x28
 8009af2:	6922      	ldr	r2, [r4, #16]
 8009af4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009af8:	6910      	ldr	r0, [r2, #16]
 8009afa:	f000 fe81 	bl	800a800 <__hi0bits>
 8009afe:	f1c0 0020 	rsb	r0, r0, #32
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	4418      	add	r0, r3
 8009b06:	f010 001f 	ands.w	r0, r0, #31
 8009b0a:	f000 808c 	beq.w	8009c26 <_dtoa_r+0x81e>
 8009b0e:	f1c0 0220 	rsb	r2, r0, #32
 8009b12:	2a04      	cmp	r2, #4
 8009b14:	f340 8085 	ble.w	8009c22 <_dtoa_r+0x81a>
 8009b18:	f1c0 001c 	rsb	r0, r0, #28
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	4403      	add	r3, r0
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9b05      	ldr	r3, [sp, #20]
 8009b24:	4403      	add	r3, r0
 8009b26:	4480      	add	r8, r0
 8009b28:	9305      	str	r3, [sp, #20]
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd05      	ble.n	8009b3c <_dtoa_r+0x734>
 8009b30:	4629      	mov	r1, r5
 8009b32:	461a      	mov	r2, r3
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 ffcd 	bl	800aad4 <__lshift>
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dd05      	ble.n	8009b4e <_dtoa_r+0x746>
 8009b42:	4621      	mov	r1, r4
 8009b44:	461a      	mov	r2, r3
 8009b46:	4630      	mov	r0, r6
 8009b48:	f000 ffc4 	bl	800aad4 <__lshift>
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d06a      	beq.n	8009c2a <_dtoa_r+0x822>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4628      	mov	r0, r5
 8009b58:	f001 f82c 	bl	800abb4 <__mcmp>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	da64      	bge.n	8009c2a <_dtoa_r+0x822>
 8009b60:	2300      	movs	r3, #0
 8009b62:	4629      	mov	r1, r5
 8009b64:	220a      	movs	r2, #10
 8009b66:	4630      	mov	r0, r6
 8009b68:	f000 fdba 	bl	800a6e0 <__multadd>
 8009b6c:	9b07      	ldr	r3, [sp, #28]
 8009b6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b72:	4605      	mov	r5, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8191 	beq.w	8009e9c <_dtoa_r+0xa94>
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	220a      	movs	r2, #10
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 fdad 	bl	800a6e0 <__multadd>
 8009b86:	f1ba 0f00 	cmp.w	sl, #0
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	f300 808d 	bgt.w	8009caa <_dtoa_r+0x8a2>
 8009b90:	9b06      	ldr	r3, [sp, #24]
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	dc50      	bgt.n	8009c38 <_dtoa_r+0x830>
 8009b96:	e088      	b.n	8009caa <_dtoa_r+0x8a2>
 8009b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b9e:	e751      	b.n	8009a44 <_dtoa_r+0x63c>
 8009ba0:	f109 34ff 	add.w	r4, r9, #4294967295
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	bfbf      	itttt	lt
 8009ba8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009baa:	1ae3      	sublt	r3, r4, r3
 8009bac:	18d2      	addlt	r2, r2, r3
 8009bae:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009bb0:	bfb6      	itet	lt
 8009bb2:	4623      	movlt	r3, r4
 8009bb4:	1b1c      	subge	r4, r3, r4
 8009bb6:	2400      	movlt	r4, #0
 8009bb8:	f1b9 0f00 	cmp.w	r9, #0
 8009bbc:	bfb5      	itete	lt
 8009bbe:	9a04      	ldrlt	r2, [sp, #16]
 8009bc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009bc4:	eba2 0809 	sublt.w	r8, r2, r9
 8009bc8:	464a      	movge	r2, r9
 8009bca:	bfb8      	it	lt
 8009bcc:	2200      	movlt	r2, #0
 8009bce:	e73c      	b.n	8009a4a <_dtoa_r+0x642>
 8009bd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009bd4:	9f07      	ldr	r7, [sp, #28]
 8009bd6:	461c      	mov	r4, r3
 8009bd8:	e744      	b.n	8009a64 <_dtoa_r+0x65c>
 8009bda:	461a      	mov	r2, r3
 8009bdc:	e770      	b.n	8009ac0 <_dtoa_r+0x6b8>
 8009bde:	9b06      	ldr	r3, [sp, #24]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	dc18      	bgt.n	8009c16 <_dtoa_r+0x80e>
 8009be4:	9b02      	ldr	r3, [sp, #8]
 8009be6:	b9b3      	cbnz	r3, 8009c16 <_dtoa_r+0x80e>
 8009be8:	9b03      	ldr	r3, [sp, #12]
 8009bea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009bee:	b9a2      	cbnz	r2, 8009c1a <_dtoa_r+0x812>
 8009bf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009bf4:	0d12      	lsrs	r2, r2, #20
 8009bf6:	0512      	lsls	r2, r2, #20
 8009bf8:	b18a      	cbz	r2, 8009c1e <_dtoa_r+0x816>
 8009bfa:	9b04      	ldr	r3, [sp, #16]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	9b05      	ldr	r3, [sp, #20]
 8009c02:	3301      	adds	r3, #1
 8009c04:	9305      	str	r3, [sp, #20]
 8009c06:	2301      	movs	r3, #1
 8009c08:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f47f af70 	bne.w	8009af2 <_dtoa_r+0x6ea>
 8009c12:	2001      	movs	r0, #1
 8009c14:	e775      	b.n	8009b02 <_dtoa_r+0x6fa>
 8009c16:	2300      	movs	r3, #0
 8009c18:	e7f6      	b.n	8009c08 <_dtoa_r+0x800>
 8009c1a:	9b02      	ldr	r3, [sp, #8]
 8009c1c:	e7f4      	b.n	8009c08 <_dtoa_r+0x800>
 8009c1e:	920a      	str	r2, [sp, #40]	; 0x28
 8009c20:	e7f3      	b.n	8009c0a <_dtoa_r+0x802>
 8009c22:	d082      	beq.n	8009b2a <_dtoa_r+0x722>
 8009c24:	4610      	mov	r0, r2
 8009c26:	301c      	adds	r0, #28
 8009c28:	e778      	b.n	8009b1c <_dtoa_r+0x714>
 8009c2a:	f1b9 0f00 	cmp.w	r9, #0
 8009c2e:	dc37      	bgt.n	8009ca0 <_dtoa_r+0x898>
 8009c30:	9b06      	ldr	r3, [sp, #24]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	dd34      	ble.n	8009ca0 <_dtoa_r+0x898>
 8009c36:	46ca      	mov	sl, r9
 8009c38:	f1ba 0f00 	cmp.w	sl, #0
 8009c3c:	d10d      	bne.n	8009c5a <_dtoa_r+0x852>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4653      	mov	r3, sl
 8009c42:	2205      	movs	r2, #5
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 fd4b 	bl	800a6e0 <__multadd>
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 ffb0 	bl	800abb4 <__mcmp>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f73f adeb 	bgt.w	8009830 <_dtoa_r+0x428>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c60:	ea6f 0b03 	mvn.w	fp, r3
 8009c64:	f04f 0900 	mov.w	r9, #0
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 fd16 	bl	800a69c <_Bfree>
 8009c70:	2f00      	cmp	r7, #0
 8009c72:	f43f aea8 	beq.w	80099c6 <_dtoa_r+0x5be>
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	d005      	beq.n	8009c88 <_dtoa_r+0x880>
 8009c7c:	45b9      	cmp	r9, r7
 8009c7e:	d003      	beq.n	8009c88 <_dtoa_r+0x880>
 8009c80:	4649      	mov	r1, r9
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 fd0a 	bl	800a69c <_Bfree>
 8009c88:	4639      	mov	r1, r7
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f000 fd06 	bl	800a69c <_Bfree>
 8009c90:	e699      	b.n	80099c6 <_dtoa_r+0x5be>
 8009c92:	2400      	movs	r4, #0
 8009c94:	4627      	mov	r7, r4
 8009c96:	e7e0      	b.n	8009c5a <_dtoa_r+0x852>
 8009c98:	46bb      	mov	fp, r7
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	e5c7      	b.n	8009830 <_dtoa_r+0x428>
 8009ca0:	9b07      	ldr	r3, [sp, #28]
 8009ca2:	46ca      	mov	sl, r9
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8100 	beq.w	8009eaa <_dtoa_r+0xaa2>
 8009caa:	f1b8 0f00 	cmp.w	r8, #0
 8009cae:	dd05      	ble.n	8009cbc <_dtoa_r+0x8b4>
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f000 ff0d 	bl	800aad4 <__lshift>
 8009cba:	4607      	mov	r7, r0
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d05d      	beq.n	8009d7e <_dtoa_r+0x976>
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 fca9 	bl	800a61c <_Balloc>
 8009cca:	4680      	mov	r8, r0
 8009ccc:	b928      	cbnz	r0, 8009cda <_dtoa_r+0x8d2>
 8009cce:	4b82      	ldr	r3, [pc, #520]	; (8009ed8 <_dtoa_r+0xad0>)
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009cd6:	f7ff bbaf 	b.w	8009438 <_dtoa_r+0x30>
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	3202      	adds	r2, #2
 8009cde:	0092      	lsls	r2, r2, #2
 8009ce0:	f107 010c 	add.w	r1, r7, #12
 8009ce4:	300c      	adds	r0, #12
 8009ce6:	f000 fc8b 	bl	800a600 <memcpy>
 8009cea:	2201      	movs	r2, #1
 8009cec:	4641      	mov	r1, r8
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f000 fef0 	bl	800aad4 <__lshift>
 8009cf4:	9b01      	ldr	r3, [sp, #4]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	9304      	str	r3, [sp, #16]
 8009cfa:	9b01      	ldr	r3, [sp, #4]
 8009cfc:	4453      	add	r3, sl
 8009cfe:	9308      	str	r3, [sp, #32]
 8009d00:	9b02      	ldr	r3, [sp, #8]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	46b9      	mov	r9, r7
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	9b04      	ldr	r3, [sp, #16]
 8009d0e:	4621      	mov	r1, r4
 8009d10:	3b01      	subs	r3, #1
 8009d12:	4628      	mov	r0, r5
 8009d14:	9302      	str	r3, [sp, #8]
 8009d16:	f7ff faeb 	bl	80092f0 <quorem>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	3330      	adds	r3, #48	; 0x30
 8009d1e:	9005      	str	r0, [sp, #20]
 8009d20:	4649      	mov	r1, r9
 8009d22:	4628      	mov	r0, r5
 8009d24:	9309      	str	r3, [sp, #36]	; 0x24
 8009d26:	f000 ff45 	bl	800abb4 <__mcmp>
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	4682      	mov	sl, r0
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 ff5b 	bl	800abec <__mdiff>
 8009d36:	68c2      	ldr	r2, [r0, #12]
 8009d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	bb0a      	cbnz	r2, 8009d82 <_dtoa_r+0x97a>
 8009d3e:	4601      	mov	r1, r0
 8009d40:	4628      	mov	r0, r5
 8009d42:	f000 ff37 	bl	800abb4 <__mcmp>
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009d52:	f000 fca3 	bl	800a69c <_Bfree>
 8009d56:	9b06      	ldr	r3, [sp, #24]
 8009d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d5e:	ea43 0102 	orr.w	r1, r3, r2
 8009d62:	9b07      	ldr	r3, [sp, #28]
 8009d64:	430b      	orrs	r3, r1
 8009d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d68:	d10d      	bne.n	8009d86 <_dtoa_r+0x97e>
 8009d6a:	2b39      	cmp	r3, #57	; 0x39
 8009d6c:	d029      	beq.n	8009dc2 <_dtoa_r+0x9ba>
 8009d6e:	f1ba 0f00 	cmp.w	sl, #0
 8009d72:	dd01      	ble.n	8009d78 <_dtoa_r+0x970>
 8009d74:	9b05      	ldr	r3, [sp, #20]
 8009d76:	3331      	adds	r3, #49	; 0x31
 8009d78:	9a02      	ldr	r2, [sp, #8]
 8009d7a:	7013      	strb	r3, [r2, #0]
 8009d7c:	e774      	b.n	8009c68 <_dtoa_r+0x860>
 8009d7e:	4638      	mov	r0, r7
 8009d80:	e7b8      	b.n	8009cf4 <_dtoa_r+0x8ec>
 8009d82:	2201      	movs	r2, #1
 8009d84:	e7e1      	b.n	8009d4a <_dtoa_r+0x942>
 8009d86:	f1ba 0f00 	cmp.w	sl, #0
 8009d8a:	db06      	blt.n	8009d9a <_dtoa_r+0x992>
 8009d8c:	9906      	ldr	r1, [sp, #24]
 8009d8e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009d92:	9907      	ldr	r1, [sp, #28]
 8009d94:	ea5a 0101 	orrs.w	r1, sl, r1
 8009d98:	d120      	bne.n	8009ddc <_dtoa_r+0x9d4>
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	ddec      	ble.n	8009d78 <_dtoa_r+0x970>
 8009d9e:	4629      	mov	r1, r5
 8009da0:	2201      	movs	r2, #1
 8009da2:	4630      	mov	r0, r6
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	f000 fe95 	bl	800aad4 <__lshift>
 8009daa:	4621      	mov	r1, r4
 8009dac:	4605      	mov	r5, r0
 8009dae:	f000 ff01 	bl	800abb4 <__mcmp>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	dc02      	bgt.n	8009dbe <_dtoa_r+0x9b6>
 8009db8:	d1de      	bne.n	8009d78 <_dtoa_r+0x970>
 8009dba:	07da      	lsls	r2, r3, #31
 8009dbc:	d5dc      	bpl.n	8009d78 <_dtoa_r+0x970>
 8009dbe:	2b39      	cmp	r3, #57	; 0x39
 8009dc0:	d1d8      	bne.n	8009d74 <_dtoa_r+0x96c>
 8009dc2:	9a02      	ldr	r2, [sp, #8]
 8009dc4:	2339      	movs	r3, #57	; 0x39
 8009dc6:	7013      	strb	r3, [r2, #0]
 8009dc8:	4643      	mov	r3, r8
 8009dca:	4698      	mov	r8, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009dd2:	2a39      	cmp	r2, #57	; 0x39
 8009dd4:	d051      	beq.n	8009e7a <_dtoa_r+0xa72>
 8009dd6:	3201      	adds	r2, #1
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	e745      	b.n	8009c68 <_dtoa_r+0x860>
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	dd03      	ble.n	8009de8 <_dtoa_r+0x9e0>
 8009de0:	2b39      	cmp	r3, #57	; 0x39
 8009de2:	d0ee      	beq.n	8009dc2 <_dtoa_r+0x9ba>
 8009de4:	3301      	adds	r3, #1
 8009de6:	e7c7      	b.n	8009d78 <_dtoa_r+0x970>
 8009de8:	9a04      	ldr	r2, [sp, #16]
 8009dea:	9908      	ldr	r1, [sp, #32]
 8009dec:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009df0:	428a      	cmp	r2, r1
 8009df2:	d02b      	beq.n	8009e4c <_dtoa_r+0xa44>
 8009df4:	4629      	mov	r1, r5
 8009df6:	2300      	movs	r3, #0
 8009df8:	220a      	movs	r2, #10
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f000 fc70 	bl	800a6e0 <__multadd>
 8009e00:	45b9      	cmp	r9, r7
 8009e02:	4605      	mov	r5, r0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	f04f 020a 	mov.w	r2, #10
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4630      	mov	r0, r6
 8009e10:	d107      	bne.n	8009e22 <_dtoa_r+0xa1a>
 8009e12:	f000 fc65 	bl	800a6e0 <__multadd>
 8009e16:	4681      	mov	r9, r0
 8009e18:	4607      	mov	r7, r0
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	9304      	str	r3, [sp, #16]
 8009e20:	e774      	b.n	8009d0c <_dtoa_r+0x904>
 8009e22:	f000 fc5d 	bl	800a6e0 <__multadd>
 8009e26:	4639      	mov	r1, r7
 8009e28:	4681      	mov	r9, r0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	220a      	movs	r2, #10
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f000 fc56 	bl	800a6e0 <__multadd>
 8009e34:	4607      	mov	r7, r0
 8009e36:	e7f0      	b.n	8009e1a <_dtoa_r+0xa12>
 8009e38:	f1ba 0f00 	cmp.w	sl, #0
 8009e3c:	9a01      	ldr	r2, [sp, #4]
 8009e3e:	bfcc      	ite	gt
 8009e40:	46d0      	movgt	r8, sl
 8009e42:	f04f 0801 	movle.w	r8, #1
 8009e46:	4490      	add	r8, r2
 8009e48:	f04f 0900 	mov.w	r9, #0
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4630      	mov	r0, r6
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	f000 fe3e 	bl	800aad4 <__lshift>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	f000 feaa 	bl	800abb4 <__mcmp>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dcb1      	bgt.n	8009dc8 <_dtoa_r+0x9c0>
 8009e64:	d102      	bne.n	8009e6c <_dtoa_r+0xa64>
 8009e66:	9b02      	ldr	r3, [sp, #8]
 8009e68:	07db      	lsls	r3, r3, #31
 8009e6a:	d4ad      	bmi.n	8009dc8 <_dtoa_r+0x9c0>
 8009e6c:	4643      	mov	r3, r8
 8009e6e:	4698      	mov	r8, r3
 8009e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e74:	2a30      	cmp	r2, #48	; 0x30
 8009e76:	d0fa      	beq.n	8009e6e <_dtoa_r+0xa66>
 8009e78:	e6f6      	b.n	8009c68 <_dtoa_r+0x860>
 8009e7a:	9a01      	ldr	r2, [sp, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d1a4      	bne.n	8009dca <_dtoa_r+0x9c2>
 8009e80:	f10b 0b01 	add.w	fp, fp, #1
 8009e84:	2331      	movs	r3, #49	; 0x31
 8009e86:	e778      	b.n	8009d7a <_dtoa_r+0x972>
 8009e88:	4b14      	ldr	r3, [pc, #80]	; (8009edc <_dtoa_r+0xad4>)
 8009e8a:	f7ff bb27 	b.w	80094dc <_dtoa_r+0xd4>
 8009e8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f47f ab03 	bne.w	800949c <_dtoa_r+0x94>
 8009e96:	4b12      	ldr	r3, [pc, #72]	; (8009ee0 <_dtoa_r+0xad8>)
 8009e98:	f7ff bb20 	b.w	80094dc <_dtoa_r+0xd4>
 8009e9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ea0:	dc03      	bgt.n	8009eaa <_dtoa_r+0xaa2>
 8009ea2:	9b06      	ldr	r3, [sp, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	f73f aec7 	bgt.w	8009c38 <_dtoa_r+0x830>
 8009eaa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f7ff fa1d 	bl	80092f0 <quorem>
 8009eb6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009eba:	f808 3b01 	strb.w	r3, [r8], #1
 8009ebe:	9a01      	ldr	r2, [sp, #4]
 8009ec0:	eba8 0202 	sub.w	r2, r8, r2
 8009ec4:	4592      	cmp	sl, r2
 8009ec6:	ddb7      	ble.n	8009e38 <_dtoa_r+0xa30>
 8009ec8:	4629      	mov	r1, r5
 8009eca:	2300      	movs	r3, #0
 8009ecc:	220a      	movs	r2, #10
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 fc06 	bl	800a6e0 <__multadd>
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	e7ea      	b.n	8009eae <_dtoa_r+0xaa6>
 8009ed8:	08031ec0 	.word	0x08031ec0
 8009edc:	08031cc4 	.word	0x08031cc4
 8009ee0:	08031e41 	.word	0x08031e41

08009ee4 <rshift>:
 8009ee4:	6903      	ldr	r3, [r0, #16]
 8009ee6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ef2:	f100 0414 	add.w	r4, r0, #20
 8009ef6:	dd45      	ble.n	8009f84 <rshift+0xa0>
 8009ef8:	f011 011f 	ands.w	r1, r1, #31
 8009efc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f04:	d10c      	bne.n	8009f20 <rshift+0x3c>
 8009f06:	f100 0710 	add.w	r7, r0, #16
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	42b1      	cmp	r1, r6
 8009f0e:	d334      	bcc.n	8009f7a <rshift+0x96>
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	1eea      	subs	r2, r5, #3
 8009f16:	4296      	cmp	r6, r2
 8009f18:	bf38      	it	cc
 8009f1a:	2300      	movcc	r3, #0
 8009f1c:	4423      	add	r3, r4
 8009f1e:	e015      	b.n	8009f4c <rshift+0x68>
 8009f20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f24:	f1c1 0820 	rsb	r8, r1, #32
 8009f28:	40cf      	lsrs	r7, r1
 8009f2a:	f105 0e04 	add.w	lr, r5, #4
 8009f2e:	46a1      	mov	r9, r4
 8009f30:	4576      	cmp	r6, lr
 8009f32:	46f4      	mov	ip, lr
 8009f34:	d815      	bhi.n	8009f62 <rshift+0x7e>
 8009f36:	1a9a      	subs	r2, r3, r2
 8009f38:	0092      	lsls	r2, r2, #2
 8009f3a:	3a04      	subs	r2, #4
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	42ae      	cmp	r6, r5
 8009f40:	bf38      	it	cc
 8009f42:	2200      	movcc	r2, #0
 8009f44:	18a3      	adds	r3, r4, r2
 8009f46:	50a7      	str	r7, [r4, r2]
 8009f48:	b107      	cbz	r7, 8009f4c <rshift+0x68>
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	1b1a      	subs	r2, r3, r4
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f54:	bf08      	it	eq
 8009f56:	2300      	moveq	r3, #0
 8009f58:	6102      	str	r2, [r0, #16]
 8009f5a:	bf08      	it	eq
 8009f5c:	6143      	streq	r3, [r0, #20]
 8009f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f62:	f8dc c000 	ldr.w	ip, [ip]
 8009f66:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f6a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f6e:	f849 7b04 	str.w	r7, [r9], #4
 8009f72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f76:	40cf      	lsrs	r7, r1
 8009f78:	e7da      	b.n	8009f30 <rshift+0x4c>
 8009f7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f82:	e7c3      	b.n	8009f0c <rshift+0x28>
 8009f84:	4623      	mov	r3, r4
 8009f86:	e7e1      	b.n	8009f4c <rshift+0x68>

08009f88 <__hexdig_fun>:
 8009f88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d802      	bhi.n	8009f96 <__hexdig_fun+0xe>
 8009f90:	3820      	subs	r0, #32
 8009f92:	b2c0      	uxtb	r0, r0
 8009f94:	4770      	bx	lr
 8009f96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f9a:	2b05      	cmp	r3, #5
 8009f9c:	d801      	bhi.n	8009fa2 <__hexdig_fun+0x1a>
 8009f9e:	3847      	subs	r0, #71	; 0x47
 8009fa0:	e7f7      	b.n	8009f92 <__hexdig_fun+0xa>
 8009fa2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	d801      	bhi.n	8009fae <__hexdig_fun+0x26>
 8009faa:	3827      	subs	r0, #39	; 0x27
 8009fac:	e7f1      	b.n	8009f92 <__hexdig_fun+0xa>
 8009fae:	2000      	movs	r0, #0
 8009fb0:	4770      	bx	lr
	...

08009fb4 <__gethex>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	ed2d 8b02 	vpush	{d8}
 8009fbc:	b089      	sub	sp, #36	; 0x24
 8009fbe:	ee08 0a10 	vmov	s16, r0
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	4bb4      	ldr	r3, [pc, #720]	; (800a298 <__gethex+0x2e4>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	468b      	mov	fp, r1
 8009fce:	4690      	mov	r8, r2
 8009fd0:	f7f6 f936 	bl	8000240 <strlen>
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	f8db 2000 	ldr.w	r2, [fp]
 8009fda:	4403      	add	r3, r0
 8009fdc:	4682      	mov	sl, r0
 8009fde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	1c93      	adds	r3, r2, #2
 8009fe6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009fea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009fee:	32fe      	adds	r2, #254	; 0xfe
 8009ff0:	18d1      	adds	r1, r2, r3
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ff8:	9100      	str	r1, [sp, #0]
 8009ffa:	2830      	cmp	r0, #48	; 0x30
 8009ffc:	d0f8      	beq.n	8009ff0 <__gethex+0x3c>
 8009ffe:	f7ff ffc3 	bl	8009f88 <__hexdig_fun>
 800a002:	4604      	mov	r4, r0
 800a004:	2800      	cmp	r0, #0
 800a006:	d13a      	bne.n	800a07e <__gethex+0xca>
 800a008:	9901      	ldr	r1, [sp, #4]
 800a00a:	4652      	mov	r2, sl
 800a00c:	4638      	mov	r0, r7
 800a00e:	f001 fa2f 	bl	800b470 <strncmp>
 800a012:	4605      	mov	r5, r0
 800a014:	2800      	cmp	r0, #0
 800a016:	d168      	bne.n	800a0ea <__gethex+0x136>
 800a018:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a01c:	eb07 060a 	add.w	r6, r7, sl
 800a020:	f7ff ffb2 	bl	8009f88 <__hexdig_fun>
 800a024:	2800      	cmp	r0, #0
 800a026:	d062      	beq.n	800a0ee <__gethex+0x13a>
 800a028:	4633      	mov	r3, r6
 800a02a:	7818      	ldrb	r0, [r3, #0]
 800a02c:	2830      	cmp	r0, #48	; 0x30
 800a02e:	461f      	mov	r7, r3
 800a030:	f103 0301 	add.w	r3, r3, #1
 800a034:	d0f9      	beq.n	800a02a <__gethex+0x76>
 800a036:	f7ff ffa7 	bl	8009f88 <__hexdig_fun>
 800a03a:	2301      	movs	r3, #1
 800a03c:	fab0 f480 	clz	r4, r0
 800a040:	0964      	lsrs	r4, r4, #5
 800a042:	4635      	mov	r5, r6
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	463a      	mov	r2, r7
 800a048:	4616      	mov	r6, r2
 800a04a:	3201      	adds	r2, #1
 800a04c:	7830      	ldrb	r0, [r6, #0]
 800a04e:	f7ff ff9b 	bl	8009f88 <__hexdig_fun>
 800a052:	2800      	cmp	r0, #0
 800a054:	d1f8      	bne.n	800a048 <__gethex+0x94>
 800a056:	9901      	ldr	r1, [sp, #4]
 800a058:	4652      	mov	r2, sl
 800a05a:	4630      	mov	r0, r6
 800a05c:	f001 fa08 	bl	800b470 <strncmp>
 800a060:	b980      	cbnz	r0, 800a084 <__gethex+0xd0>
 800a062:	b94d      	cbnz	r5, 800a078 <__gethex+0xc4>
 800a064:	eb06 050a 	add.w	r5, r6, sl
 800a068:	462a      	mov	r2, r5
 800a06a:	4616      	mov	r6, r2
 800a06c:	3201      	adds	r2, #1
 800a06e:	7830      	ldrb	r0, [r6, #0]
 800a070:	f7ff ff8a 	bl	8009f88 <__hexdig_fun>
 800a074:	2800      	cmp	r0, #0
 800a076:	d1f8      	bne.n	800a06a <__gethex+0xb6>
 800a078:	1bad      	subs	r5, r5, r6
 800a07a:	00ad      	lsls	r5, r5, #2
 800a07c:	e004      	b.n	800a088 <__gethex+0xd4>
 800a07e:	2400      	movs	r4, #0
 800a080:	4625      	mov	r5, r4
 800a082:	e7e0      	b.n	800a046 <__gethex+0x92>
 800a084:	2d00      	cmp	r5, #0
 800a086:	d1f7      	bne.n	800a078 <__gethex+0xc4>
 800a088:	7833      	ldrb	r3, [r6, #0]
 800a08a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a08e:	2b50      	cmp	r3, #80	; 0x50
 800a090:	d13b      	bne.n	800a10a <__gethex+0x156>
 800a092:	7873      	ldrb	r3, [r6, #1]
 800a094:	2b2b      	cmp	r3, #43	; 0x2b
 800a096:	d02c      	beq.n	800a0f2 <__gethex+0x13e>
 800a098:	2b2d      	cmp	r3, #45	; 0x2d
 800a09a:	d02e      	beq.n	800a0fa <__gethex+0x146>
 800a09c:	1c71      	adds	r1, r6, #1
 800a09e:	f04f 0900 	mov.w	r9, #0
 800a0a2:	7808      	ldrb	r0, [r1, #0]
 800a0a4:	f7ff ff70 	bl	8009f88 <__hexdig_fun>
 800a0a8:	1e43      	subs	r3, r0, #1
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b18      	cmp	r3, #24
 800a0ae:	d82c      	bhi.n	800a10a <__gethex+0x156>
 800a0b0:	f1a0 0210 	sub.w	r2, r0, #16
 800a0b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0b8:	f7ff ff66 	bl	8009f88 <__hexdig_fun>
 800a0bc:	1e43      	subs	r3, r0, #1
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b18      	cmp	r3, #24
 800a0c2:	d91d      	bls.n	800a100 <__gethex+0x14c>
 800a0c4:	f1b9 0f00 	cmp.w	r9, #0
 800a0c8:	d000      	beq.n	800a0cc <__gethex+0x118>
 800a0ca:	4252      	negs	r2, r2
 800a0cc:	4415      	add	r5, r2
 800a0ce:	f8cb 1000 	str.w	r1, [fp]
 800a0d2:	b1e4      	cbz	r4, 800a10e <__gethex+0x15a>
 800a0d4:	9b00      	ldr	r3, [sp, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bf14      	ite	ne
 800a0da:	2700      	movne	r7, #0
 800a0dc:	2706      	moveq	r7, #6
 800a0de:	4638      	mov	r0, r7
 800a0e0:	b009      	add	sp, #36	; 0x24
 800a0e2:	ecbd 8b02 	vpop	{d8}
 800a0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ea:	463e      	mov	r6, r7
 800a0ec:	4625      	mov	r5, r4
 800a0ee:	2401      	movs	r4, #1
 800a0f0:	e7ca      	b.n	800a088 <__gethex+0xd4>
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	1cb1      	adds	r1, r6, #2
 800a0f8:	e7d3      	b.n	800a0a2 <__gethex+0xee>
 800a0fa:	f04f 0901 	mov.w	r9, #1
 800a0fe:	e7fa      	b.n	800a0f6 <__gethex+0x142>
 800a100:	230a      	movs	r3, #10
 800a102:	fb03 0202 	mla	r2, r3, r2, r0
 800a106:	3a10      	subs	r2, #16
 800a108:	e7d4      	b.n	800a0b4 <__gethex+0x100>
 800a10a:	4631      	mov	r1, r6
 800a10c:	e7df      	b.n	800a0ce <__gethex+0x11a>
 800a10e:	1bf3      	subs	r3, r6, r7
 800a110:	3b01      	subs	r3, #1
 800a112:	4621      	mov	r1, r4
 800a114:	2b07      	cmp	r3, #7
 800a116:	dc0b      	bgt.n	800a130 <__gethex+0x17c>
 800a118:	ee18 0a10 	vmov	r0, s16
 800a11c:	f000 fa7e 	bl	800a61c <_Balloc>
 800a120:	4604      	mov	r4, r0
 800a122:	b940      	cbnz	r0, 800a136 <__gethex+0x182>
 800a124:	4b5d      	ldr	r3, [pc, #372]	; (800a29c <__gethex+0x2e8>)
 800a126:	4602      	mov	r2, r0
 800a128:	21de      	movs	r1, #222	; 0xde
 800a12a:	485d      	ldr	r0, [pc, #372]	; (800a2a0 <__gethex+0x2ec>)
 800a12c:	f001 f9c2 	bl	800b4b4 <__assert_func>
 800a130:	3101      	adds	r1, #1
 800a132:	105b      	asrs	r3, r3, #1
 800a134:	e7ee      	b.n	800a114 <__gethex+0x160>
 800a136:	f100 0914 	add.w	r9, r0, #20
 800a13a:	f04f 0b00 	mov.w	fp, #0
 800a13e:	f1ca 0301 	rsb	r3, sl, #1
 800a142:	f8cd 9008 	str.w	r9, [sp, #8]
 800a146:	f8cd b000 	str.w	fp, [sp]
 800a14a:	9306      	str	r3, [sp, #24]
 800a14c:	42b7      	cmp	r7, r6
 800a14e:	d340      	bcc.n	800a1d2 <__gethex+0x21e>
 800a150:	9802      	ldr	r0, [sp, #8]
 800a152:	9b00      	ldr	r3, [sp, #0]
 800a154:	f840 3b04 	str.w	r3, [r0], #4
 800a158:	eba0 0009 	sub.w	r0, r0, r9
 800a15c:	1080      	asrs	r0, r0, #2
 800a15e:	0146      	lsls	r6, r0, #5
 800a160:	6120      	str	r0, [r4, #16]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fb4c 	bl	800a800 <__hi0bits>
 800a168:	1a30      	subs	r0, r6, r0
 800a16a:	f8d8 6000 	ldr.w	r6, [r8]
 800a16e:	42b0      	cmp	r0, r6
 800a170:	dd63      	ble.n	800a23a <__gethex+0x286>
 800a172:	1b87      	subs	r7, r0, r6
 800a174:	4639      	mov	r1, r7
 800a176:	4620      	mov	r0, r4
 800a178:	f000 feed 	bl	800af56 <__any_on>
 800a17c:	4682      	mov	sl, r0
 800a17e:	b1a8      	cbz	r0, 800a1ac <__gethex+0x1f8>
 800a180:	1e7b      	subs	r3, r7, #1
 800a182:	1159      	asrs	r1, r3, #5
 800a184:	f003 021f 	and.w	r2, r3, #31
 800a188:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a18c:	f04f 0a01 	mov.w	sl, #1
 800a190:	fa0a f202 	lsl.w	r2, sl, r2
 800a194:	420a      	tst	r2, r1
 800a196:	d009      	beq.n	800a1ac <__gethex+0x1f8>
 800a198:	4553      	cmp	r3, sl
 800a19a:	dd05      	ble.n	800a1a8 <__gethex+0x1f4>
 800a19c:	1eb9      	subs	r1, r7, #2
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fed9 	bl	800af56 <__any_on>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d145      	bne.n	800a234 <__gethex+0x280>
 800a1a8:	f04f 0a02 	mov.w	sl, #2
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f7ff fe98 	bl	8009ee4 <rshift>
 800a1b4:	443d      	add	r5, r7
 800a1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1ba:	42ab      	cmp	r3, r5
 800a1bc:	da4c      	bge.n	800a258 <__gethex+0x2a4>
 800a1be:	ee18 0a10 	vmov	r0, s16
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	f000 fa6a 	bl	800a69c <_Bfree>
 800a1c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	27a3      	movs	r7, #163	; 0xa3
 800a1d0:	e785      	b.n	800a0de <__gethex+0x12a>
 800a1d2:	1e73      	subs	r3, r6, #1
 800a1d4:	9a05      	ldr	r2, [sp, #20]
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d019      	beq.n	800a214 <__gethex+0x260>
 800a1e0:	f1bb 0f20 	cmp.w	fp, #32
 800a1e4:	d107      	bne.n	800a1f6 <__gethex+0x242>
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	9a00      	ldr	r2, [sp, #0]
 800a1ea:	f843 2b04 	str.w	r2, [r3], #4
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	469b      	mov	fp, r3
 800a1f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a1fa:	f7ff fec5 	bl	8009f88 <__hexdig_fun>
 800a1fe:	9b00      	ldr	r3, [sp, #0]
 800a200:	f000 000f 	and.w	r0, r0, #15
 800a204:	fa00 f00b 	lsl.w	r0, r0, fp
 800a208:	4303      	orrs	r3, r0
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	f10b 0b04 	add.w	fp, fp, #4
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	e00d      	b.n	800a230 <__gethex+0x27c>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	9a06      	ldr	r2, [sp, #24]
 800a218:	4413      	add	r3, r2
 800a21a:	42bb      	cmp	r3, r7
 800a21c:	d3e0      	bcc.n	800a1e0 <__gethex+0x22c>
 800a21e:	4618      	mov	r0, r3
 800a220:	9901      	ldr	r1, [sp, #4]
 800a222:	9307      	str	r3, [sp, #28]
 800a224:	4652      	mov	r2, sl
 800a226:	f001 f923 	bl	800b470 <strncmp>
 800a22a:	9b07      	ldr	r3, [sp, #28]
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d1d7      	bne.n	800a1e0 <__gethex+0x22c>
 800a230:	461e      	mov	r6, r3
 800a232:	e78b      	b.n	800a14c <__gethex+0x198>
 800a234:	f04f 0a03 	mov.w	sl, #3
 800a238:	e7b8      	b.n	800a1ac <__gethex+0x1f8>
 800a23a:	da0a      	bge.n	800a252 <__gethex+0x29e>
 800a23c:	1a37      	subs	r7, r6, r0
 800a23e:	4621      	mov	r1, r4
 800a240:	ee18 0a10 	vmov	r0, s16
 800a244:	463a      	mov	r2, r7
 800a246:	f000 fc45 	bl	800aad4 <__lshift>
 800a24a:	1bed      	subs	r5, r5, r7
 800a24c:	4604      	mov	r4, r0
 800a24e:	f100 0914 	add.w	r9, r0, #20
 800a252:	f04f 0a00 	mov.w	sl, #0
 800a256:	e7ae      	b.n	800a1b6 <__gethex+0x202>
 800a258:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a25c:	42a8      	cmp	r0, r5
 800a25e:	dd72      	ble.n	800a346 <__gethex+0x392>
 800a260:	1b45      	subs	r5, r0, r5
 800a262:	42ae      	cmp	r6, r5
 800a264:	dc36      	bgt.n	800a2d4 <__gethex+0x320>
 800a266:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d02a      	beq.n	800a2c4 <__gethex+0x310>
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d02c      	beq.n	800a2cc <__gethex+0x318>
 800a272:	2b01      	cmp	r3, #1
 800a274:	d11c      	bne.n	800a2b0 <__gethex+0x2fc>
 800a276:	42ae      	cmp	r6, r5
 800a278:	d11a      	bne.n	800a2b0 <__gethex+0x2fc>
 800a27a:	2e01      	cmp	r6, #1
 800a27c:	d112      	bne.n	800a2a4 <__gethex+0x2f0>
 800a27e:	9a04      	ldr	r2, [sp, #16]
 800a280:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	2301      	movs	r3, #1
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	f8c9 3000 	str.w	r3, [r9]
 800a28e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a290:	2762      	movs	r7, #98	; 0x62
 800a292:	601c      	str	r4, [r3, #0]
 800a294:	e723      	b.n	800a0de <__gethex+0x12a>
 800a296:	bf00      	nop
 800a298:	08031f38 	.word	0x08031f38
 800a29c:	08031ec0 	.word	0x08031ec0
 800a2a0:	08031ed1 	.word	0x08031ed1
 800a2a4:	1e71      	subs	r1, r6, #1
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 fe55 	bl	800af56 <__any_on>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d1e6      	bne.n	800a27e <__gethex+0x2ca>
 800a2b0:	ee18 0a10 	vmov	r0, s16
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	f000 f9f1 	bl	800a69c <_Bfree>
 800a2ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2bc:	2300      	movs	r3, #0
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	2750      	movs	r7, #80	; 0x50
 800a2c2:	e70c      	b.n	800a0de <__gethex+0x12a>
 800a2c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f2      	bne.n	800a2b0 <__gethex+0x2fc>
 800a2ca:	e7d8      	b.n	800a27e <__gethex+0x2ca>
 800a2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1d5      	bne.n	800a27e <__gethex+0x2ca>
 800a2d2:	e7ed      	b.n	800a2b0 <__gethex+0x2fc>
 800a2d4:	1e6f      	subs	r7, r5, #1
 800a2d6:	f1ba 0f00 	cmp.w	sl, #0
 800a2da:	d131      	bne.n	800a340 <__gethex+0x38c>
 800a2dc:	b127      	cbz	r7, 800a2e8 <__gethex+0x334>
 800a2de:	4639      	mov	r1, r7
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f000 fe38 	bl	800af56 <__any_on>
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	117b      	asrs	r3, r7, #5
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a2f0:	f007 071f 	and.w	r7, r7, #31
 800a2f4:	fa01 f707 	lsl.w	r7, r1, r7
 800a2f8:	421f      	tst	r7, r3
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bf18      	it	ne
 800a300:	f04a 0a02 	orrne.w	sl, sl, #2
 800a304:	1b76      	subs	r6, r6, r5
 800a306:	f7ff fded 	bl	8009ee4 <rshift>
 800a30a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a30e:	2702      	movs	r7, #2
 800a310:	f1ba 0f00 	cmp.w	sl, #0
 800a314:	d048      	beq.n	800a3a8 <__gethex+0x3f4>
 800a316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d015      	beq.n	800a34a <__gethex+0x396>
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d017      	beq.n	800a352 <__gethex+0x39e>
 800a322:	2b01      	cmp	r3, #1
 800a324:	d109      	bne.n	800a33a <__gethex+0x386>
 800a326:	f01a 0f02 	tst.w	sl, #2
 800a32a:	d006      	beq.n	800a33a <__gethex+0x386>
 800a32c:	f8d9 0000 	ldr.w	r0, [r9]
 800a330:	ea4a 0a00 	orr.w	sl, sl, r0
 800a334:	f01a 0f01 	tst.w	sl, #1
 800a338:	d10e      	bne.n	800a358 <__gethex+0x3a4>
 800a33a:	f047 0710 	orr.w	r7, r7, #16
 800a33e:	e033      	b.n	800a3a8 <__gethex+0x3f4>
 800a340:	f04f 0a01 	mov.w	sl, #1
 800a344:	e7d0      	b.n	800a2e8 <__gethex+0x334>
 800a346:	2701      	movs	r7, #1
 800a348:	e7e2      	b.n	800a310 <__gethex+0x35c>
 800a34a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a34c:	f1c3 0301 	rsb	r3, r3, #1
 800a350:	9315      	str	r3, [sp, #84]	; 0x54
 800a352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0f0      	beq.n	800a33a <__gethex+0x386>
 800a358:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a35c:	f104 0314 	add.w	r3, r4, #20
 800a360:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a364:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a368:	f04f 0c00 	mov.w	ip, #0
 800a36c:	4618      	mov	r0, r3
 800a36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a372:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a376:	d01c      	beq.n	800a3b2 <__gethex+0x3fe>
 800a378:	3201      	adds	r2, #1
 800a37a:	6002      	str	r2, [r0, #0]
 800a37c:	2f02      	cmp	r7, #2
 800a37e:	f104 0314 	add.w	r3, r4, #20
 800a382:	d13f      	bne.n	800a404 <__gethex+0x450>
 800a384:	f8d8 2000 	ldr.w	r2, [r8]
 800a388:	3a01      	subs	r2, #1
 800a38a:	42b2      	cmp	r2, r6
 800a38c:	d10a      	bne.n	800a3a4 <__gethex+0x3f0>
 800a38e:	1171      	asrs	r1, r6, #5
 800a390:	2201      	movs	r2, #1
 800a392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a396:	f006 061f 	and.w	r6, r6, #31
 800a39a:	fa02 f606 	lsl.w	r6, r2, r6
 800a39e:	421e      	tst	r6, r3
 800a3a0:	bf18      	it	ne
 800a3a2:	4617      	movne	r7, r2
 800a3a4:	f047 0720 	orr.w	r7, r7, #32
 800a3a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3aa:	601c      	str	r4, [r3, #0]
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	601d      	str	r5, [r3, #0]
 800a3b0:	e695      	b.n	800a0de <__gethex+0x12a>
 800a3b2:	4299      	cmp	r1, r3
 800a3b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a3b8:	d8d8      	bhi.n	800a36c <__gethex+0x3b8>
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	459b      	cmp	fp, r3
 800a3be:	db19      	blt.n	800a3f4 <__gethex+0x440>
 800a3c0:	6861      	ldr	r1, [r4, #4]
 800a3c2:	ee18 0a10 	vmov	r0, s16
 800a3c6:	3101      	adds	r1, #1
 800a3c8:	f000 f928 	bl	800a61c <_Balloc>
 800a3cc:	4681      	mov	r9, r0
 800a3ce:	b918      	cbnz	r0, 800a3d8 <__gethex+0x424>
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <__gethex+0x488>)
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	2184      	movs	r1, #132	; 0x84
 800a3d6:	e6a8      	b.n	800a12a <__gethex+0x176>
 800a3d8:	6922      	ldr	r2, [r4, #16]
 800a3da:	3202      	adds	r2, #2
 800a3dc:	f104 010c 	add.w	r1, r4, #12
 800a3e0:	0092      	lsls	r2, r2, #2
 800a3e2:	300c      	adds	r0, #12
 800a3e4:	f000 f90c 	bl	800a600 <memcpy>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	ee18 0a10 	vmov	r0, s16
 800a3ee:	f000 f955 	bl	800a69c <_Bfree>
 800a3f2:	464c      	mov	r4, r9
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3fc:	6122      	str	r2, [r4, #16]
 800a3fe:	2201      	movs	r2, #1
 800a400:	615a      	str	r2, [r3, #20]
 800a402:	e7bb      	b.n	800a37c <__gethex+0x3c8>
 800a404:	6922      	ldr	r2, [r4, #16]
 800a406:	455a      	cmp	r2, fp
 800a408:	dd0b      	ble.n	800a422 <__gethex+0x46e>
 800a40a:	2101      	movs	r1, #1
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7ff fd69 	bl	8009ee4 <rshift>
 800a412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a416:	3501      	adds	r5, #1
 800a418:	42ab      	cmp	r3, r5
 800a41a:	f6ff aed0 	blt.w	800a1be <__gethex+0x20a>
 800a41e:	2701      	movs	r7, #1
 800a420:	e7c0      	b.n	800a3a4 <__gethex+0x3f0>
 800a422:	f016 061f 	ands.w	r6, r6, #31
 800a426:	d0fa      	beq.n	800a41e <__gethex+0x46a>
 800a428:	4453      	add	r3, sl
 800a42a:	f1c6 0620 	rsb	r6, r6, #32
 800a42e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a432:	f000 f9e5 	bl	800a800 <__hi0bits>
 800a436:	42b0      	cmp	r0, r6
 800a438:	dbe7      	blt.n	800a40a <__gethex+0x456>
 800a43a:	e7f0      	b.n	800a41e <__gethex+0x46a>
 800a43c:	08031ec0 	.word	0x08031ec0

0800a440 <L_shift>:
 800a440:	f1c2 0208 	rsb	r2, r2, #8
 800a444:	0092      	lsls	r2, r2, #2
 800a446:	b570      	push	{r4, r5, r6, lr}
 800a448:	f1c2 0620 	rsb	r6, r2, #32
 800a44c:	6843      	ldr	r3, [r0, #4]
 800a44e:	6804      	ldr	r4, [r0, #0]
 800a450:	fa03 f506 	lsl.w	r5, r3, r6
 800a454:	432c      	orrs	r4, r5
 800a456:	40d3      	lsrs	r3, r2
 800a458:	6004      	str	r4, [r0, #0]
 800a45a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a45e:	4288      	cmp	r0, r1
 800a460:	d3f4      	bcc.n	800a44c <L_shift+0xc>
 800a462:	bd70      	pop	{r4, r5, r6, pc}

0800a464 <__match>:
 800a464:	b530      	push	{r4, r5, lr}
 800a466:	6803      	ldr	r3, [r0, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a46e:	b914      	cbnz	r4, 800a476 <__match+0x12>
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	2001      	movs	r0, #1
 800a474:	bd30      	pop	{r4, r5, pc}
 800a476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a47e:	2d19      	cmp	r5, #25
 800a480:	bf98      	it	ls
 800a482:	3220      	addls	r2, #32
 800a484:	42a2      	cmp	r2, r4
 800a486:	d0f0      	beq.n	800a46a <__match+0x6>
 800a488:	2000      	movs	r0, #0
 800a48a:	e7f3      	b.n	800a474 <__match+0x10>

0800a48c <__hexnan>:
 800a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	680b      	ldr	r3, [r1, #0]
 800a492:	115e      	asrs	r6, r3, #5
 800a494:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a498:	f013 031f 	ands.w	r3, r3, #31
 800a49c:	b087      	sub	sp, #28
 800a49e:	bf18      	it	ne
 800a4a0:	3604      	addne	r6, #4
 800a4a2:	2500      	movs	r5, #0
 800a4a4:	1f37      	subs	r7, r6, #4
 800a4a6:	4690      	mov	r8, r2
 800a4a8:	6802      	ldr	r2, [r0, #0]
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	4682      	mov	sl, r0
 800a4ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4b2:	46b9      	mov	r9, r7
 800a4b4:	463c      	mov	r4, r7
 800a4b6:	9502      	str	r5, [sp, #8]
 800a4b8:	46ab      	mov	fp, r5
 800a4ba:	7851      	ldrb	r1, [r2, #1]
 800a4bc:	1c53      	adds	r3, r2, #1
 800a4be:	9303      	str	r3, [sp, #12]
 800a4c0:	b341      	cbz	r1, 800a514 <__hexnan+0x88>
 800a4c2:	4608      	mov	r0, r1
 800a4c4:	9205      	str	r2, [sp, #20]
 800a4c6:	9104      	str	r1, [sp, #16]
 800a4c8:	f7ff fd5e 	bl	8009f88 <__hexdig_fun>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d14f      	bne.n	800a570 <__hexnan+0xe4>
 800a4d0:	9904      	ldr	r1, [sp, #16]
 800a4d2:	9a05      	ldr	r2, [sp, #20]
 800a4d4:	2920      	cmp	r1, #32
 800a4d6:	d818      	bhi.n	800a50a <__hexnan+0x7e>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	459b      	cmp	fp, r3
 800a4dc:	dd13      	ble.n	800a506 <__hexnan+0x7a>
 800a4de:	454c      	cmp	r4, r9
 800a4e0:	d206      	bcs.n	800a4f0 <__hexnan+0x64>
 800a4e2:	2d07      	cmp	r5, #7
 800a4e4:	dc04      	bgt.n	800a4f0 <__hexnan+0x64>
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f7ff ffa8 	bl	800a440 <L_shift>
 800a4f0:	4544      	cmp	r4, r8
 800a4f2:	d950      	bls.n	800a596 <__hexnan+0x10a>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f1a4 0904 	sub.w	r9, r4, #4
 800a4fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4fe:	f8cd b008 	str.w	fp, [sp, #8]
 800a502:	464c      	mov	r4, r9
 800a504:	461d      	mov	r5, r3
 800a506:	9a03      	ldr	r2, [sp, #12]
 800a508:	e7d7      	b.n	800a4ba <__hexnan+0x2e>
 800a50a:	2929      	cmp	r1, #41	; 0x29
 800a50c:	d156      	bne.n	800a5bc <__hexnan+0x130>
 800a50e:	3202      	adds	r2, #2
 800a510:	f8ca 2000 	str.w	r2, [sl]
 800a514:	f1bb 0f00 	cmp.w	fp, #0
 800a518:	d050      	beq.n	800a5bc <__hexnan+0x130>
 800a51a:	454c      	cmp	r4, r9
 800a51c:	d206      	bcs.n	800a52c <__hexnan+0xa0>
 800a51e:	2d07      	cmp	r5, #7
 800a520:	dc04      	bgt.n	800a52c <__hexnan+0xa0>
 800a522:	462a      	mov	r2, r5
 800a524:	4649      	mov	r1, r9
 800a526:	4620      	mov	r0, r4
 800a528:	f7ff ff8a 	bl	800a440 <L_shift>
 800a52c:	4544      	cmp	r4, r8
 800a52e:	d934      	bls.n	800a59a <__hexnan+0x10e>
 800a530:	f1a8 0204 	sub.w	r2, r8, #4
 800a534:	4623      	mov	r3, r4
 800a536:	f853 1b04 	ldr.w	r1, [r3], #4
 800a53a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a53e:	429f      	cmp	r7, r3
 800a540:	d2f9      	bcs.n	800a536 <__hexnan+0xaa>
 800a542:	1b3b      	subs	r3, r7, r4
 800a544:	f023 0303 	bic.w	r3, r3, #3
 800a548:	3304      	adds	r3, #4
 800a54a:	3401      	adds	r4, #1
 800a54c:	3e03      	subs	r6, #3
 800a54e:	42b4      	cmp	r4, r6
 800a550:	bf88      	it	hi
 800a552:	2304      	movhi	r3, #4
 800a554:	4443      	add	r3, r8
 800a556:	2200      	movs	r2, #0
 800a558:	f843 2b04 	str.w	r2, [r3], #4
 800a55c:	429f      	cmp	r7, r3
 800a55e:	d2fb      	bcs.n	800a558 <__hexnan+0xcc>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	b91b      	cbnz	r3, 800a56c <__hexnan+0xe0>
 800a564:	4547      	cmp	r7, r8
 800a566:	d127      	bne.n	800a5b8 <__hexnan+0x12c>
 800a568:	2301      	movs	r3, #1
 800a56a:	603b      	str	r3, [r7, #0]
 800a56c:	2005      	movs	r0, #5
 800a56e:	e026      	b.n	800a5be <__hexnan+0x132>
 800a570:	3501      	adds	r5, #1
 800a572:	2d08      	cmp	r5, #8
 800a574:	f10b 0b01 	add.w	fp, fp, #1
 800a578:	dd06      	ble.n	800a588 <__hexnan+0xfc>
 800a57a:	4544      	cmp	r4, r8
 800a57c:	d9c3      	bls.n	800a506 <__hexnan+0x7a>
 800a57e:	2300      	movs	r3, #0
 800a580:	f844 3c04 	str.w	r3, [r4, #-4]
 800a584:	2501      	movs	r5, #1
 800a586:	3c04      	subs	r4, #4
 800a588:	6822      	ldr	r2, [r4, #0]
 800a58a:	f000 000f 	and.w	r0, r0, #15
 800a58e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a592:	6022      	str	r2, [r4, #0]
 800a594:	e7b7      	b.n	800a506 <__hexnan+0x7a>
 800a596:	2508      	movs	r5, #8
 800a598:	e7b5      	b.n	800a506 <__hexnan+0x7a>
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0df      	beq.n	800a560 <__hexnan+0xd4>
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a4:	f1c3 0320 	rsb	r3, r3, #32
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5b0:	401a      	ands	r2, r3
 800a5b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a5b6:	e7d3      	b.n	800a560 <__hexnan+0xd4>
 800a5b8:	3f04      	subs	r7, #4
 800a5ba:	e7d1      	b.n	800a560 <__hexnan+0xd4>
 800a5bc:	2004      	movs	r0, #4
 800a5be:	b007      	add	sp, #28
 800a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5c4 <_localeconv_r>:
 800a5c4:	4800      	ldr	r0, [pc, #0]	; (800a5c8 <_localeconv_r+0x4>)
 800a5c6:	4770      	bx	lr
 800a5c8:	20000168 	.word	0x20000168

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 bd63 	b.w	800b09c <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	20000010 	.word	0x20000010

0800a5dc <__ascii_mbtowc>:
 800a5dc:	b082      	sub	sp, #8
 800a5de:	b901      	cbnz	r1, 800a5e2 <__ascii_mbtowc+0x6>
 800a5e0:	a901      	add	r1, sp, #4
 800a5e2:	b142      	cbz	r2, 800a5f6 <__ascii_mbtowc+0x1a>
 800a5e4:	b14b      	cbz	r3, 800a5fa <__ascii_mbtowc+0x1e>
 800a5e6:	7813      	ldrb	r3, [r2, #0]
 800a5e8:	600b      	str	r3, [r1, #0]
 800a5ea:	7812      	ldrb	r2, [r2, #0]
 800a5ec:	1e10      	subs	r0, r2, #0
 800a5ee:	bf18      	it	ne
 800a5f0:	2001      	movne	r0, #1
 800a5f2:	b002      	add	sp, #8
 800a5f4:	4770      	bx	lr
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	e7fb      	b.n	800a5f2 <__ascii_mbtowc+0x16>
 800a5fa:	f06f 0001 	mvn.w	r0, #1
 800a5fe:	e7f8      	b.n	800a5f2 <__ascii_mbtowc+0x16>

0800a600 <memcpy>:
 800a600:	440a      	add	r2, r1
 800a602:	4291      	cmp	r1, r2
 800a604:	f100 33ff 	add.w	r3, r0, #4294967295
 800a608:	d100      	bne.n	800a60c <memcpy+0xc>
 800a60a:	4770      	bx	lr
 800a60c:	b510      	push	{r4, lr}
 800a60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a616:	4291      	cmp	r1, r2
 800a618:	d1f9      	bne.n	800a60e <memcpy+0xe>
 800a61a:	bd10      	pop	{r4, pc}

0800a61c <_Balloc>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	b976      	cbnz	r6, 800a644 <_Balloc+0x28>
 800a626:	2010      	movs	r0, #16
 800a628:	f7ff ffd0 	bl	800a5cc <malloc>
 800a62c:	4602      	mov	r2, r0
 800a62e:	6260      	str	r0, [r4, #36]	; 0x24
 800a630:	b920      	cbnz	r0, 800a63c <_Balloc+0x20>
 800a632:	4b18      	ldr	r3, [pc, #96]	; (800a694 <_Balloc+0x78>)
 800a634:	4818      	ldr	r0, [pc, #96]	; (800a698 <_Balloc+0x7c>)
 800a636:	2166      	movs	r1, #102	; 0x66
 800a638:	f000 ff3c 	bl	800b4b4 <__assert_func>
 800a63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a640:	6006      	str	r6, [r0, #0]
 800a642:	60c6      	str	r6, [r0, #12]
 800a644:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a646:	68f3      	ldr	r3, [r6, #12]
 800a648:	b183      	cbz	r3, 800a66c <_Balloc+0x50>
 800a64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a652:	b9b8      	cbnz	r0, 800a684 <_Balloc+0x68>
 800a654:	2101      	movs	r1, #1
 800a656:	fa01 f605 	lsl.w	r6, r1, r5
 800a65a:	1d72      	adds	r2, r6, #5
 800a65c:	0092      	lsls	r2, r2, #2
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fc9a 	bl	800af98 <_calloc_r>
 800a664:	b160      	cbz	r0, 800a680 <_Balloc+0x64>
 800a666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a66a:	e00e      	b.n	800a68a <_Balloc+0x6e>
 800a66c:	2221      	movs	r2, #33	; 0x21
 800a66e:	2104      	movs	r1, #4
 800a670:	4620      	mov	r0, r4
 800a672:	f000 fc91 	bl	800af98 <_calloc_r>
 800a676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a678:	60f0      	str	r0, [r6, #12]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e4      	bne.n	800a64a <_Balloc+0x2e>
 800a680:	2000      	movs	r0, #0
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	6802      	ldr	r2, [r0, #0]
 800a686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a68a:	2300      	movs	r3, #0
 800a68c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a690:	e7f7      	b.n	800a682 <_Balloc+0x66>
 800a692:	bf00      	nop
 800a694:	08031e4e 	.word	0x08031e4e
 800a698:	08031f4c 	.word	0x08031f4c

0800a69c <_Bfree>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	b976      	cbnz	r6, 800a6c4 <_Bfree+0x28>
 800a6a6:	2010      	movs	r0, #16
 800a6a8:	f7ff ff90 	bl	800a5cc <malloc>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a6b0:	b920      	cbnz	r0, 800a6bc <_Bfree+0x20>
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <_Bfree+0x3c>)
 800a6b4:	4809      	ldr	r0, [pc, #36]	; (800a6dc <_Bfree+0x40>)
 800a6b6:	218a      	movs	r1, #138	; 0x8a
 800a6b8:	f000 fefc 	bl	800b4b4 <__assert_func>
 800a6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c0:	6006      	str	r6, [r0, #0]
 800a6c2:	60c6      	str	r6, [r0, #12]
 800a6c4:	b13c      	cbz	r4, 800a6d6 <_Bfree+0x3a>
 800a6c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6c8:	6862      	ldr	r2, [r4, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d0:	6021      	str	r1, [r4, #0]
 800a6d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	08031e4e 	.word	0x08031e4e
 800a6dc:	08031f4c 	.word	0x08031f4c

0800a6e0 <__multadd>:
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	690d      	ldr	r5, [r1, #16]
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	461e      	mov	r6, r3
 800a6ec:	f101 0c14 	add.w	ip, r1, #20
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a6f6:	b299      	uxth	r1, r3
 800a6f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a6fc:	0c1e      	lsrs	r6, r3, #16
 800a6fe:	0c0b      	lsrs	r3, r1, #16
 800a700:	fb02 3306 	mla	r3, r2, r6, r3
 800a704:	b289      	uxth	r1, r1
 800a706:	3001      	adds	r0, #1
 800a708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a70c:	4285      	cmp	r5, r0
 800a70e:	f84c 1b04 	str.w	r1, [ip], #4
 800a712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a716:	dcec      	bgt.n	800a6f2 <__multadd+0x12>
 800a718:	b30e      	cbz	r6, 800a75e <__multadd+0x7e>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	42ab      	cmp	r3, r5
 800a71e:	dc19      	bgt.n	800a754 <__multadd+0x74>
 800a720:	6861      	ldr	r1, [r4, #4]
 800a722:	4638      	mov	r0, r7
 800a724:	3101      	adds	r1, #1
 800a726:	f7ff ff79 	bl	800a61c <_Balloc>
 800a72a:	4680      	mov	r8, r0
 800a72c:	b928      	cbnz	r0, 800a73a <__multadd+0x5a>
 800a72e:	4602      	mov	r2, r0
 800a730:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <__multadd+0x84>)
 800a732:	480d      	ldr	r0, [pc, #52]	; (800a768 <__multadd+0x88>)
 800a734:	21b5      	movs	r1, #181	; 0xb5
 800a736:	f000 febd 	bl	800b4b4 <__assert_func>
 800a73a:	6922      	ldr	r2, [r4, #16]
 800a73c:	3202      	adds	r2, #2
 800a73e:	f104 010c 	add.w	r1, r4, #12
 800a742:	0092      	lsls	r2, r2, #2
 800a744:	300c      	adds	r0, #12
 800a746:	f7ff ff5b 	bl	800a600 <memcpy>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4638      	mov	r0, r7
 800a74e:	f7ff ffa5 	bl	800a69c <_Bfree>
 800a752:	4644      	mov	r4, r8
 800a754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a758:	3501      	adds	r5, #1
 800a75a:	615e      	str	r6, [r3, #20]
 800a75c:	6125      	str	r5, [r4, #16]
 800a75e:	4620      	mov	r0, r4
 800a760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a764:	08031ec0 	.word	0x08031ec0
 800a768:	08031f4c 	.word	0x08031f4c

0800a76c <__s2b>:
 800a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a770:	460c      	mov	r4, r1
 800a772:	4615      	mov	r5, r2
 800a774:	461f      	mov	r7, r3
 800a776:	2209      	movs	r2, #9
 800a778:	3308      	adds	r3, #8
 800a77a:	4606      	mov	r6, r0
 800a77c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a780:	2100      	movs	r1, #0
 800a782:	2201      	movs	r2, #1
 800a784:	429a      	cmp	r2, r3
 800a786:	db09      	blt.n	800a79c <__s2b+0x30>
 800a788:	4630      	mov	r0, r6
 800a78a:	f7ff ff47 	bl	800a61c <_Balloc>
 800a78e:	b940      	cbnz	r0, 800a7a2 <__s2b+0x36>
 800a790:	4602      	mov	r2, r0
 800a792:	4b19      	ldr	r3, [pc, #100]	; (800a7f8 <__s2b+0x8c>)
 800a794:	4819      	ldr	r0, [pc, #100]	; (800a7fc <__s2b+0x90>)
 800a796:	21ce      	movs	r1, #206	; 0xce
 800a798:	f000 fe8c 	bl	800b4b4 <__assert_func>
 800a79c:	0052      	lsls	r2, r2, #1
 800a79e:	3101      	adds	r1, #1
 800a7a0:	e7f0      	b.n	800a784 <__s2b+0x18>
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	6143      	str	r3, [r0, #20]
 800a7a6:	2d09      	cmp	r5, #9
 800a7a8:	f04f 0301 	mov.w	r3, #1
 800a7ac:	6103      	str	r3, [r0, #16]
 800a7ae:	dd16      	ble.n	800a7de <__s2b+0x72>
 800a7b0:	f104 0909 	add.w	r9, r4, #9
 800a7b4:	46c8      	mov	r8, r9
 800a7b6:	442c      	add	r4, r5
 800a7b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7bc:	4601      	mov	r1, r0
 800a7be:	3b30      	subs	r3, #48	; 0x30
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f7ff ff8c 	bl	800a6e0 <__multadd>
 800a7c8:	45a0      	cmp	r8, r4
 800a7ca:	d1f5      	bne.n	800a7b8 <__s2b+0x4c>
 800a7cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a7d0:	444c      	add	r4, r9
 800a7d2:	1b2d      	subs	r5, r5, r4
 800a7d4:	1963      	adds	r3, r4, r5
 800a7d6:	42bb      	cmp	r3, r7
 800a7d8:	db04      	blt.n	800a7e4 <__s2b+0x78>
 800a7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7de:	340a      	adds	r4, #10
 800a7e0:	2509      	movs	r5, #9
 800a7e2:	e7f6      	b.n	800a7d2 <__s2b+0x66>
 800a7e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	3b30      	subs	r3, #48	; 0x30
 800a7ec:	220a      	movs	r2, #10
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f7ff ff76 	bl	800a6e0 <__multadd>
 800a7f4:	e7ee      	b.n	800a7d4 <__s2b+0x68>
 800a7f6:	bf00      	nop
 800a7f8:	08031ec0 	.word	0x08031ec0
 800a7fc:	08031f4c 	.word	0x08031f4c

0800a800 <__hi0bits>:
 800a800:	0c03      	lsrs	r3, r0, #16
 800a802:	041b      	lsls	r3, r3, #16
 800a804:	b9d3      	cbnz	r3, 800a83c <__hi0bits+0x3c>
 800a806:	0400      	lsls	r0, r0, #16
 800a808:	2310      	movs	r3, #16
 800a80a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a80e:	bf04      	itt	eq
 800a810:	0200      	lsleq	r0, r0, #8
 800a812:	3308      	addeq	r3, #8
 800a814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a818:	bf04      	itt	eq
 800a81a:	0100      	lsleq	r0, r0, #4
 800a81c:	3304      	addeq	r3, #4
 800a81e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a822:	bf04      	itt	eq
 800a824:	0080      	lsleq	r0, r0, #2
 800a826:	3302      	addeq	r3, #2
 800a828:	2800      	cmp	r0, #0
 800a82a:	db05      	blt.n	800a838 <__hi0bits+0x38>
 800a82c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a830:	f103 0301 	add.w	r3, r3, #1
 800a834:	bf08      	it	eq
 800a836:	2320      	moveq	r3, #32
 800a838:	4618      	mov	r0, r3
 800a83a:	4770      	bx	lr
 800a83c:	2300      	movs	r3, #0
 800a83e:	e7e4      	b.n	800a80a <__hi0bits+0xa>

0800a840 <__lo0bits>:
 800a840:	6803      	ldr	r3, [r0, #0]
 800a842:	f013 0207 	ands.w	r2, r3, #7
 800a846:	4601      	mov	r1, r0
 800a848:	d00b      	beq.n	800a862 <__lo0bits+0x22>
 800a84a:	07da      	lsls	r2, r3, #31
 800a84c:	d423      	bmi.n	800a896 <__lo0bits+0x56>
 800a84e:	0798      	lsls	r0, r3, #30
 800a850:	bf49      	itett	mi
 800a852:	085b      	lsrmi	r3, r3, #1
 800a854:	089b      	lsrpl	r3, r3, #2
 800a856:	2001      	movmi	r0, #1
 800a858:	600b      	strmi	r3, [r1, #0]
 800a85a:	bf5c      	itt	pl
 800a85c:	600b      	strpl	r3, [r1, #0]
 800a85e:	2002      	movpl	r0, #2
 800a860:	4770      	bx	lr
 800a862:	b298      	uxth	r0, r3
 800a864:	b9a8      	cbnz	r0, 800a892 <__lo0bits+0x52>
 800a866:	0c1b      	lsrs	r3, r3, #16
 800a868:	2010      	movs	r0, #16
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	b90a      	cbnz	r2, 800a872 <__lo0bits+0x32>
 800a86e:	3008      	adds	r0, #8
 800a870:	0a1b      	lsrs	r3, r3, #8
 800a872:	071a      	lsls	r2, r3, #28
 800a874:	bf04      	itt	eq
 800a876:	091b      	lsreq	r3, r3, #4
 800a878:	3004      	addeq	r0, #4
 800a87a:	079a      	lsls	r2, r3, #30
 800a87c:	bf04      	itt	eq
 800a87e:	089b      	lsreq	r3, r3, #2
 800a880:	3002      	addeq	r0, #2
 800a882:	07da      	lsls	r2, r3, #31
 800a884:	d403      	bmi.n	800a88e <__lo0bits+0x4e>
 800a886:	085b      	lsrs	r3, r3, #1
 800a888:	f100 0001 	add.w	r0, r0, #1
 800a88c:	d005      	beq.n	800a89a <__lo0bits+0x5a>
 800a88e:	600b      	str	r3, [r1, #0]
 800a890:	4770      	bx	lr
 800a892:	4610      	mov	r0, r2
 800a894:	e7e9      	b.n	800a86a <__lo0bits+0x2a>
 800a896:	2000      	movs	r0, #0
 800a898:	4770      	bx	lr
 800a89a:	2020      	movs	r0, #32
 800a89c:	4770      	bx	lr
	...

0800a8a0 <__i2b>:
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	f7ff feb9 	bl	800a61c <_Balloc>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	b928      	cbnz	r0, 800a8ba <__i2b+0x1a>
 800a8ae:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <__i2b+0x24>)
 800a8b0:	4805      	ldr	r0, [pc, #20]	; (800a8c8 <__i2b+0x28>)
 800a8b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a8b6:	f000 fdfd 	bl	800b4b4 <__assert_func>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	6144      	str	r4, [r0, #20]
 800a8be:	6103      	str	r3, [r0, #16]
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	bf00      	nop
 800a8c4:	08031ec0 	.word	0x08031ec0
 800a8c8:	08031f4c 	.word	0x08031f4c

0800a8cc <__multiply>:
 800a8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d0:	4691      	mov	r9, r2
 800a8d2:	690a      	ldr	r2, [r1, #16]
 800a8d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	bfb8      	it	lt
 800a8dc:	460b      	movlt	r3, r1
 800a8de:	460c      	mov	r4, r1
 800a8e0:	bfbc      	itt	lt
 800a8e2:	464c      	movlt	r4, r9
 800a8e4:	4699      	movlt	r9, r3
 800a8e6:	6927      	ldr	r7, [r4, #16]
 800a8e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8ec:	68a3      	ldr	r3, [r4, #8]
 800a8ee:	6861      	ldr	r1, [r4, #4]
 800a8f0:	eb07 060a 	add.w	r6, r7, sl
 800a8f4:	42b3      	cmp	r3, r6
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	bfb8      	it	lt
 800a8fa:	3101      	addlt	r1, #1
 800a8fc:	f7ff fe8e 	bl	800a61c <_Balloc>
 800a900:	b930      	cbnz	r0, 800a910 <__multiply+0x44>
 800a902:	4602      	mov	r2, r0
 800a904:	4b44      	ldr	r3, [pc, #272]	; (800aa18 <__multiply+0x14c>)
 800a906:	4845      	ldr	r0, [pc, #276]	; (800aa1c <__multiply+0x150>)
 800a908:	f240 115d 	movw	r1, #349	; 0x15d
 800a90c:	f000 fdd2 	bl	800b4b4 <__assert_func>
 800a910:	f100 0514 	add.w	r5, r0, #20
 800a914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a918:	462b      	mov	r3, r5
 800a91a:	2200      	movs	r2, #0
 800a91c:	4543      	cmp	r3, r8
 800a91e:	d321      	bcc.n	800a964 <__multiply+0x98>
 800a920:	f104 0314 	add.w	r3, r4, #20
 800a924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a928:	f109 0314 	add.w	r3, r9, #20
 800a92c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a930:	9202      	str	r2, [sp, #8]
 800a932:	1b3a      	subs	r2, r7, r4
 800a934:	3a15      	subs	r2, #21
 800a936:	f022 0203 	bic.w	r2, r2, #3
 800a93a:	3204      	adds	r2, #4
 800a93c:	f104 0115 	add.w	r1, r4, #21
 800a940:	428f      	cmp	r7, r1
 800a942:	bf38      	it	cc
 800a944:	2204      	movcc	r2, #4
 800a946:	9201      	str	r2, [sp, #4]
 800a948:	9a02      	ldr	r2, [sp, #8]
 800a94a:	9303      	str	r3, [sp, #12]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d80c      	bhi.n	800a96a <__multiply+0x9e>
 800a950:	2e00      	cmp	r6, #0
 800a952:	dd03      	ble.n	800a95c <__multiply+0x90>
 800a954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d05a      	beq.n	800aa12 <__multiply+0x146>
 800a95c:	6106      	str	r6, [r0, #16]
 800a95e:	b005      	add	sp, #20
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	f843 2b04 	str.w	r2, [r3], #4
 800a968:	e7d8      	b.n	800a91c <__multiply+0x50>
 800a96a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a96e:	f1ba 0f00 	cmp.w	sl, #0
 800a972:	d024      	beq.n	800a9be <__multiply+0xf2>
 800a974:	f104 0e14 	add.w	lr, r4, #20
 800a978:	46a9      	mov	r9, r5
 800a97a:	f04f 0c00 	mov.w	ip, #0
 800a97e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a982:	f8d9 1000 	ldr.w	r1, [r9]
 800a986:	fa1f fb82 	uxth.w	fp, r2
 800a98a:	b289      	uxth	r1, r1
 800a98c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a990:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a994:	f8d9 2000 	ldr.w	r2, [r9]
 800a998:	4461      	add	r1, ip
 800a99a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a99e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a9a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a9a6:	b289      	uxth	r1, r1
 800a9a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9ac:	4577      	cmp	r7, lr
 800a9ae:	f849 1b04 	str.w	r1, [r9], #4
 800a9b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9b6:	d8e2      	bhi.n	800a97e <__multiply+0xb2>
 800a9b8:	9a01      	ldr	r2, [sp, #4]
 800a9ba:	f845 c002 	str.w	ip, [r5, r2]
 800a9be:	9a03      	ldr	r2, [sp, #12]
 800a9c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ca:	d020      	beq.n	800aa0e <__multiply+0x142>
 800a9cc:	6829      	ldr	r1, [r5, #0]
 800a9ce:	f104 0c14 	add.w	ip, r4, #20
 800a9d2:	46ae      	mov	lr, r5
 800a9d4:	f04f 0a00 	mov.w	sl, #0
 800a9d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a9dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a9e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a9e4:	4492      	add	sl, r2
 800a9e6:	b289      	uxth	r1, r1
 800a9e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a9ec:	f84e 1b04 	str.w	r1, [lr], #4
 800a9f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a9f4:	f8be 1000 	ldrh.w	r1, [lr]
 800a9f8:	0c12      	lsrs	r2, r2, #16
 800a9fa:	fb09 1102 	mla	r1, r9, r2, r1
 800a9fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa02:	4567      	cmp	r7, ip
 800aa04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa08:	d8e6      	bhi.n	800a9d8 <__multiply+0x10c>
 800aa0a:	9a01      	ldr	r2, [sp, #4]
 800aa0c:	50a9      	str	r1, [r5, r2]
 800aa0e:	3504      	adds	r5, #4
 800aa10:	e79a      	b.n	800a948 <__multiply+0x7c>
 800aa12:	3e01      	subs	r6, #1
 800aa14:	e79c      	b.n	800a950 <__multiply+0x84>
 800aa16:	bf00      	nop
 800aa18:	08031ec0 	.word	0x08031ec0
 800aa1c:	08031f4c 	.word	0x08031f4c

0800aa20 <__pow5mult>:
 800aa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	4615      	mov	r5, r2
 800aa26:	f012 0203 	ands.w	r2, r2, #3
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460f      	mov	r7, r1
 800aa2e:	d007      	beq.n	800aa40 <__pow5mult+0x20>
 800aa30:	4c25      	ldr	r4, [pc, #148]	; (800aac8 <__pow5mult+0xa8>)
 800aa32:	3a01      	subs	r2, #1
 800aa34:	2300      	movs	r3, #0
 800aa36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa3a:	f7ff fe51 	bl	800a6e0 <__multadd>
 800aa3e:	4607      	mov	r7, r0
 800aa40:	10ad      	asrs	r5, r5, #2
 800aa42:	d03d      	beq.n	800aac0 <__pow5mult+0xa0>
 800aa44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa46:	b97c      	cbnz	r4, 800aa68 <__pow5mult+0x48>
 800aa48:	2010      	movs	r0, #16
 800aa4a:	f7ff fdbf 	bl	800a5cc <malloc>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	6270      	str	r0, [r6, #36]	; 0x24
 800aa52:	b928      	cbnz	r0, 800aa60 <__pow5mult+0x40>
 800aa54:	4b1d      	ldr	r3, [pc, #116]	; (800aacc <__pow5mult+0xac>)
 800aa56:	481e      	ldr	r0, [pc, #120]	; (800aad0 <__pow5mult+0xb0>)
 800aa58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa5c:	f000 fd2a 	bl	800b4b4 <__assert_func>
 800aa60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa64:	6004      	str	r4, [r0, #0]
 800aa66:	60c4      	str	r4, [r0, #12]
 800aa68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa70:	b94c      	cbnz	r4, 800aa86 <__pow5mult+0x66>
 800aa72:	f240 2171 	movw	r1, #625	; 0x271
 800aa76:	4630      	mov	r0, r6
 800aa78:	f7ff ff12 	bl	800a8a0 <__i2b>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa82:	4604      	mov	r4, r0
 800aa84:	6003      	str	r3, [r0, #0]
 800aa86:	f04f 0900 	mov.w	r9, #0
 800aa8a:	07eb      	lsls	r3, r5, #31
 800aa8c:	d50a      	bpl.n	800aaa4 <__pow5mult+0x84>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4622      	mov	r2, r4
 800aa92:	4630      	mov	r0, r6
 800aa94:	f7ff ff1a 	bl	800a8cc <__multiply>
 800aa98:	4639      	mov	r1, r7
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff fdfd 	bl	800a69c <_Bfree>
 800aaa2:	4647      	mov	r7, r8
 800aaa4:	106d      	asrs	r5, r5, #1
 800aaa6:	d00b      	beq.n	800aac0 <__pow5mult+0xa0>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	b938      	cbnz	r0, 800aabc <__pow5mult+0x9c>
 800aaac:	4622      	mov	r2, r4
 800aaae:	4621      	mov	r1, r4
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7ff ff0b 	bl	800a8cc <__multiply>
 800aab6:	6020      	str	r0, [r4, #0]
 800aab8:	f8c0 9000 	str.w	r9, [r0]
 800aabc:	4604      	mov	r4, r0
 800aabe:	e7e4      	b.n	800aa8a <__pow5mult+0x6a>
 800aac0:	4638      	mov	r0, r7
 800aac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac6:	bf00      	nop
 800aac8:	08032098 	.word	0x08032098
 800aacc:	08031e4e 	.word	0x08031e4e
 800aad0:	08031f4c 	.word	0x08031f4c

0800aad4 <__lshift>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	460c      	mov	r4, r1
 800aada:	6849      	ldr	r1, [r1, #4]
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aae2:	68a3      	ldr	r3, [r4, #8]
 800aae4:	4607      	mov	r7, r0
 800aae6:	4691      	mov	r9, r2
 800aae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aaec:	f108 0601 	add.w	r6, r8, #1
 800aaf0:	42b3      	cmp	r3, r6
 800aaf2:	db0b      	blt.n	800ab0c <__lshift+0x38>
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7ff fd91 	bl	800a61c <_Balloc>
 800aafa:	4605      	mov	r5, r0
 800aafc:	b948      	cbnz	r0, 800ab12 <__lshift+0x3e>
 800aafe:	4602      	mov	r2, r0
 800ab00:	4b2a      	ldr	r3, [pc, #168]	; (800abac <__lshift+0xd8>)
 800ab02:	482b      	ldr	r0, [pc, #172]	; (800abb0 <__lshift+0xdc>)
 800ab04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab08:	f000 fcd4 	bl	800b4b4 <__assert_func>
 800ab0c:	3101      	adds	r1, #1
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	e7ee      	b.n	800aaf0 <__lshift+0x1c>
 800ab12:	2300      	movs	r3, #0
 800ab14:	f100 0114 	add.w	r1, r0, #20
 800ab18:	f100 0210 	add.w	r2, r0, #16
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	4553      	cmp	r3, sl
 800ab20:	db37      	blt.n	800ab92 <__lshift+0xbe>
 800ab22:	6920      	ldr	r0, [r4, #16]
 800ab24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab28:	f104 0314 	add.w	r3, r4, #20
 800ab2c:	f019 091f 	ands.w	r9, r9, #31
 800ab30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab38:	d02f      	beq.n	800ab9a <__lshift+0xc6>
 800ab3a:	f1c9 0e20 	rsb	lr, r9, #32
 800ab3e:	468a      	mov	sl, r1
 800ab40:	f04f 0c00 	mov.w	ip, #0
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	fa02 f209 	lsl.w	r2, r2, r9
 800ab4a:	ea42 020c 	orr.w	r2, r2, ip
 800ab4e:	f84a 2b04 	str.w	r2, [sl], #4
 800ab52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab56:	4298      	cmp	r0, r3
 800ab58:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ab5c:	d8f2      	bhi.n	800ab44 <__lshift+0x70>
 800ab5e:	1b03      	subs	r3, r0, r4
 800ab60:	3b15      	subs	r3, #21
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	3304      	adds	r3, #4
 800ab68:	f104 0215 	add.w	r2, r4, #21
 800ab6c:	4290      	cmp	r0, r2
 800ab6e:	bf38      	it	cc
 800ab70:	2304      	movcc	r3, #4
 800ab72:	f841 c003 	str.w	ip, [r1, r3]
 800ab76:	f1bc 0f00 	cmp.w	ip, #0
 800ab7a:	d001      	beq.n	800ab80 <__lshift+0xac>
 800ab7c:	f108 0602 	add.w	r6, r8, #2
 800ab80:	3e01      	subs	r6, #1
 800ab82:	4638      	mov	r0, r7
 800ab84:	612e      	str	r6, [r5, #16]
 800ab86:	4621      	mov	r1, r4
 800ab88:	f7ff fd88 	bl	800a69c <_Bfree>
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab92:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab96:	3301      	adds	r3, #1
 800ab98:	e7c1      	b.n	800ab1e <__lshift+0x4a>
 800ab9a:	3904      	subs	r1, #4
 800ab9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aba4:	4298      	cmp	r0, r3
 800aba6:	d8f9      	bhi.n	800ab9c <__lshift+0xc8>
 800aba8:	e7ea      	b.n	800ab80 <__lshift+0xac>
 800abaa:	bf00      	nop
 800abac:	08031ec0 	.word	0x08031ec0
 800abb0:	08031f4c 	.word	0x08031f4c

0800abb4 <__mcmp>:
 800abb4:	b530      	push	{r4, r5, lr}
 800abb6:	6902      	ldr	r2, [r0, #16]
 800abb8:	690c      	ldr	r4, [r1, #16]
 800abba:	1b12      	subs	r2, r2, r4
 800abbc:	d10e      	bne.n	800abdc <__mcmp+0x28>
 800abbe:	f100 0314 	add.w	r3, r0, #20
 800abc2:	3114      	adds	r1, #20
 800abc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800abd4:	42a5      	cmp	r5, r4
 800abd6:	d003      	beq.n	800abe0 <__mcmp+0x2c>
 800abd8:	d305      	bcc.n	800abe6 <__mcmp+0x32>
 800abda:	2201      	movs	r2, #1
 800abdc:	4610      	mov	r0, r2
 800abde:	bd30      	pop	{r4, r5, pc}
 800abe0:	4283      	cmp	r3, r0
 800abe2:	d3f3      	bcc.n	800abcc <__mcmp+0x18>
 800abe4:	e7fa      	b.n	800abdc <__mcmp+0x28>
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	e7f7      	b.n	800abdc <__mcmp+0x28>

0800abec <__mdiff>:
 800abec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	460c      	mov	r4, r1
 800abf2:	4606      	mov	r6, r0
 800abf4:	4611      	mov	r1, r2
 800abf6:	4620      	mov	r0, r4
 800abf8:	4690      	mov	r8, r2
 800abfa:	f7ff ffdb 	bl	800abb4 <__mcmp>
 800abfe:	1e05      	subs	r5, r0, #0
 800ac00:	d110      	bne.n	800ac24 <__mdiff+0x38>
 800ac02:	4629      	mov	r1, r5
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7ff fd09 	bl	800a61c <_Balloc>
 800ac0a:	b930      	cbnz	r0, 800ac1a <__mdiff+0x2e>
 800ac0c:	4b3a      	ldr	r3, [pc, #232]	; (800acf8 <__mdiff+0x10c>)
 800ac0e:	4602      	mov	r2, r0
 800ac10:	f240 2132 	movw	r1, #562	; 0x232
 800ac14:	4839      	ldr	r0, [pc, #228]	; (800acfc <__mdiff+0x110>)
 800ac16:	f000 fc4d 	bl	800b4b4 <__assert_func>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac24:	bfa4      	itt	ge
 800ac26:	4643      	movge	r3, r8
 800ac28:	46a0      	movge	r8, r4
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac30:	bfa6      	itte	ge
 800ac32:	461c      	movge	r4, r3
 800ac34:	2500      	movge	r5, #0
 800ac36:	2501      	movlt	r5, #1
 800ac38:	f7ff fcf0 	bl	800a61c <_Balloc>
 800ac3c:	b920      	cbnz	r0, 800ac48 <__mdiff+0x5c>
 800ac3e:	4b2e      	ldr	r3, [pc, #184]	; (800acf8 <__mdiff+0x10c>)
 800ac40:	4602      	mov	r2, r0
 800ac42:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac46:	e7e5      	b.n	800ac14 <__mdiff+0x28>
 800ac48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac4c:	6926      	ldr	r6, [r4, #16]
 800ac4e:	60c5      	str	r5, [r0, #12]
 800ac50:	f104 0914 	add.w	r9, r4, #20
 800ac54:	f108 0514 	add.w	r5, r8, #20
 800ac58:	f100 0e14 	add.w	lr, r0, #20
 800ac5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac64:	f108 0210 	add.w	r2, r8, #16
 800ac68:	46f2      	mov	sl, lr
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac74:	fa1f f883 	uxth.w	r8, r3
 800ac78:	fa11 f18b 	uxtah	r1, r1, fp
 800ac7c:	0c1b      	lsrs	r3, r3, #16
 800ac7e:	eba1 0808 	sub.w	r8, r1, r8
 800ac82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac8a:	fa1f f888 	uxth.w	r8, r8
 800ac8e:	1419      	asrs	r1, r3, #16
 800ac90:	454e      	cmp	r6, r9
 800ac92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac96:	f84a 3b04 	str.w	r3, [sl], #4
 800ac9a:	d8e7      	bhi.n	800ac6c <__mdiff+0x80>
 800ac9c:	1b33      	subs	r3, r6, r4
 800ac9e:	3b15      	subs	r3, #21
 800aca0:	f023 0303 	bic.w	r3, r3, #3
 800aca4:	3304      	adds	r3, #4
 800aca6:	3415      	adds	r4, #21
 800aca8:	42a6      	cmp	r6, r4
 800acaa:	bf38      	it	cc
 800acac:	2304      	movcc	r3, #4
 800acae:	441d      	add	r5, r3
 800acb0:	4473      	add	r3, lr
 800acb2:	469e      	mov	lr, r3
 800acb4:	462e      	mov	r6, r5
 800acb6:	4566      	cmp	r6, ip
 800acb8:	d30e      	bcc.n	800acd8 <__mdiff+0xec>
 800acba:	f10c 0203 	add.w	r2, ip, #3
 800acbe:	1b52      	subs	r2, r2, r5
 800acc0:	f022 0203 	bic.w	r2, r2, #3
 800acc4:	3d03      	subs	r5, #3
 800acc6:	45ac      	cmp	ip, r5
 800acc8:	bf38      	it	cc
 800acca:	2200      	movcc	r2, #0
 800accc:	441a      	add	r2, r3
 800acce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800acd2:	b17b      	cbz	r3, 800acf4 <__mdiff+0x108>
 800acd4:	6107      	str	r7, [r0, #16]
 800acd6:	e7a3      	b.n	800ac20 <__mdiff+0x34>
 800acd8:	f856 8b04 	ldr.w	r8, [r6], #4
 800acdc:	fa11 f288 	uxtah	r2, r1, r8
 800ace0:	1414      	asrs	r4, r2, #16
 800ace2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ace6:	b292      	uxth	r2, r2
 800ace8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800acec:	f84e 2b04 	str.w	r2, [lr], #4
 800acf0:	1421      	asrs	r1, r4, #16
 800acf2:	e7e0      	b.n	800acb6 <__mdiff+0xca>
 800acf4:	3f01      	subs	r7, #1
 800acf6:	e7ea      	b.n	800acce <__mdiff+0xe2>
 800acf8:	08031ec0 	.word	0x08031ec0
 800acfc:	08031f4c 	.word	0x08031f4c

0800ad00 <__ulp>:
 800ad00:	b082      	sub	sp, #8
 800ad02:	ed8d 0b00 	vstr	d0, [sp]
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	4912      	ldr	r1, [pc, #72]	; (800ad54 <__ulp+0x54>)
 800ad0a:	4019      	ands	r1, r3
 800ad0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ad10:	2900      	cmp	r1, #0
 800ad12:	dd05      	ble.n	800ad20 <__ulp+0x20>
 800ad14:	2200      	movs	r2, #0
 800ad16:	460b      	mov	r3, r1
 800ad18:	ec43 2b10 	vmov	d0, r2, r3
 800ad1c:	b002      	add	sp, #8
 800ad1e:	4770      	bx	lr
 800ad20:	4249      	negs	r1, r1
 800ad22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ad26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	da04      	bge.n	800ad3e <__ulp+0x3e>
 800ad34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ad38:	fa41 f300 	asr.w	r3, r1, r0
 800ad3c:	e7ec      	b.n	800ad18 <__ulp+0x18>
 800ad3e:	f1a0 0114 	sub.w	r1, r0, #20
 800ad42:	291e      	cmp	r1, #30
 800ad44:	bfda      	itte	le
 800ad46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ad4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ad4e:	2101      	movgt	r1, #1
 800ad50:	460a      	mov	r2, r1
 800ad52:	e7e1      	b.n	800ad18 <__ulp+0x18>
 800ad54:	7ff00000 	.word	0x7ff00000

0800ad58 <__b2d>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	6905      	ldr	r5, [r0, #16]
 800ad5c:	f100 0714 	add.w	r7, r0, #20
 800ad60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ad64:	1f2e      	subs	r6, r5, #4
 800ad66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7ff fd48 	bl	800a800 <__hi0bits>
 800ad70:	f1c0 0320 	rsb	r3, r0, #32
 800ad74:	280a      	cmp	r0, #10
 800ad76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800adf4 <__b2d+0x9c>
 800ad7a:	600b      	str	r3, [r1, #0]
 800ad7c:	dc14      	bgt.n	800ada8 <__b2d+0x50>
 800ad7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ad82:	fa24 f10e 	lsr.w	r1, r4, lr
 800ad86:	42b7      	cmp	r7, r6
 800ad88:	ea41 030c 	orr.w	r3, r1, ip
 800ad8c:	bf34      	ite	cc
 800ad8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad92:	2100      	movcs	r1, #0
 800ad94:	3015      	adds	r0, #21
 800ad96:	fa04 f000 	lsl.w	r0, r4, r0
 800ad9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ad9e:	ea40 0201 	orr.w	r2, r0, r1
 800ada2:	ec43 2b10 	vmov	d0, r2, r3
 800ada6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada8:	42b7      	cmp	r7, r6
 800adaa:	bf3a      	itte	cc
 800adac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800adb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800adb4:	2100      	movcs	r1, #0
 800adb6:	380b      	subs	r0, #11
 800adb8:	d017      	beq.n	800adea <__b2d+0x92>
 800adba:	f1c0 0c20 	rsb	ip, r0, #32
 800adbe:	fa04 f500 	lsl.w	r5, r4, r0
 800adc2:	42be      	cmp	r6, r7
 800adc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800adc8:	ea45 0504 	orr.w	r5, r5, r4
 800adcc:	bf8c      	ite	hi
 800adce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800add2:	2400      	movls	r4, #0
 800add4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800add8:	fa01 f000 	lsl.w	r0, r1, r0
 800addc:	fa24 f40c 	lsr.w	r4, r4, ip
 800ade0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ade4:	ea40 0204 	orr.w	r2, r0, r4
 800ade8:	e7db      	b.n	800ada2 <__b2d+0x4a>
 800adea:	ea44 030c 	orr.w	r3, r4, ip
 800adee:	460a      	mov	r2, r1
 800adf0:	e7d7      	b.n	800ada2 <__b2d+0x4a>
 800adf2:	bf00      	nop
 800adf4:	3ff00000 	.word	0x3ff00000

0800adf8 <__d2b>:
 800adf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adfc:	4689      	mov	r9, r1
 800adfe:	2101      	movs	r1, #1
 800ae00:	ec57 6b10 	vmov	r6, r7, d0
 800ae04:	4690      	mov	r8, r2
 800ae06:	f7ff fc09 	bl	800a61c <_Balloc>
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	b930      	cbnz	r0, 800ae1c <__d2b+0x24>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <__d2b+0xb0>)
 800ae12:	4826      	ldr	r0, [pc, #152]	; (800aeac <__d2b+0xb4>)
 800ae14:	f240 310a 	movw	r1, #778	; 0x30a
 800ae18:	f000 fb4c 	bl	800b4b4 <__assert_func>
 800ae1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae24:	bb35      	cbnz	r5, 800ae74 <__d2b+0x7c>
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	d028      	beq.n	800ae7e <__d2b+0x86>
 800ae2c:	4668      	mov	r0, sp
 800ae2e:	9600      	str	r6, [sp, #0]
 800ae30:	f7ff fd06 	bl	800a840 <__lo0bits>
 800ae34:	9900      	ldr	r1, [sp, #0]
 800ae36:	b300      	cbz	r0, 800ae7a <__d2b+0x82>
 800ae38:	9a01      	ldr	r2, [sp, #4]
 800ae3a:	f1c0 0320 	rsb	r3, r0, #32
 800ae3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae42:	430b      	orrs	r3, r1
 800ae44:	40c2      	lsrs	r2, r0
 800ae46:	6163      	str	r3, [r4, #20]
 800ae48:	9201      	str	r2, [sp, #4]
 800ae4a:	9b01      	ldr	r3, [sp, #4]
 800ae4c:	61a3      	str	r3, [r4, #24]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bf14      	ite	ne
 800ae52:	2202      	movne	r2, #2
 800ae54:	2201      	moveq	r2, #1
 800ae56:	6122      	str	r2, [r4, #16]
 800ae58:	b1d5      	cbz	r5, 800ae90 <__d2b+0x98>
 800ae5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae5e:	4405      	add	r5, r0
 800ae60:	f8c9 5000 	str.w	r5, [r9]
 800ae64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae68:	f8c8 0000 	str.w	r0, [r8]
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	b003      	add	sp, #12
 800ae70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae78:	e7d5      	b.n	800ae26 <__d2b+0x2e>
 800ae7a:	6161      	str	r1, [r4, #20]
 800ae7c:	e7e5      	b.n	800ae4a <__d2b+0x52>
 800ae7e:	a801      	add	r0, sp, #4
 800ae80:	f7ff fcde 	bl	800a840 <__lo0bits>
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	6163      	str	r3, [r4, #20]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	6122      	str	r2, [r4, #16]
 800ae8c:	3020      	adds	r0, #32
 800ae8e:	e7e3      	b.n	800ae58 <__d2b+0x60>
 800ae90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae98:	f8c9 0000 	str.w	r0, [r9]
 800ae9c:	6918      	ldr	r0, [r3, #16]
 800ae9e:	f7ff fcaf 	bl	800a800 <__hi0bits>
 800aea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aea6:	e7df      	b.n	800ae68 <__d2b+0x70>
 800aea8:	08031ec0 	.word	0x08031ec0
 800aeac:	08031f4c 	.word	0x08031f4c

0800aeb0 <__ratio>:
 800aeb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	4688      	mov	r8, r1
 800aeb6:	4669      	mov	r1, sp
 800aeb8:	4681      	mov	r9, r0
 800aeba:	f7ff ff4d 	bl	800ad58 <__b2d>
 800aebe:	a901      	add	r1, sp, #4
 800aec0:	4640      	mov	r0, r8
 800aec2:	ec55 4b10 	vmov	r4, r5, d0
 800aec6:	ee10 aa10 	vmov	sl, s0
 800aeca:	f7ff ff45 	bl	800ad58 <__b2d>
 800aece:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aed2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aed6:	1a59      	subs	r1, r3, r1
 800aed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aee2:	ec57 6b10 	vmov	r6, r7, d0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	bfd6      	itet	le
 800aeea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aeee:	462a      	movgt	r2, r5
 800aef0:	463a      	movle	r2, r7
 800aef2:	46ab      	mov	fp, r5
 800aef4:	bfd6      	itet	le
 800aef6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800aefa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aefe:	ee00 3a90 	vmovle	s1, r3
 800af02:	ec4b ab17 	vmov	d7, sl, fp
 800af06:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800af0a:	b003      	add	sp, #12
 800af0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af10 <__copybits>:
 800af10:	3901      	subs	r1, #1
 800af12:	b570      	push	{r4, r5, r6, lr}
 800af14:	1149      	asrs	r1, r1, #5
 800af16:	6914      	ldr	r4, [r2, #16]
 800af18:	3101      	adds	r1, #1
 800af1a:	f102 0314 	add.w	r3, r2, #20
 800af1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af26:	1f05      	subs	r5, r0, #4
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d30c      	bcc.n	800af46 <__copybits+0x36>
 800af2c:	1aa3      	subs	r3, r4, r2
 800af2e:	3b11      	subs	r3, #17
 800af30:	f023 0303 	bic.w	r3, r3, #3
 800af34:	3211      	adds	r2, #17
 800af36:	42a2      	cmp	r2, r4
 800af38:	bf88      	it	hi
 800af3a:	2300      	movhi	r3, #0
 800af3c:	4418      	add	r0, r3
 800af3e:	2300      	movs	r3, #0
 800af40:	4288      	cmp	r0, r1
 800af42:	d305      	bcc.n	800af50 <__copybits+0x40>
 800af44:	bd70      	pop	{r4, r5, r6, pc}
 800af46:	f853 6b04 	ldr.w	r6, [r3], #4
 800af4a:	f845 6f04 	str.w	r6, [r5, #4]!
 800af4e:	e7eb      	b.n	800af28 <__copybits+0x18>
 800af50:	f840 3b04 	str.w	r3, [r0], #4
 800af54:	e7f4      	b.n	800af40 <__copybits+0x30>

0800af56 <__any_on>:
 800af56:	f100 0214 	add.w	r2, r0, #20
 800af5a:	6900      	ldr	r0, [r0, #16]
 800af5c:	114b      	asrs	r3, r1, #5
 800af5e:	4298      	cmp	r0, r3
 800af60:	b510      	push	{r4, lr}
 800af62:	db11      	blt.n	800af88 <__any_on+0x32>
 800af64:	dd0a      	ble.n	800af7c <__any_on+0x26>
 800af66:	f011 011f 	ands.w	r1, r1, #31
 800af6a:	d007      	beq.n	800af7c <__any_on+0x26>
 800af6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af70:	fa24 f001 	lsr.w	r0, r4, r1
 800af74:	fa00 f101 	lsl.w	r1, r0, r1
 800af78:	428c      	cmp	r4, r1
 800af7a:	d10b      	bne.n	800af94 <__any_on+0x3e>
 800af7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af80:	4293      	cmp	r3, r2
 800af82:	d803      	bhi.n	800af8c <__any_on+0x36>
 800af84:	2000      	movs	r0, #0
 800af86:	bd10      	pop	{r4, pc}
 800af88:	4603      	mov	r3, r0
 800af8a:	e7f7      	b.n	800af7c <__any_on+0x26>
 800af8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af90:	2900      	cmp	r1, #0
 800af92:	d0f5      	beq.n	800af80 <__any_on+0x2a>
 800af94:	2001      	movs	r0, #1
 800af96:	e7f6      	b.n	800af86 <__any_on+0x30>

0800af98 <_calloc_r>:
 800af98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af9a:	fba1 2402 	umull	r2, r4, r1, r2
 800af9e:	b94c      	cbnz	r4, 800afb4 <_calloc_r+0x1c>
 800afa0:	4611      	mov	r1, r2
 800afa2:	9201      	str	r2, [sp, #4]
 800afa4:	f000 f87a 	bl	800b09c <_malloc_r>
 800afa8:	9a01      	ldr	r2, [sp, #4]
 800afaa:	4605      	mov	r5, r0
 800afac:	b930      	cbnz	r0, 800afbc <_calloc_r+0x24>
 800afae:	4628      	mov	r0, r5
 800afb0:	b003      	add	sp, #12
 800afb2:	bd30      	pop	{r4, r5, pc}
 800afb4:	220c      	movs	r2, #12
 800afb6:	6002      	str	r2, [r0, #0]
 800afb8:	2500      	movs	r5, #0
 800afba:	e7f8      	b.n	800afae <_calloc_r+0x16>
 800afbc:	4621      	mov	r1, r4
 800afbe:	f7fc fcc5 	bl	800794c <memset>
 800afc2:	e7f4      	b.n	800afae <_calloc_r+0x16>

0800afc4 <_free_r>:
 800afc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afc6:	2900      	cmp	r1, #0
 800afc8:	d044      	beq.n	800b054 <_free_r+0x90>
 800afca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afce:	9001      	str	r0, [sp, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f1a1 0404 	sub.w	r4, r1, #4
 800afd6:	bfb8      	it	lt
 800afd8:	18e4      	addlt	r4, r4, r3
 800afda:	f000 fab5 	bl	800b548 <__malloc_lock>
 800afde:	4a1e      	ldr	r2, [pc, #120]	; (800b058 <_free_r+0x94>)
 800afe0:	9801      	ldr	r0, [sp, #4]
 800afe2:	6813      	ldr	r3, [r2, #0]
 800afe4:	b933      	cbnz	r3, 800aff4 <_free_r+0x30>
 800afe6:	6063      	str	r3, [r4, #4]
 800afe8:	6014      	str	r4, [r2, #0]
 800afea:	b003      	add	sp, #12
 800afec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aff0:	f000 bab0 	b.w	800b554 <__malloc_unlock>
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	d908      	bls.n	800b00a <_free_r+0x46>
 800aff8:	6825      	ldr	r5, [r4, #0]
 800affa:	1961      	adds	r1, r4, r5
 800affc:	428b      	cmp	r3, r1
 800affe:	bf01      	itttt	eq
 800b000:	6819      	ldreq	r1, [r3, #0]
 800b002:	685b      	ldreq	r3, [r3, #4]
 800b004:	1949      	addeq	r1, r1, r5
 800b006:	6021      	streq	r1, [r4, #0]
 800b008:	e7ed      	b.n	800afe6 <_free_r+0x22>
 800b00a:	461a      	mov	r2, r3
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	b10b      	cbz	r3, 800b014 <_free_r+0x50>
 800b010:	42a3      	cmp	r3, r4
 800b012:	d9fa      	bls.n	800b00a <_free_r+0x46>
 800b014:	6811      	ldr	r1, [r2, #0]
 800b016:	1855      	adds	r5, r2, r1
 800b018:	42a5      	cmp	r5, r4
 800b01a:	d10b      	bne.n	800b034 <_free_r+0x70>
 800b01c:	6824      	ldr	r4, [r4, #0]
 800b01e:	4421      	add	r1, r4
 800b020:	1854      	adds	r4, r2, r1
 800b022:	42a3      	cmp	r3, r4
 800b024:	6011      	str	r1, [r2, #0]
 800b026:	d1e0      	bne.n	800afea <_free_r+0x26>
 800b028:	681c      	ldr	r4, [r3, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	6053      	str	r3, [r2, #4]
 800b02e:	4421      	add	r1, r4
 800b030:	6011      	str	r1, [r2, #0]
 800b032:	e7da      	b.n	800afea <_free_r+0x26>
 800b034:	d902      	bls.n	800b03c <_free_r+0x78>
 800b036:	230c      	movs	r3, #12
 800b038:	6003      	str	r3, [r0, #0]
 800b03a:	e7d6      	b.n	800afea <_free_r+0x26>
 800b03c:	6825      	ldr	r5, [r4, #0]
 800b03e:	1961      	adds	r1, r4, r5
 800b040:	428b      	cmp	r3, r1
 800b042:	bf04      	itt	eq
 800b044:	6819      	ldreq	r1, [r3, #0]
 800b046:	685b      	ldreq	r3, [r3, #4]
 800b048:	6063      	str	r3, [r4, #4]
 800b04a:	bf04      	itt	eq
 800b04c:	1949      	addeq	r1, r1, r5
 800b04e:	6021      	streq	r1, [r4, #0]
 800b050:	6054      	str	r4, [r2, #4]
 800b052:	e7ca      	b.n	800afea <_free_r+0x26>
 800b054:	b003      	add	sp, #12
 800b056:	bd30      	pop	{r4, r5, pc}
 800b058:	20000a8c 	.word	0x20000a8c

0800b05c <sbrk_aligned>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	4e0e      	ldr	r6, [pc, #56]	; (800b098 <sbrk_aligned+0x3c>)
 800b060:	460c      	mov	r4, r1
 800b062:	6831      	ldr	r1, [r6, #0]
 800b064:	4605      	mov	r5, r0
 800b066:	b911      	cbnz	r1, 800b06e <sbrk_aligned+0x12>
 800b068:	f000 f9f2 	bl	800b450 <_sbrk_r>
 800b06c:	6030      	str	r0, [r6, #0]
 800b06e:	4621      	mov	r1, r4
 800b070:	4628      	mov	r0, r5
 800b072:	f000 f9ed 	bl	800b450 <_sbrk_r>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	d00a      	beq.n	800b090 <sbrk_aligned+0x34>
 800b07a:	1cc4      	adds	r4, r0, #3
 800b07c:	f024 0403 	bic.w	r4, r4, #3
 800b080:	42a0      	cmp	r0, r4
 800b082:	d007      	beq.n	800b094 <sbrk_aligned+0x38>
 800b084:	1a21      	subs	r1, r4, r0
 800b086:	4628      	mov	r0, r5
 800b088:	f000 f9e2 	bl	800b450 <_sbrk_r>
 800b08c:	3001      	adds	r0, #1
 800b08e:	d101      	bne.n	800b094 <sbrk_aligned+0x38>
 800b090:	f04f 34ff 	mov.w	r4, #4294967295
 800b094:	4620      	mov	r0, r4
 800b096:	bd70      	pop	{r4, r5, r6, pc}
 800b098:	20000a90 	.word	0x20000a90

0800b09c <_malloc_r>:
 800b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	1ccd      	adds	r5, r1, #3
 800b0a2:	f025 0503 	bic.w	r5, r5, #3
 800b0a6:	3508      	adds	r5, #8
 800b0a8:	2d0c      	cmp	r5, #12
 800b0aa:	bf38      	it	cc
 800b0ac:	250c      	movcc	r5, #12
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	db01      	blt.n	800b0b8 <_malloc_r+0x1c>
 800b0b4:	42a9      	cmp	r1, r5
 800b0b6:	d905      	bls.n	800b0c4 <_malloc_r+0x28>
 800b0b8:	230c      	movs	r3, #12
 800b0ba:	603b      	str	r3, [r7, #0]
 800b0bc:	2600      	movs	r6, #0
 800b0be:	4630      	mov	r0, r6
 800b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c4:	4e2e      	ldr	r6, [pc, #184]	; (800b180 <_malloc_r+0xe4>)
 800b0c6:	f000 fa3f 	bl	800b548 <__malloc_lock>
 800b0ca:	6833      	ldr	r3, [r6, #0]
 800b0cc:	461c      	mov	r4, r3
 800b0ce:	bb34      	cbnz	r4, 800b11e <_malloc_r+0x82>
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	f7ff ffc2 	bl	800b05c <sbrk_aligned>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	4604      	mov	r4, r0
 800b0dc:	d14d      	bne.n	800b17a <_malloc_r+0xde>
 800b0de:	6834      	ldr	r4, [r6, #0]
 800b0e0:	4626      	mov	r6, r4
 800b0e2:	2e00      	cmp	r6, #0
 800b0e4:	d140      	bne.n	800b168 <_malloc_r+0xcc>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	eb04 0803 	add.w	r8, r4, r3
 800b0f0:	f000 f9ae 	bl	800b450 <_sbrk_r>
 800b0f4:	4580      	cmp	r8, r0
 800b0f6:	d13a      	bne.n	800b16e <_malloc_r+0xd2>
 800b0f8:	6821      	ldr	r1, [r4, #0]
 800b0fa:	3503      	adds	r5, #3
 800b0fc:	1a6d      	subs	r5, r5, r1
 800b0fe:	f025 0503 	bic.w	r5, r5, #3
 800b102:	3508      	adds	r5, #8
 800b104:	2d0c      	cmp	r5, #12
 800b106:	bf38      	it	cc
 800b108:	250c      	movcc	r5, #12
 800b10a:	4629      	mov	r1, r5
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7ff ffa5 	bl	800b05c <sbrk_aligned>
 800b112:	3001      	adds	r0, #1
 800b114:	d02b      	beq.n	800b16e <_malloc_r+0xd2>
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	442b      	add	r3, r5
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	e00e      	b.n	800b13c <_malloc_r+0xa0>
 800b11e:	6822      	ldr	r2, [r4, #0]
 800b120:	1b52      	subs	r2, r2, r5
 800b122:	d41e      	bmi.n	800b162 <_malloc_r+0xc6>
 800b124:	2a0b      	cmp	r2, #11
 800b126:	d916      	bls.n	800b156 <_malloc_r+0xba>
 800b128:	1961      	adds	r1, r4, r5
 800b12a:	42a3      	cmp	r3, r4
 800b12c:	6025      	str	r5, [r4, #0]
 800b12e:	bf18      	it	ne
 800b130:	6059      	strne	r1, [r3, #4]
 800b132:	6863      	ldr	r3, [r4, #4]
 800b134:	bf08      	it	eq
 800b136:	6031      	streq	r1, [r6, #0]
 800b138:	5162      	str	r2, [r4, r5]
 800b13a:	604b      	str	r3, [r1, #4]
 800b13c:	4638      	mov	r0, r7
 800b13e:	f104 060b 	add.w	r6, r4, #11
 800b142:	f000 fa07 	bl	800b554 <__malloc_unlock>
 800b146:	f026 0607 	bic.w	r6, r6, #7
 800b14a:	1d23      	adds	r3, r4, #4
 800b14c:	1af2      	subs	r2, r6, r3
 800b14e:	d0b6      	beq.n	800b0be <_malloc_r+0x22>
 800b150:	1b9b      	subs	r3, r3, r6
 800b152:	50a3      	str	r3, [r4, r2]
 800b154:	e7b3      	b.n	800b0be <_malloc_r+0x22>
 800b156:	6862      	ldr	r2, [r4, #4]
 800b158:	42a3      	cmp	r3, r4
 800b15a:	bf0c      	ite	eq
 800b15c:	6032      	streq	r2, [r6, #0]
 800b15e:	605a      	strne	r2, [r3, #4]
 800b160:	e7ec      	b.n	800b13c <_malloc_r+0xa0>
 800b162:	4623      	mov	r3, r4
 800b164:	6864      	ldr	r4, [r4, #4]
 800b166:	e7b2      	b.n	800b0ce <_malloc_r+0x32>
 800b168:	4634      	mov	r4, r6
 800b16a:	6876      	ldr	r6, [r6, #4]
 800b16c:	e7b9      	b.n	800b0e2 <_malloc_r+0x46>
 800b16e:	230c      	movs	r3, #12
 800b170:	603b      	str	r3, [r7, #0]
 800b172:	4638      	mov	r0, r7
 800b174:	f000 f9ee 	bl	800b554 <__malloc_unlock>
 800b178:	e7a1      	b.n	800b0be <_malloc_r+0x22>
 800b17a:	6025      	str	r5, [r4, #0]
 800b17c:	e7de      	b.n	800b13c <_malloc_r+0xa0>
 800b17e:	bf00      	nop
 800b180:	20000a8c 	.word	0x20000a8c

0800b184 <__ssputs_r>:
 800b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b188:	688e      	ldr	r6, [r1, #8]
 800b18a:	429e      	cmp	r6, r3
 800b18c:	4682      	mov	sl, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	4690      	mov	r8, r2
 800b192:	461f      	mov	r7, r3
 800b194:	d838      	bhi.n	800b208 <__ssputs_r+0x84>
 800b196:	898a      	ldrh	r2, [r1, #12]
 800b198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b19c:	d032      	beq.n	800b204 <__ssputs_r+0x80>
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	6909      	ldr	r1, [r1, #16]
 800b1a2:	eba5 0901 	sub.w	r9, r5, r1
 800b1a6:	6965      	ldr	r5, [r4, #20]
 800b1a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	444b      	add	r3, r9
 800b1b4:	106d      	asrs	r5, r5, #1
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	bf38      	it	cc
 800b1ba:	461d      	movcc	r5, r3
 800b1bc:	0553      	lsls	r3, r2, #21
 800b1be:	d531      	bpl.n	800b224 <__ssputs_r+0xa0>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7ff ff6b 	bl	800b09c <_malloc_r>
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	b950      	cbnz	r0, 800b1e0 <__ssputs_r+0x5c>
 800b1ca:	230c      	movs	r3, #12
 800b1cc:	f8ca 3000 	str.w	r3, [sl]
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d6:	81a3      	strh	r3, [r4, #12]
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e0:	6921      	ldr	r1, [r4, #16]
 800b1e2:	464a      	mov	r2, r9
 800b1e4:	f7ff fa0c 	bl	800a600 <memcpy>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	6126      	str	r6, [r4, #16]
 800b1f6:	6165      	str	r5, [r4, #20]
 800b1f8:	444e      	add	r6, r9
 800b1fa:	eba5 0509 	sub.w	r5, r5, r9
 800b1fe:	6026      	str	r6, [r4, #0]
 800b200:	60a5      	str	r5, [r4, #8]
 800b202:	463e      	mov	r6, r7
 800b204:	42be      	cmp	r6, r7
 800b206:	d900      	bls.n	800b20a <__ssputs_r+0x86>
 800b208:	463e      	mov	r6, r7
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	4632      	mov	r2, r6
 800b20e:	4641      	mov	r1, r8
 800b210:	f000 f980 	bl	800b514 <memmove>
 800b214:	68a3      	ldr	r3, [r4, #8]
 800b216:	1b9b      	subs	r3, r3, r6
 800b218:	60a3      	str	r3, [r4, #8]
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	4433      	add	r3, r6
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	2000      	movs	r0, #0
 800b222:	e7db      	b.n	800b1dc <__ssputs_r+0x58>
 800b224:	462a      	mov	r2, r5
 800b226:	f000 f99b 	bl	800b560 <_realloc_r>
 800b22a:	4606      	mov	r6, r0
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1e1      	bne.n	800b1f4 <__ssputs_r+0x70>
 800b230:	6921      	ldr	r1, [r4, #16]
 800b232:	4650      	mov	r0, sl
 800b234:	f7ff fec6 	bl	800afc4 <_free_r>
 800b238:	e7c7      	b.n	800b1ca <__ssputs_r+0x46>
	...

0800b23c <_svfiprintf_r>:
 800b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	4698      	mov	r8, r3
 800b242:	898b      	ldrh	r3, [r1, #12]
 800b244:	061b      	lsls	r3, r3, #24
 800b246:	b09d      	sub	sp, #116	; 0x74
 800b248:	4607      	mov	r7, r0
 800b24a:	460d      	mov	r5, r1
 800b24c:	4614      	mov	r4, r2
 800b24e:	d50e      	bpl.n	800b26e <_svfiprintf_r+0x32>
 800b250:	690b      	ldr	r3, [r1, #16]
 800b252:	b963      	cbnz	r3, 800b26e <_svfiprintf_r+0x32>
 800b254:	2140      	movs	r1, #64	; 0x40
 800b256:	f7ff ff21 	bl	800b09c <_malloc_r>
 800b25a:	6028      	str	r0, [r5, #0]
 800b25c:	6128      	str	r0, [r5, #16]
 800b25e:	b920      	cbnz	r0, 800b26a <_svfiprintf_r+0x2e>
 800b260:	230c      	movs	r3, #12
 800b262:	603b      	str	r3, [r7, #0]
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
 800b268:	e0d1      	b.n	800b40e <_svfiprintf_r+0x1d2>
 800b26a:	2340      	movs	r3, #64	; 0x40
 800b26c:	616b      	str	r3, [r5, #20]
 800b26e:	2300      	movs	r3, #0
 800b270:	9309      	str	r3, [sp, #36]	; 0x24
 800b272:	2320      	movs	r3, #32
 800b274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b278:	f8cd 800c 	str.w	r8, [sp, #12]
 800b27c:	2330      	movs	r3, #48	; 0x30
 800b27e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b428 <_svfiprintf_r+0x1ec>
 800b282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b286:	f04f 0901 	mov.w	r9, #1
 800b28a:	4623      	mov	r3, r4
 800b28c:	469a      	mov	sl, r3
 800b28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b292:	b10a      	cbz	r2, 800b298 <_svfiprintf_r+0x5c>
 800b294:	2a25      	cmp	r2, #37	; 0x25
 800b296:	d1f9      	bne.n	800b28c <_svfiprintf_r+0x50>
 800b298:	ebba 0b04 	subs.w	fp, sl, r4
 800b29c:	d00b      	beq.n	800b2b6 <_svfiprintf_r+0x7a>
 800b29e:	465b      	mov	r3, fp
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ff6d 	bl	800b184 <__ssputs_r>
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	f000 80aa 	beq.w	800b404 <_svfiprintf_r+0x1c8>
 800b2b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b2:	445a      	add	r2, fp
 800b2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 80a2 	beq.w	800b404 <_svfiprintf_r+0x1c8>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ca:	f10a 0a01 	add.w	sl, sl, #1
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b2d8:	4654      	mov	r4, sl
 800b2da:	2205      	movs	r2, #5
 800b2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e0:	4851      	ldr	r0, [pc, #324]	; (800b428 <_svfiprintf_r+0x1ec>)
 800b2e2:	f7f4 ffb5 	bl	8000250 <memchr>
 800b2e6:	9a04      	ldr	r2, [sp, #16]
 800b2e8:	b9d8      	cbnz	r0, 800b322 <_svfiprintf_r+0xe6>
 800b2ea:	06d0      	lsls	r0, r2, #27
 800b2ec:	bf44      	itt	mi
 800b2ee:	2320      	movmi	r3, #32
 800b2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f4:	0711      	lsls	r1, r2, #28
 800b2f6:	bf44      	itt	mi
 800b2f8:	232b      	movmi	r3, #43	; 0x2b
 800b2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b302:	2b2a      	cmp	r3, #42	; 0x2a
 800b304:	d015      	beq.n	800b332 <_svfiprintf_r+0xf6>
 800b306:	9a07      	ldr	r2, [sp, #28]
 800b308:	4654      	mov	r4, sl
 800b30a:	2000      	movs	r0, #0
 800b30c:	f04f 0c0a 	mov.w	ip, #10
 800b310:	4621      	mov	r1, r4
 800b312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b316:	3b30      	subs	r3, #48	; 0x30
 800b318:	2b09      	cmp	r3, #9
 800b31a:	d94e      	bls.n	800b3ba <_svfiprintf_r+0x17e>
 800b31c:	b1b0      	cbz	r0, 800b34c <_svfiprintf_r+0x110>
 800b31e:	9207      	str	r2, [sp, #28]
 800b320:	e014      	b.n	800b34c <_svfiprintf_r+0x110>
 800b322:	eba0 0308 	sub.w	r3, r0, r8
 800b326:	fa09 f303 	lsl.w	r3, r9, r3
 800b32a:	4313      	orrs	r3, r2
 800b32c:	9304      	str	r3, [sp, #16]
 800b32e:	46a2      	mov	sl, r4
 800b330:	e7d2      	b.n	800b2d8 <_svfiprintf_r+0x9c>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	1d19      	adds	r1, r3, #4
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	9103      	str	r1, [sp, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bfbb      	ittet	lt
 800b33e:	425b      	neglt	r3, r3
 800b340:	f042 0202 	orrlt.w	r2, r2, #2
 800b344:	9307      	strge	r3, [sp, #28]
 800b346:	9307      	strlt	r3, [sp, #28]
 800b348:	bfb8      	it	lt
 800b34a:	9204      	strlt	r2, [sp, #16]
 800b34c:	7823      	ldrb	r3, [r4, #0]
 800b34e:	2b2e      	cmp	r3, #46	; 0x2e
 800b350:	d10c      	bne.n	800b36c <_svfiprintf_r+0x130>
 800b352:	7863      	ldrb	r3, [r4, #1]
 800b354:	2b2a      	cmp	r3, #42	; 0x2a
 800b356:	d135      	bne.n	800b3c4 <_svfiprintf_r+0x188>
 800b358:	9b03      	ldr	r3, [sp, #12]
 800b35a:	1d1a      	adds	r2, r3, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	9203      	str	r2, [sp, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	bfb8      	it	lt
 800b364:	f04f 33ff 	movlt.w	r3, #4294967295
 800b368:	3402      	adds	r4, #2
 800b36a:	9305      	str	r3, [sp, #20]
 800b36c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b438 <_svfiprintf_r+0x1fc>
 800b370:	7821      	ldrb	r1, [r4, #0]
 800b372:	2203      	movs	r2, #3
 800b374:	4650      	mov	r0, sl
 800b376:	f7f4 ff6b 	bl	8000250 <memchr>
 800b37a:	b140      	cbz	r0, 800b38e <_svfiprintf_r+0x152>
 800b37c:	2340      	movs	r3, #64	; 0x40
 800b37e:	eba0 000a 	sub.w	r0, r0, sl
 800b382:	fa03 f000 	lsl.w	r0, r3, r0
 800b386:	9b04      	ldr	r3, [sp, #16]
 800b388:	4303      	orrs	r3, r0
 800b38a:	3401      	adds	r4, #1
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b392:	4826      	ldr	r0, [pc, #152]	; (800b42c <_svfiprintf_r+0x1f0>)
 800b394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b398:	2206      	movs	r2, #6
 800b39a:	f7f4 ff59 	bl	8000250 <memchr>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d038      	beq.n	800b414 <_svfiprintf_r+0x1d8>
 800b3a2:	4b23      	ldr	r3, [pc, #140]	; (800b430 <_svfiprintf_r+0x1f4>)
 800b3a4:	bb1b      	cbnz	r3, 800b3ee <_svfiprintf_r+0x1b2>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	3307      	adds	r3, #7
 800b3aa:	f023 0307 	bic.w	r3, r3, #7
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	9303      	str	r3, [sp, #12]
 800b3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b4:	4433      	add	r3, r6
 800b3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b8:	e767      	b.n	800b28a <_svfiprintf_r+0x4e>
 800b3ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3be:	460c      	mov	r4, r1
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	e7a5      	b.n	800b310 <_svfiprintf_r+0xd4>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	3401      	adds	r4, #1
 800b3c8:	9305      	str	r3, [sp, #20]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	f04f 0c0a 	mov.w	ip, #10
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d6:	3a30      	subs	r2, #48	; 0x30
 800b3d8:	2a09      	cmp	r2, #9
 800b3da:	d903      	bls.n	800b3e4 <_svfiprintf_r+0x1a8>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0c5      	beq.n	800b36c <_svfiprintf_r+0x130>
 800b3e0:	9105      	str	r1, [sp, #20]
 800b3e2:	e7c3      	b.n	800b36c <_svfiprintf_r+0x130>
 800b3e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e7f0      	b.n	800b3d0 <_svfiprintf_r+0x194>
 800b3ee:	ab03      	add	r3, sp, #12
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	462a      	mov	r2, r5
 800b3f4:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <_svfiprintf_r+0x1f8>)
 800b3f6:	a904      	add	r1, sp, #16
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	f7fc fb41 	bl	8007a80 <_printf_float>
 800b3fe:	1c42      	adds	r2, r0, #1
 800b400:	4606      	mov	r6, r0
 800b402:	d1d6      	bne.n	800b3b2 <_svfiprintf_r+0x176>
 800b404:	89ab      	ldrh	r3, [r5, #12]
 800b406:	065b      	lsls	r3, r3, #25
 800b408:	f53f af2c 	bmi.w	800b264 <_svfiprintf_r+0x28>
 800b40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b40e:	b01d      	add	sp, #116	; 0x74
 800b410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b414:	ab03      	add	r3, sp, #12
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	462a      	mov	r2, r5
 800b41a:	4b06      	ldr	r3, [pc, #24]	; (800b434 <_svfiprintf_r+0x1f8>)
 800b41c:	a904      	add	r1, sp, #16
 800b41e:	4638      	mov	r0, r7
 800b420:	f7fc fdba 	bl	8007f98 <_printf_i>
 800b424:	e7eb      	b.n	800b3fe <_svfiprintf_r+0x1c2>
 800b426:	bf00      	nop
 800b428:	080320a4 	.word	0x080320a4
 800b42c:	080320ae 	.word	0x080320ae
 800b430:	08007a81 	.word	0x08007a81
 800b434:	0800b185 	.word	0x0800b185
 800b438:	080320aa 	.word	0x080320aa
 800b43c:	00000000 	.word	0x00000000

0800b440 <nan>:
 800b440:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b448 <nan+0x8>
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	00000000 	.word	0x00000000
 800b44c:	7ff80000 	.word	0x7ff80000

0800b450 <_sbrk_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d06      	ldr	r5, [pc, #24]	; (800b46c <_sbrk_r+0x1c>)
 800b454:	2300      	movs	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f6 febc 	bl	80021d8 <_sbrk>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_sbrk_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_sbrk_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	20000a94 	.word	0x20000a94

0800b470 <strncmp>:
 800b470:	b510      	push	{r4, lr}
 800b472:	b17a      	cbz	r2, 800b494 <strncmp+0x24>
 800b474:	4603      	mov	r3, r0
 800b476:	3901      	subs	r1, #1
 800b478:	1884      	adds	r4, r0, r2
 800b47a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b47e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b482:	4290      	cmp	r0, r2
 800b484:	d101      	bne.n	800b48a <strncmp+0x1a>
 800b486:	42a3      	cmp	r3, r4
 800b488:	d101      	bne.n	800b48e <strncmp+0x1e>
 800b48a:	1a80      	subs	r0, r0, r2
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	2800      	cmp	r0, #0
 800b490:	d1f3      	bne.n	800b47a <strncmp+0xa>
 800b492:	e7fa      	b.n	800b48a <strncmp+0x1a>
 800b494:	4610      	mov	r0, r2
 800b496:	e7f9      	b.n	800b48c <strncmp+0x1c>

0800b498 <__ascii_wctomb>:
 800b498:	b149      	cbz	r1, 800b4ae <__ascii_wctomb+0x16>
 800b49a:	2aff      	cmp	r2, #255	; 0xff
 800b49c:	bf85      	ittet	hi
 800b49e:	238a      	movhi	r3, #138	; 0x8a
 800b4a0:	6003      	strhi	r3, [r0, #0]
 800b4a2:	700a      	strbls	r2, [r1, #0]
 800b4a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4a8:	bf98      	it	ls
 800b4aa:	2001      	movls	r0, #1
 800b4ac:	4770      	bx	lr
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <__assert_func>:
 800b4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4b6:	4614      	mov	r4, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <__assert_func+0x2c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	68d8      	ldr	r0, [r3, #12]
 800b4c2:	b14c      	cbz	r4, 800b4d8 <__assert_func+0x24>
 800b4c4:	4b07      	ldr	r3, [pc, #28]	; (800b4e4 <__assert_func+0x30>)
 800b4c6:	9100      	str	r1, [sp, #0]
 800b4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4cc:	4906      	ldr	r1, [pc, #24]	; (800b4e8 <__assert_func+0x34>)
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	f000 f80e 	bl	800b4f0 <fiprintf>
 800b4d4:	f000 fa8c 	bl	800b9f0 <abort>
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <__assert_func+0x38>)
 800b4da:	461c      	mov	r4, r3
 800b4dc:	e7f3      	b.n	800b4c6 <__assert_func+0x12>
 800b4de:	bf00      	nop
 800b4e0:	20000010 	.word	0x20000010
 800b4e4:	080320b5 	.word	0x080320b5
 800b4e8:	080320c2 	.word	0x080320c2
 800b4ec:	080320f0 	.word	0x080320f0

0800b4f0 <fiprintf>:
 800b4f0:	b40e      	push	{r1, r2, r3}
 800b4f2:	b503      	push	{r0, r1, lr}
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	ab03      	add	r3, sp, #12
 800b4f8:	4805      	ldr	r0, [pc, #20]	; (800b510 <fiprintf+0x20>)
 800b4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4fe:	6800      	ldr	r0, [r0, #0]
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	f000 f885 	bl	800b610 <_vfiprintf_r>
 800b506:	b002      	add	sp, #8
 800b508:	f85d eb04 	ldr.w	lr, [sp], #4
 800b50c:	b003      	add	sp, #12
 800b50e:	4770      	bx	lr
 800b510:	20000010 	.word	0x20000010

0800b514 <memmove>:
 800b514:	4288      	cmp	r0, r1
 800b516:	b510      	push	{r4, lr}
 800b518:	eb01 0402 	add.w	r4, r1, r2
 800b51c:	d902      	bls.n	800b524 <memmove+0x10>
 800b51e:	4284      	cmp	r4, r0
 800b520:	4623      	mov	r3, r4
 800b522:	d807      	bhi.n	800b534 <memmove+0x20>
 800b524:	1e43      	subs	r3, r0, #1
 800b526:	42a1      	cmp	r1, r4
 800b528:	d008      	beq.n	800b53c <memmove+0x28>
 800b52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b532:	e7f8      	b.n	800b526 <memmove+0x12>
 800b534:	4402      	add	r2, r0
 800b536:	4601      	mov	r1, r0
 800b538:	428a      	cmp	r2, r1
 800b53a:	d100      	bne.n	800b53e <memmove+0x2a>
 800b53c:	bd10      	pop	{r4, pc}
 800b53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b546:	e7f7      	b.n	800b538 <memmove+0x24>

0800b548 <__malloc_lock>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__malloc_lock+0x8>)
 800b54a:	f000 bc11 	b.w	800bd70 <__retarget_lock_acquire_recursive>
 800b54e:	bf00      	nop
 800b550:	20000a98 	.word	0x20000a98

0800b554 <__malloc_unlock>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__malloc_unlock+0x8>)
 800b556:	f000 bc0c 	b.w	800bd72 <__retarget_lock_release_recursive>
 800b55a:	bf00      	nop
 800b55c:	20000a98 	.word	0x20000a98

0800b560 <_realloc_r>:
 800b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b564:	4680      	mov	r8, r0
 800b566:	4614      	mov	r4, r2
 800b568:	460e      	mov	r6, r1
 800b56a:	b921      	cbnz	r1, 800b576 <_realloc_r+0x16>
 800b56c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b570:	4611      	mov	r1, r2
 800b572:	f7ff bd93 	b.w	800b09c <_malloc_r>
 800b576:	b92a      	cbnz	r2, 800b584 <_realloc_r+0x24>
 800b578:	f7ff fd24 	bl	800afc4 <_free_r>
 800b57c:	4625      	mov	r5, r4
 800b57e:	4628      	mov	r0, r5
 800b580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b584:	f000 fc5c 	bl	800be40 <_malloc_usable_size_r>
 800b588:	4284      	cmp	r4, r0
 800b58a:	4607      	mov	r7, r0
 800b58c:	d802      	bhi.n	800b594 <_realloc_r+0x34>
 800b58e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b592:	d812      	bhi.n	800b5ba <_realloc_r+0x5a>
 800b594:	4621      	mov	r1, r4
 800b596:	4640      	mov	r0, r8
 800b598:	f7ff fd80 	bl	800b09c <_malloc_r>
 800b59c:	4605      	mov	r5, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d0ed      	beq.n	800b57e <_realloc_r+0x1e>
 800b5a2:	42bc      	cmp	r4, r7
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	bf28      	it	cs
 800b5aa:	463a      	movcs	r2, r7
 800b5ac:	f7ff f828 	bl	800a600 <memcpy>
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	f7ff fd06 	bl	800afc4 <_free_r>
 800b5b8:	e7e1      	b.n	800b57e <_realloc_r+0x1e>
 800b5ba:	4635      	mov	r5, r6
 800b5bc:	e7df      	b.n	800b57e <_realloc_r+0x1e>

0800b5be <__sfputc_r>:
 800b5be:	6893      	ldr	r3, [r2, #8]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	b410      	push	{r4}
 800b5c6:	6093      	str	r3, [r2, #8]
 800b5c8:	da08      	bge.n	800b5dc <__sfputc_r+0x1e>
 800b5ca:	6994      	ldr	r4, [r2, #24]
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	db01      	blt.n	800b5d4 <__sfputc_r+0x16>
 800b5d0:	290a      	cmp	r1, #10
 800b5d2:	d103      	bne.n	800b5dc <__sfputc_r+0x1e>
 800b5d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5d8:	f000 b94a 	b.w	800b870 <__swbuf_r>
 800b5dc:	6813      	ldr	r3, [r2, #0]
 800b5de:	1c58      	adds	r0, r3, #1
 800b5e0:	6010      	str	r0, [r2, #0]
 800b5e2:	7019      	strb	r1, [r3, #0]
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <__sfputs_r>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	4614      	mov	r4, r2
 800b5f4:	18d5      	adds	r5, r2, r3
 800b5f6:	42ac      	cmp	r4, r5
 800b5f8:	d101      	bne.n	800b5fe <__sfputs_r+0x12>
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e007      	b.n	800b60e <__sfputs_r+0x22>
 800b5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b602:	463a      	mov	r2, r7
 800b604:	4630      	mov	r0, r6
 800b606:	f7ff ffda 	bl	800b5be <__sfputc_r>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	d1f3      	bne.n	800b5f6 <__sfputs_r+0xa>
 800b60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b610 <_vfiprintf_r>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	460d      	mov	r5, r1
 800b616:	b09d      	sub	sp, #116	; 0x74
 800b618:	4614      	mov	r4, r2
 800b61a:	4698      	mov	r8, r3
 800b61c:	4606      	mov	r6, r0
 800b61e:	b118      	cbz	r0, 800b628 <_vfiprintf_r+0x18>
 800b620:	6983      	ldr	r3, [r0, #24]
 800b622:	b90b      	cbnz	r3, 800b628 <_vfiprintf_r+0x18>
 800b624:	f000 fb06 	bl	800bc34 <__sinit>
 800b628:	4b89      	ldr	r3, [pc, #548]	; (800b850 <_vfiprintf_r+0x240>)
 800b62a:	429d      	cmp	r5, r3
 800b62c:	d11b      	bne.n	800b666 <_vfiprintf_r+0x56>
 800b62e:	6875      	ldr	r5, [r6, #4]
 800b630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b632:	07d9      	lsls	r1, r3, #31
 800b634:	d405      	bmi.n	800b642 <_vfiprintf_r+0x32>
 800b636:	89ab      	ldrh	r3, [r5, #12]
 800b638:	059a      	lsls	r2, r3, #22
 800b63a:	d402      	bmi.n	800b642 <_vfiprintf_r+0x32>
 800b63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b63e:	f000 fb97 	bl	800bd70 <__retarget_lock_acquire_recursive>
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	071b      	lsls	r3, r3, #28
 800b646:	d501      	bpl.n	800b64c <_vfiprintf_r+0x3c>
 800b648:	692b      	ldr	r3, [r5, #16]
 800b64a:	b9eb      	cbnz	r3, 800b688 <_vfiprintf_r+0x78>
 800b64c:	4629      	mov	r1, r5
 800b64e:	4630      	mov	r0, r6
 800b650:	f000 f960 	bl	800b914 <__swsetup_r>
 800b654:	b1c0      	cbz	r0, 800b688 <_vfiprintf_r+0x78>
 800b656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b658:	07dc      	lsls	r4, r3, #31
 800b65a:	d50e      	bpl.n	800b67a <_vfiprintf_r+0x6a>
 800b65c:	f04f 30ff 	mov.w	r0, #4294967295
 800b660:	b01d      	add	sp, #116	; 0x74
 800b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b666:	4b7b      	ldr	r3, [pc, #492]	; (800b854 <_vfiprintf_r+0x244>)
 800b668:	429d      	cmp	r5, r3
 800b66a:	d101      	bne.n	800b670 <_vfiprintf_r+0x60>
 800b66c:	68b5      	ldr	r5, [r6, #8]
 800b66e:	e7df      	b.n	800b630 <_vfiprintf_r+0x20>
 800b670:	4b79      	ldr	r3, [pc, #484]	; (800b858 <_vfiprintf_r+0x248>)
 800b672:	429d      	cmp	r5, r3
 800b674:	bf08      	it	eq
 800b676:	68f5      	ldreq	r5, [r6, #12]
 800b678:	e7da      	b.n	800b630 <_vfiprintf_r+0x20>
 800b67a:	89ab      	ldrh	r3, [r5, #12]
 800b67c:	0598      	lsls	r0, r3, #22
 800b67e:	d4ed      	bmi.n	800b65c <_vfiprintf_r+0x4c>
 800b680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b682:	f000 fb76 	bl	800bd72 <__retarget_lock_release_recursive>
 800b686:	e7e9      	b.n	800b65c <_vfiprintf_r+0x4c>
 800b688:	2300      	movs	r3, #0
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	2320      	movs	r3, #32
 800b68e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b692:	f8cd 800c 	str.w	r8, [sp, #12]
 800b696:	2330      	movs	r3, #48	; 0x30
 800b698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b85c <_vfiprintf_r+0x24c>
 800b69c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6a0:	f04f 0901 	mov.w	r9, #1
 800b6a4:	4623      	mov	r3, r4
 800b6a6:	469a      	mov	sl, r3
 800b6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ac:	b10a      	cbz	r2, 800b6b2 <_vfiprintf_r+0xa2>
 800b6ae:	2a25      	cmp	r2, #37	; 0x25
 800b6b0:	d1f9      	bne.n	800b6a6 <_vfiprintf_r+0x96>
 800b6b2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6b6:	d00b      	beq.n	800b6d0 <_vfiprintf_r+0xc0>
 800b6b8:	465b      	mov	r3, fp
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7ff ff94 	bl	800b5ec <__sfputs_r>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f000 80aa 	beq.w	800b81e <_vfiprintf_r+0x20e>
 800b6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6cc:	445a      	add	r2, fp
 800b6ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80a2 	beq.w	800b81e <_vfiprintf_r+0x20e>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6e4:	f10a 0a01 	add.w	sl, sl, #1
 800b6e8:	9304      	str	r3, [sp, #16]
 800b6ea:	9307      	str	r3, [sp, #28]
 800b6ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6f0:	931a      	str	r3, [sp, #104]	; 0x68
 800b6f2:	4654      	mov	r4, sl
 800b6f4:	2205      	movs	r2, #5
 800b6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6fa:	4858      	ldr	r0, [pc, #352]	; (800b85c <_vfiprintf_r+0x24c>)
 800b6fc:	f7f4 fda8 	bl	8000250 <memchr>
 800b700:	9a04      	ldr	r2, [sp, #16]
 800b702:	b9d8      	cbnz	r0, 800b73c <_vfiprintf_r+0x12c>
 800b704:	06d1      	lsls	r1, r2, #27
 800b706:	bf44      	itt	mi
 800b708:	2320      	movmi	r3, #32
 800b70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b70e:	0713      	lsls	r3, r2, #28
 800b710:	bf44      	itt	mi
 800b712:	232b      	movmi	r3, #43	; 0x2b
 800b714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b718:	f89a 3000 	ldrb.w	r3, [sl]
 800b71c:	2b2a      	cmp	r3, #42	; 0x2a
 800b71e:	d015      	beq.n	800b74c <_vfiprintf_r+0x13c>
 800b720:	9a07      	ldr	r2, [sp, #28]
 800b722:	4654      	mov	r4, sl
 800b724:	2000      	movs	r0, #0
 800b726:	f04f 0c0a 	mov.w	ip, #10
 800b72a:	4621      	mov	r1, r4
 800b72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b730:	3b30      	subs	r3, #48	; 0x30
 800b732:	2b09      	cmp	r3, #9
 800b734:	d94e      	bls.n	800b7d4 <_vfiprintf_r+0x1c4>
 800b736:	b1b0      	cbz	r0, 800b766 <_vfiprintf_r+0x156>
 800b738:	9207      	str	r2, [sp, #28]
 800b73a:	e014      	b.n	800b766 <_vfiprintf_r+0x156>
 800b73c:	eba0 0308 	sub.w	r3, r0, r8
 800b740:	fa09 f303 	lsl.w	r3, r9, r3
 800b744:	4313      	orrs	r3, r2
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	46a2      	mov	sl, r4
 800b74a:	e7d2      	b.n	800b6f2 <_vfiprintf_r+0xe2>
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	1d19      	adds	r1, r3, #4
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	9103      	str	r1, [sp, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	bfbb      	ittet	lt
 800b758:	425b      	neglt	r3, r3
 800b75a:	f042 0202 	orrlt.w	r2, r2, #2
 800b75e:	9307      	strge	r3, [sp, #28]
 800b760:	9307      	strlt	r3, [sp, #28]
 800b762:	bfb8      	it	lt
 800b764:	9204      	strlt	r2, [sp, #16]
 800b766:	7823      	ldrb	r3, [r4, #0]
 800b768:	2b2e      	cmp	r3, #46	; 0x2e
 800b76a:	d10c      	bne.n	800b786 <_vfiprintf_r+0x176>
 800b76c:	7863      	ldrb	r3, [r4, #1]
 800b76e:	2b2a      	cmp	r3, #42	; 0x2a
 800b770:	d135      	bne.n	800b7de <_vfiprintf_r+0x1ce>
 800b772:	9b03      	ldr	r3, [sp, #12]
 800b774:	1d1a      	adds	r2, r3, #4
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	9203      	str	r2, [sp, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	bfb8      	it	lt
 800b77e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b782:	3402      	adds	r4, #2
 800b784:	9305      	str	r3, [sp, #20]
 800b786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b86c <_vfiprintf_r+0x25c>
 800b78a:	7821      	ldrb	r1, [r4, #0]
 800b78c:	2203      	movs	r2, #3
 800b78e:	4650      	mov	r0, sl
 800b790:	f7f4 fd5e 	bl	8000250 <memchr>
 800b794:	b140      	cbz	r0, 800b7a8 <_vfiprintf_r+0x198>
 800b796:	2340      	movs	r3, #64	; 0x40
 800b798:	eba0 000a 	sub.w	r0, r0, sl
 800b79c:	fa03 f000 	lsl.w	r0, r3, r0
 800b7a0:	9b04      	ldr	r3, [sp, #16]
 800b7a2:	4303      	orrs	r3, r0
 800b7a4:	3401      	adds	r4, #1
 800b7a6:	9304      	str	r3, [sp, #16]
 800b7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ac:	482c      	ldr	r0, [pc, #176]	; (800b860 <_vfiprintf_r+0x250>)
 800b7ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7b2:	2206      	movs	r2, #6
 800b7b4:	f7f4 fd4c 	bl	8000250 <memchr>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d03f      	beq.n	800b83c <_vfiprintf_r+0x22c>
 800b7bc:	4b29      	ldr	r3, [pc, #164]	; (800b864 <_vfiprintf_r+0x254>)
 800b7be:	bb1b      	cbnz	r3, 800b808 <_vfiprintf_r+0x1f8>
 800b7c0:	9b03      	ldr	r3, [sp, #12]
 800b7c2:	3307      	adds	r3, #7
 800b7c4:	f023 0307 	bic.w	r3, r3, #7
 800b7c8:	3308      	adds	r3, #8
 800b7ca:	9303      	str	r3, [sp, #12]
 800b7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ce:	443b      	add	r3, r7
 800b7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d2:	e767      	b.n	800b6a4 <_vfiprintf_r+0x94>
 800b7d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d8:	460c      	mov	r4, r1
 800b7da:	2001      	movs	r0, #1
 800b7dc:	e7a5      	b.n	800b72a <_vfiprintf_r+0x11a>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	3401      	adds	r4, #1
 800b7e2:	9305      	str	r3, [sp, #20]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	f04f 0c0a 	mov.w	ip, #10
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7f0:	3a30      	subs	r2, #48	; 0x30
 800b7f2:	2a09      	cmp	r2, #9
 800b7f4:	d903      	bls.n	800b7fe <_vfiprintf_r+0x1ee>
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0c5      	beq.n	800b786 <_vfiprintf_r+0x176>
 800b7fa:	9105      	str	r1, [sp, #20]
 800b7fc:	e7c3      	b.n	800b786 <_vfiprintf_r+0x176>
 800b7fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b802:	4604      	mov	r4, r0
 800b804:	2301      	movs	r3, #1
 800b806:	e7f0      	b.n	800b7ea <_vfiprintf_r+0x1da>
 800b808:	ab03      	add	r3, sp, #12
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	462a      	mov	r2, r5
 800b80e:	4b16      	ldr	r3, [pc, #88]	; (800b868 <_vfiprintf_r+0x258>)
 800b810:	a904      	add	r1, sp, #16
 800b812:	4630      	mov	r0, r6
 800b814:	f7fc f934 	bl	8007a80 <_printf_float>
 800b818:	4607      	mov	r7, r0
 800b81a:	1c78      	adds	r0, r7, #1
 800b81c:	d1d6      	bne.n	800b7cc <_vfiprintf_r+0x1bc>
 800b81e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b820:	07d9      	lsls	r1, r3, #31
 800b822:	d405      	bmi.n	800b830 <_vfiprintf_r+0x220>
 800b824:	89ab      	ldrh	r3, [r5, #12]
 800b826:	059a      	lsls	r2, r3, #22
 800b828:	d402      	bmi.n	800b830 <_vfiprintf_r+0x220>
 800b82a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b82c:	f000 faa1 	bl	800bd72 <__retarget_lock_release_recursive>
 800b830:	89ab      	ldrh	r3, [r5, #12]
 800b832:	065b      	lsls	r3, r3, #25
 800b834:	f53f af12 	bmi.w	800b65c <_vfiprintf_r+0x4c>
 800b838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b83a:	e711      	b.n	800b660 <_vfiprintf_r+0x50>
 800b83c:	ab03      	add	r3, sp, #12
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	462a      	mov	r2, r5
 800b842:	4b09      	ldr	r3, [pc, #36]	; (800b868 <_vfiprintf_r+0x258>)
 800b844:	a904      	add	r1, sp, #16
 800b846:	4630      	mov	r0, r6
 800b848:	f7fc fba6 	bl	8007f98 <_printf_i>
 800b84c:	e7e4      	b.n	800b818 <_vfiprintf_r+0x208>
 800b84e:	bf00      	nop
 800b850:	08032114 	.word	0x08032114
 800b854:	08032134 	.word	0x08032134
 800b858:	080320f4 	.word	0x080320f4
 800b85c:	080320a4 	.word	0x080320a4
 800b860:	080320ae 	.word	0x080320ae
 800b864:	08007a81 	.word	0x08007a81
 800b868:	0800b5ed 	.word	0x0800b5ed
 800b86c:	080320aa 	.word	0x080320aa

0800b870 <__swbuf_r>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	460e      	mov	r6, r1
 800b874:	4614      	mov	r4, r2
 800b876:	4605      	mov	r5, r0
 800b878:	b118      	cbz	r0, 800b882 <__swbuf_r+0x12>
 800b87a:	6983      	ldr	r3, [r0, #24]
 800b87c:	b90b      	cbnz	r3, 800b882 <__swbuf_r+0x12>
 800b87e:	f000 f9d9 	bl	800bc34 <__sinit>
 800b882:	4b21      	ldr	r3, [pc, #132]	; (800b908 <__swbuf_r+0x98>)
 800b884:	429c      	cmp	r4, r3
 800b886:	d12b      	bne.n	800b8e0 <__swbuf_r+0x70>
 800b888:	686c      	ldr	r4, [r5, #4]
 800b88a:	69a3      	ldr	r3, [r4, #24]
 800b88c:	60a3      	str	r3, [r4, #8]
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	071a      	lsls	r2, r3, #28
 800b892:	d52f      	bpl.n	800b8f4 <__swbuf_r+0x84>
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	b36b      	cbz	r3, 800b8f4 <__swbuf_r+0x84>
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	6820      	ldr	r0, [r4, #0]
 800b89c:	1ac0      	subs	r0, r0, r3
 800b89e:	6963      	ldr	r3, [r4, #20]
 800b8a0:	b2f6      	uxtb	r6, r6
 800b8a2:	4283      	cmp	r3, r0
 800b8a4:	4637      	mov	r7, r6
 800b8a6:	dc04      	bgt.n	800b8b2 <__swbuf_r+0x42>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	f000 f92e 	bl	800bb0c <_fflush_r>
 800b8b0:	bb30      	cbnz	r0, 800b900 <__swbuf_r+0x90>
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	60a3      	str	r3, [r4, #8]
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	1c5a      	adds	r2, r3, #1
 800b8bc:	6022      	str	r2, [r4, #0]
 800b8be:	701e      	strb	r6, [r3, #0]
 800b8c0:	6963      	ldr	r3, [r4, #20]
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	4283      	cmp	r3, r0
 800b8c6:	d004      	beq.n	800b8d2 <__swbuf_r+0x62>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	07db      	lsls	r3, r3, #31
 800b8cc:	d506      	bpl.n	800b8dc <__swbuf_r+0x6c>
 800b8ce:	2e0a      	cmp	r6, #10
 800b8d0:	d104      	bne.n	800b8dc <__swbuf_r+0x6c>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f919 	bl	800bb0c <_fflush_r>
 800b8da:	b988      	cbnz	r0, 800b900 <__swbuf_r+0x90>
 800b8dc:	4638      	mov	r0, r7
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <__swbuf_r+0x9c>)
 800b8e2:	429c      	cmp	r4, r3
 800b8e4:	d101      	bne.n	800b8ea <__swbuf_r+0x7a>
 800b8e6:	68ac      	ldr	r4, [r5, #8]
 800b8e8:	e7cf      	b.n	800b88a <__swbuf_r+0x1a>
 800b8ea:	4b09      	ldr	r3, [pc, #36]	; (800b910 <__swbuf_r+0xa0>)
 800b8ec:	429c      	cmp	r4, r3
 800b8ee:	bf08      	it	eq
 800b8f0:	68ec      	ldreq	r4, [r5, #12]
 800b8f2:	e7ca      	b.n	800b88a <__swbuf_r+0x1a>
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f000 f80c 	bl	800b914 <__swsetup_r>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d0cb      	beq.n	800b898 <__swbuf_r+0x28>
 800b900:	f04f 37ff 	mov.w	r7, #4294967295
 800b904:	e7ea      	b.n	800b8dc <__swbuf_r+0x6c>
 800b906:	bf00      	nop
 800b908:	08032114 	.word	0x08032114
 800b90c:	08032134 	.word	0x08032134
 800b910:	080320f4 	.word	0x080320f4

0800b914 <__swsetup_r>:
 800b914:	4b32      	ldr	r3, [pc, #200]	; (800b9e0 <__swsetup_r+0xcc>)
 800b916:	b570      	push	{r4, r5, r6, lr}
 800b918:	681d      	ldr	r5, [r3, #0]
 800b91a:	4606      	mov	r6, r0
 800b91c:	460c      	mov	r4, r1
 800b91e:	b125      	cbz	r5, 800b92a <__swsetup_r+0x16>
 800b920:	69ab      	ldr	r3, [r5, #24]
 800b922:	b913      	cbnz	r3, 800b92a <__swsetup_r+0x16>
 800b924:	4628      	mov	r0, r5
 800b926:	f000 f985 	bl	800bc34 <__sinit>
 800b92a:	4b2e      	ldr	r3, [pc, #184]	; (800b9e4 <__swsetup_r+0xd0>)
 800b92c:	429c      	cmp	r4, r3
 800b92e:	d10f      	bne.n	800b950 <__swsetup_r+0x3c>
 800b930:	686c      	ldr	r4, [r5, #4]
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b938:	0719      	lsls	r1, r3, #28
 800b93a:	d42c      	bmi.n	800b996 <__swsetup_r+0x82>
 800b93c:	06dd      	lsls	r5, r3, #27
 800b93e:	d411      	bmi.n	800b964 <__swsetup_r+0x50>
 800b940:	2309      	movs	r3, #9
 800b942:	6033      	str	r3, [r6, #0]
 800b944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	f04f 30ff 	mov.w	r0, #4294967295
 800b94e:	e03e      	b.n	800b9ce <__swsetup_r+0xba>
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <__swsetup_r+0xd4>)
 800b952:	429c      	cmp	r4, r3
 800b954:	d101      	bne.n	800b95a <__swsetup_r+0x46>
 800b956:	68ac      	ldr	r4, [r5, #8]
 800b958:	e7eb      	b.n	800b932 <__swsetup_r+0x1e>
 800b95a:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <__swsetup_r+0xd8>)
 800b95c:	429c      	cmp	r4, r3
 800b95e:	bf08      	it	eq
 800b960:	68ec      	ldreq	r4, [r5, #12]
 800b962:	e7e6      	b.n	800b932 <__swsetup_r+0x1e>
 800b964:	0758      	lsls	r0, r3, #29
 800b966:	d512      	bpl.n	800b98e <__swsetup_r+0x7a>
 800b968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96a:	b141      	cbz	r1, 800b97e <__swsetup_r+0x6a>
 800b96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b970:	4299      	cmp	r1, r3
 800b972:	d002      	beq.n	800b97a <__swsetup_r+0x66>
 800b974:	4630      	mov	r0, r6
 800b976:	f7ff fb25 	bl	800afc4 <_free_r>
 800b97a:	2300      	movs	r3, #0
 800b97c:	6363      	str	r3, [r4, #52]	; 0x34
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	2300      	movs	r3, #0
 800b988:	6063      	str	r3, [r4, #4]
 800b98a:	6923      	ldr	r3, [r4, #16]
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	f043 0308 	orr.w	r3, r3, #8
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	b94b      	cbnz	r3, 800b9ae <__swsetup_r+0x9a>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9a4:	d003      	beq.n	800b9ae <__swsetup_r+0x9a>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f000 fa09 	bl	800bdc0 <__smakebuf_r>
 800b9ae:	89a0      	ldrh	r0, [r4, #12]
 800b9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9b4:	f010 0301 	ands.w	r3, r0, #1
 800b9b8:	d00a      	beq.n	800b9d0 <__swsetup_r+0xbc>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60a3      	str	r3, [r4, #8]
 800b9be:	6963      	ldr	r3, [r4, #20]
 800b9c0:	425b      	negs	r3, r3
 800b9c2:	61a3      	str	r3, [r4, #24]
 800b9c4:	6923      	ldr	r3, [r4, #16]
 800b9c6:	b943      	cbnz	r3, 800b9da <__swsetup_r+0xc6>
 800b9c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9cc:	d1ba      	bne.n	800b944 <__swsetup_r+0x30>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	0781      	lsls	r1, r0, #30
 800b9d2:	bf58      	it	pl
 800b9d4:	6963      	ldrpl	r3, [r4, #20]
 800b9d6:	60a3      	str	r3, [r4, #8]
 800b9d8:	e7f4      	b.n	800b9c4 <__swsetup_r+0xb0>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e7f7      	b.n	800b9ce <__swsetup_r+0xba>
 800b9de:	bf00      	nop
 800b9e0:	20000010 	.word	0x20000010
 800b9e4:	08032114 	.word	0x08032114
 800b9e8:	08032134 	.word	0x08032134
 800b9ec:	080320f4 	.word	0x080320f4

0800b9f0 <abort>:
 800b9f0:	b508      	push	{r3, lr}
 800b9f2:	2006      	movs	r0, #6
 800b9f4:	f000 fa54 	bl	800bea0 <raise>
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f7f6 fb75 	bl	80020e8 <_exit>
	...

0800ba00 <__sflush_r>:
 800ba00:	898a      	ldrh	r2, [r1, #12]
 800ba02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba06:	4605      	mov	r5, r0
 800ba08:	0710      	lsls	r0, r2, #28
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	d458      	bmi.n	800bac0 <__sflush_r+0xc0>
 800ba0e:	684b      	ldr	r3, [r1, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dc05      	bgt.n	800ba20 <__sflush_r+0x20>
 800ba14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dc02      	bgt.n	800ba20 <__sflush_r+0x20>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba22:	2e00      	cmp	r6, #0
 800ba24:	d0f9      	beq.n	800ba1a <__sflush_r+0x1a>
 800ba26:	2300      	movs	r3, #0
 800ba28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba2c:	682f      	ldr	r7, [r5, #0]
 800ba2e:	602b      	str	r3, [r5, #0]
 800ba30:	d032      	beq.n	800ba98 <__sflush_r+0x98>
 800ba32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	075a      	lsls	r2, r3, #29
 800ba38:	d505      	bpl.n	800ba46 <__sflush_r+0x46>
 800ba3a:	6863      	ldr	r3, [r4, #4]
 800ba3c:	1ac0      	subs	r0, r0, r3
 800ba3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba40:	b10b      	cbz	r3, 800ba46 <__sflush_r+0x46>
 800ba42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba44:	1ac0      	subs	r0, r0, r3
 800ba46:	2300      	movs	r3, #0
 800ba48:	4602      	mov	r2, r0
 800ba4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba4c:	6a21      	ldr	r1, [r4, #32]
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b0      	blx	r6
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	d106      	bne.n	800ba66 <__sflush_r+0x66>
 800ba58:	6829      	ldr	r1, [r5, #0]
 800ba5a:	291d      	cmp	r1, #29
 800ba5c:	d82c      	bhi.n	800bab8 <__sflush_r+0xb8>
 800ba5e:	4a2a      	ldr	r2, [pc, #168]	; (800bb08 <__sflush_r+0x108>)
 800ba60:	40ca      	lsrs	r2, r1
 800ba62:	07d6      	lsls	r6, r2, #31
 800ba64:	d528      	bpl.n	800bab8 <__sflush_r+0xb8>
 800ba66:	2200      	movs	r2, #0
 800ba68:	6062      	str	r2, [r4, #4]
 800ba6a:	04d9      	lsls	r1, r3, #19
 800ba6c:	6922      	ldr	r2, [r4, #16]
 800ba6e:	6022      	str	r2, [r4, #0]
 800ba70:	d504      	bpl.n	800ba7c <__sflush_r+0x7c>
 800ba72:	1c42      	adds	r2, r0, #1
 800ba74:	d101      	bne.n	800ba7a <__sflush_r+0x7a>
 800ba76:	682b      	ldr	r3, [r5, #0]
 800ba78:	b903      	cbnz	r3, 800ba7c <__sflush_r+0x7c>
 800ba7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba7e:	602f      	str	r7, [r5, #0]
 800ba80:	2900      	cmp	r1, #0
 800ba82:	d0ca      	beq.n	800ba1a <__sflush_r+0x1a>
 800ba84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba88:	4299      	cmp	r1, r3
 800ba8a:	d002      	beq.n	800ba92 <__sflush_r+0x92>
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f7ff fa99 	bl	800afc4 <_free_r>
 800ba92:	2000      	movs	r0, #0
 800ba94:	6360      	str	r0, [r4, #52]	; 0x34
 800ba96:	e7c1      	b.n	800ba1c <__sflush_r+0x1c>
 800ba98:	6a21      	ldr	r1, [r4, #32]
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	47b0      	blx	r6
 800baa0:	1c41      	adds	r1, r0, #1
 800baa2:	d1c7      	bne.n	800ba34 <__sflush_r+0x34>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0c4      	beq.n	800ba34 <__sflush_r+0x34>
 800baaa:	2b1d      	cmp	r3, #29
 800baac:	d001      	beq.n	800bab2 <__sflush_r+0xb2>
 800baae:	2b16      	cmp	r3, #22
 800bab0:	d101      	bne.n	800bab6 <__sflush_r+0xb6>
 800bab2:	602f      	str	r7, [r5, #0]
 800bab4:	e7b1      	b.n	800ba1a <__sflush_r+0x1a>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	e7ad      	b.n	800ba1c <__sflush_r+0x1c>
 800bac0:	690f      	ldr	r7, [r1, #16]
 800bac2:	2f00      	cmp	r7, #0
 800bac4:	d0a9      	beq.n	800ba1a <__sflush_r+0x1a>
 800bac6:	0793      	lsls	r3, r2, #30
 800bac8:	680e      	ldr	r6, [r1, #0]
 800baca:	bf08      	it	eq
 800bacc:	694b      	ldreq	r3, [r1, #20]
 800bace:	600f      	str	r7, [r1, #0]
 800bad0:	bf18      	it	ne
 800bad2:	2300      	movne	r3, #0
 800bad4:	eba6 0807 	sub.w	r8, r6, r7
 800bad8:	608b      	str	r3, [r1, #8]
 800bada:	f1b8 0f00 	cmp.w	r8, #0
 800bade:	dd9c      	ble.n	800ba1a <__sflush_r+0x1a>
 800bae0:	6a21      	ldr	r1, [r4, #32]
 800bae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bae4:	4643      	mov	r3, r8
 800bae6:	463a      	mov	r2, r7
 800bae8:	4628      	mov	r0, r5
 800baea:	47b0      	blx	r6
 800baec:	2800      	cmp	r0, #0
 800baee:	dc06      	bgt.n	800bafe <__sflush_r+0xfe>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf6:	81a3      	strh	r3, [r4, #12]
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	e78e      	b.n	800ba1c <__sflush_r+0x1c>
 800bafe:	4407      	add	r7, r0
 800bb00:	eba8 0800 	sub.w	r8, r8, r0
 800bb04:	e7e9      	b.n	800bada <__sflush_r+0xda>
 800bb06:	bf00      	nop
 800bb08:	20400001 	.word	0x20400001

0800bb0c <_fflush_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	690b      	ldr	r3, [r1, #16]
 800bb10:	4605      	mov	r5, r0
 800bb12:	460c      	mov	r4, r1
 800bb14:	b913      	cbnz	r3, 800bb1c <_fflush_r+0x10>
 800bb16:	2500      	movs	r5, #0
 800bb18:	4628      	mov	r0, r5
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	b118      	cbz	r0, 800bb26 <_fflush_r+0x1a>
 800bb1e:	6983      	ldr	r3, [r0, #24]
 800bb20:	b90b      	cbnz	r3, 800bb26 <_fflush_r+0x1a>
 800bb22:	f000 f887 	bl	800bc34 <__sinit>
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <_fflush_r+0x6c>)
 800bb28:	429c      	cmp	r4, r3
 800bb2a:	d11b      	bne.n	800bb64 <_fflush_r+0x58>
 800bb2c:	686c      	ldr	r4, [r5, #4]
 800bb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0ef      	beq.n	800bb16 <_fflush_r+0xa>
 800bb36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb38:	07d0      	lsls	r0, r2, #31
 800bb3a:	d404      	bmi.n	800bb46 <_fflush_r+0x3a>
 800bb3c:	0599      	lsls	r1, r3, #22
 800bb3e:	d402      	bmi.n	800bb46 <_fflush_r+0x3a>
 800bb40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb42:	f000 f915 	bl	800bd70 <__retarget_lock_acquire_recursive>
 800bb46:	4628      	mov	r0, r5
 800bb48:	4621      	mov	r1, r4
 800bb4a:	f7ff ff59 	bl	800ba00 <__sflush_r>
 800bb4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb50:	07da      	lsls	r2, r3, #31
 800bb52:	4605      	mov	r5, r0
 800bb54:	d4e0      	bmi.n	800bb18 <_fflush_r+0xc>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	059b      	lsls	r3, r3, #22
 800bb5a:	d4dd      	bmi.n	800bb18 <_fflush_r+0xc>
 800bb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb5e:	f000 f908 	bl	800bd72 <__retarget_lock_release_recursive>
 800bb62:	e7d9      	b.n	800bb18 <_fflush_r+0xc>
 800bb64:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <_fflush_r+0x70>)
 800bb66:	429c      	cmp	r4, r3
 800bb68:	d101      	bne.n	800bb6e <_fflush_r+0x62>
 800bb6a:	68ac      	ldr	r4, [r5, #8]
 800bb6c:	e7df      	b.n	800bb2e <_fflush_r+0x22>
 800bb6e:	4b04      	ldr	r3, [pc, #16]	; (800bb80 <_fflush_r+0x74>)
 800bb70:	429c      	cmp	r4, r3
 800bb72:	bf08      	it	eq
 800bb74:	68ec      	ldreq	r4, [r5, #12]
 800bb76:	e7da      	b.n	800bb2e <_fflush_r+0x22>
 800bb78:	08032114 	.word	0x08032114
 800bb7c:	08032134 	.word	0x08032134
 800bb80:	080320f4 	.word	0x080320f4

0800bb84 <std>:
 800bb84:	2300      	movs	r3, #0
 800bb86:	b510      	push	{r4, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb92:	6083      	str	r3, [r0, #8]
 800bb94:	8181      	strh	r1, [r0, #12]
 800bb96:	6643      	str	r3, [r0, #100]	; 0x64
 800bb98:	81c2      	strh	r2, [r0, #14]
 800bb9a:	6183      	str	r3, [r0, #24]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	2208      	movs	r2, #8
 800bba0:	305c      	adds	r0, #92	; 0x5c
 800bba2:	f7fb fed3 	bl	800794c <memset>
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <std+0x38>)
 800bba8:	6263      	str	r3, [r4, #36]	; 0x24
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <std+0x3c>)
 800bbac:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <std+0x40>)
 800bbb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <std+0x44>)
 800bbb4:	6224      	str	r4, [r4, #32]
 800bbb6:	6323      	str	r3, [r4, #48]	; 0x30
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop
 800bbbc:	0800bed9 	.word	0x0800bed9
 800bbc0:	0800befb 	.word	0x0800befb
 800bbc4:	0800bf33 	.word	0x0800bf33
 800bbc8:	0800bf57 	.word	0x0800bf57

0800bbcc <_cleanup_r>:
 800bbcc:	4901      	ldr	r1, [pc, #4]	; (800bbd4 <_cleanup_r+0x8>)
 800bbce:	f000 b8af 	b.w	800bd30 <_fwalk_reent>
 800bbd2:	bf00      	nop
 800bbd4:	0800bb0d 	.word	0x0800bb0d

0800bbd8 <__sfmoreglue>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	2268      	movs	r2, #104	; 0x68
 800bbdc:	1e4d      	subs	r5, r1, #1
 800bbde:	4355      	muls	r5, r2
 800bbe0:	460e      	mov	r6, r1
 800bbe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbe6:	f7ff fa59 	bl	800b09c <_malloc_r>
 800bbea:	4604      	mov	r4, r0
 800bbec:	b140      	cbz	r0, 800bc00 <__sfmoreglue+0x28>
 800bbee:	2100      	movs	r1, #0
 800bbf0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbf4:	300c      	adds	r0, #12
 800bbf6:	60a0      	str	r0, [r4, #8]
 800bbf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbfc:	f7fb fea6 	bl	800794c <memset>
 800bc00:	4620      	mov	r0, r4
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <__sfp_lock_acquire>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__sfp_lock_acquire+0x8>)
 800bc06:	f000 b8b3 	b.w	800bd70 <__retarget_lock_acquire_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20000a99 	.word	0x20000a99

0800bc10 <__sfp_lock_release>:
 800bc10:	4801      	ldr	r0, [pc, #4]	; (800bc18 <__sfp_lock_release+0x8>)
 800bc12:	f000 b8ae 	b.w	800bd72 <__retarget_lock_release_recursive>
 800bc16:	bf00      	nop
 800bc18:	20000a99 	.word	0x20000a99

0800bc1c <__sinit_lock_acquire>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__sinit_lock_acquire+0x8>)
 800bc1e:	f000 b8a7 	b.w	800bd70 <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	20000a9a 	.word	0x20000a9a

0800bc28 <__sinit_lock_release>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__sinit_lock_release+0x8>)
 800bc2a:	f000 b8a2 	b.w	800bd72 <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	20000a9a 	.word	0x20000a9a

0800bc34 <__sinit>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	f7ff fff0 	bl	800bc1c <__sinit_lock_acquire>
 800bc3c:	69a3      	ldr	r3, [r4, #24]
 800bc3e:	b11b      	cbz	r3, 800bc48 <__sinit+0x14>
 800bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc44:	f7ff bff0 	b.w	800bc28 <__sinit_lock_release>
 800bc48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc4c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <__sinit+0x68>)
 800bc50:	4a13      	ldr	r2, [pc, #76]	; (800bca0 <__sinit+0x6c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	bf04      	itt	eq
 800bc5a:	2301      	moveq	r3, #1
 800bc5c:	61a3      	streq	r3, [r4, #24]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f000 f820 	bl	800bca4 <__sfp>
 800bc64:	6060      	str	r0, [r4, #4]
 800bc66:	4620      	mov	r0, r4
 800bc68:	f000 f81c 	bl	800bca4 <__sfp>
 800bc6c:	60a0      	str	r0, [r4, #8]
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 f818 	bl	800bca4 <__sfp>
 800bc74:	2200      	movs	r2, #0
 800bc76:	60e0      	str	r0, [r4, #12]
 800bc78:	2104      	movs	r1, #4
 800bc7a:	6860      	ldr	r0, [r4, #4]
 800bc7c:	f7ff ff82 	bl	800bb84 <std>
 800bc80:	68a0      	ldr	r0, [r4, #8]
 800bc82:	2201      	movs	r2, #1
 800bc84:	2109      	movs	r1, #9
 800bc86:	f7ff ff7d 	bl	800bb84 <std>
 800bc8a:	68e0      	ldr	r0, [r4, #12]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	2112      	movs	r1, #18
 800bc90:	f7ff ff78 	bl	800bb84 <std>
 800bc94:	2301      	movs	r3, #1
 800bc96:	61a3      	str	r3, [r4, #24]
 800bc98:	e7d2      	b.n	800bc40 <__sinit+0xc>
 800bc9a:	bf00      	nop
 800bc9c:	08031cb0 	.word	0x08031cb0
 800bca0:	0800bbcd 	.word	0x0800bbcd

0800bca4 <__sfp>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	4607      	mov	r7, r0
 800bca8:	f7ff ffac 	bl	800bc04 <__sfp_lock_acquire>
 800bcac:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <__sfp+0x84>)
 800bcae:	681e      	ldr	r6, [r3, #0]
 800bcb0:	69b3      	ldr	r3, [r6, #24]
 800bcb2:	b913      	cbnz	r3, 800bcba <__sfp+0x16>
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ffbd 	bl	800bc34 <__sinit>
 800bcba:	3648      	adds	r6, #72	; 0x48
 800bcbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	d503      	bpl.n	800bccc <__sfp+0x28>
 800bcc4:	6833      	ldr	r3, [r6, #0]
 800bcc6:	b30b      	cbz	r3, 800bd0c <__sfp+0x68>
 800bcc8:	6836      	ldr	r6, [r6, #0]
 800bcca:	e7f7      	b.n	800bcbc <__sfp+0x18>
 800bccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcd0:	b9d5      	cbnz	r5, 800bd08 <__sfp+0x64>
 800bcd2:	4b16      	ldr	r3, [pc, #88]	; (800bd2c <__sfp+0x88>)
 800bcd4:	60e3      	str	r3, [r4, #12]
 800bcd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcda:	6665      	str	r5, [r4, #100]	; 0x64
 800bcdc:	f000 f847 	bl	800bd6e <__retarget_lock_init_recursive>
 800bce0:	f7ff ff96 	bl	800bc10 <__sfp_lock_release>
 800bce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcec:	6025      	str	r5, [r4, #0]
 800bcee:	61a5      	str	r5, [r4, #24]
 800bcf0:	2208      	movs	r2, #8
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcf8:	f7fb fe28 	bl	800794c <memset>
 800bcfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd04:	4620      	mov	r0, r4
 800bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd08:	3468      	adds	r4, #104	; 0x68
 800bd0a:	e7d9      	b.n	800bcc0 <__sfp+0x1c>
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4638      	mov	r0, r7
 800bd10:	f7ff ff62 	bl	800bbd8 <__sfmoreglue>
 800bd14:	4604      	mov	r4, r0
 800bd16:	6030      	str	r0, [r6, #0]
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d1d5      	bne.n	800bcc8 <__sfp+0x24>
 800bd1c:	f7ff ff78 	bl	800bc10 <__sfp_lock_release>
 800bd20:	230c      	movs	r3, #12
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	e7ee      	b.n	800bd04 <__sfp+0x60>
 800bd26:	bf00      	nop
 800bd28:	08031cb0 	.word	0x08031cb0
 800bd2c:	ffff0001 	.word	0xffff0001

0800bd30 <_fwalk_reent>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4606      	mov	r6, r0
 800bd36:	4688      	mov	r8, r1
 800bd38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd3c:	2700      	movs	r7, #0
 800bd3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd42:	f1b9 0901 	subs.w	r9, r9, #1
 800bd46:	d505      	bpl.n	800bd54 <_fwalk_reent+0x24>
 800bd48:	6824      	ldr	r4, [r4, #0]
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d1f7      	bne.n	800bd3e <_fwalk_reent+0xe>
 800bd4e:	4638      	mov	r0, r7
 800bd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd54:	89ab      	ldrh	r3, [r5, #12]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d907      	bls.n	800bd6a <_fwalk_reent+0x3a>
 800bd5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	d003      	beq.n	800bd6a <_fwalk_reent+0x3a>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4630      	mov	r0, r6
 800bd66:	47c0      	blx	r8
 800bd68:	4307      	orrs	r7, r0
 800bd6a:	3568      	adds	r5, #104	; 0x68
 800bd6c:	e7e9      	b.n	800bd42 <_fwalk_reent+0x12>

0800bd6e <__retarget_lock_init_recursive>:
 800bd6e:	4770      	bx	lr

0800bd70 <__retarget_lock_acquire_recursive>:
 800bd70:	4770      	bx	lr

0800bd72 <__retarget_lock_release_recursive>:
 800bd72:	4770      	bx	lr

0800bd74 <__swhatbuf_r>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	460e      	mov	r6, r1
 800bd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7c:	2900      	cmp	r1, #0
 800bd7e:	b096      	sub	sp, #88	; 0x58
 800bd80:	4614      	mov	r4, r2
 800bd82:	461d      	mov	r5, r3
 800bd84:	da08      	bge.n	800bd98 <__swhatbuf_r+0x24>
 800bd86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	602a      	str	r2, [r5, #0]
 800bd8e:	061a      	lsls	r2, r3, #24
 800bd90:	d410      	bmi.n	800bdb4 <__swhatbuf_r+0x40>
 800bd92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd96:	e00e      	b.n	800bdb6 <__swhatbuf_r+0x42>
 800bd98:	466a      	mov	r2, sp
 800bd9a:	f000 f903 	bl	800bfa4 <_fstat_r>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	dbf1      	blt.n	800bd86 <__swhatbuf_r+0x12>
 800bda2:	9a01      	ldr	r2, [sp, #4]
 800bda4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bda8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdac:	425a      	negs	r2, r3
 800bdae:	415a      	adcs	r2, r3
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	e7ee      	b.n	800bd92 <__swhatbuf_r+0x1e>
 800bdb4:	2340      	movs	r3, #64	; 0x40
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	b016      	add	sp, #88	; 0x58
 800bdbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdc0 <__smakebuf_r>:
 800bdc0:	898b      	ldrh	r3, [r1, #12]
 800bdc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdc4:	079d      	lsls	r5, r3, #30
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	460c      	mov	r4, r1
 800bdca:	d507      	bpl.n	800bddc <__smakebuf_r+0x1c>
 800bdcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	6123      	str	r3, [r4, #16]
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	6163      	str	r3, [r4, #20]
 800bdd8:	b002      	add	sp, #8
 800bdda:	bd70      	pop	{r4, r5, r6, pc}
 800bddc:	ab01      	add	r3, sp, #4
 800bdde:	466a      	mov	r2, sp
 800bde0:	f7ff ffc8 	bl	800bd74 <__swhatbuf_r>
 800bde4:	9900      	ldr	r1, [sp, #0]
 800bde6:	4605      	mov	r5, r0
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7ff f957 	bl	800b09c <_malloc_r>
 800bdee:	b948      	cbnz	r0, 800be04 <__smakebuf_r+0x44>
 800bdf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf4:	059a      	lsls	r2, r3, #22
 800bdf6:	d4ef      	bmi.n	800bdd8 <__smakebuf_r+0x18>
 800bdf8:	f023 0303 	bic.w	r3, r3, #3
 800bdfc:	f043 0302 	orr.w	r3, r3, #2
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	e7e3      	b.n	800bdcc <__smakebuf_r+0xc>
 800be04:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <__smakebuf_r+0x7c>)
 800be06:	62b3      	str	r3, [r6, #40]	; 0x28
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	6020      	str	r0, [r4, #0]
 800be0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	9b00      	ldr	r3, [sp, #0]
 800be14:	6163      	str	r3, [r4, #20]
 800be16:	9b01      	ldr	r3, [sp, #4]
 800be18:	6120      	str	r0, [r4, #16]
 800be1a:	b15b      	cbz	r3, 800be34 <__smakebuf_r+0x74>
 800be1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be20:	4630      	mov	r0, r6
 800be22:	f000 f8d1 	bl	800bfc8 <_isatty_r>
 800be26:	b128      	cbz	r0, 800be34 <__smakebuf_r+0x74>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	f043 0301 	orr.w	r3, r3, #1
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	89a0      	ldrh	r0, [r4, #12]
 800be36:	4305      	orrs	r5, r0
 800be38:	81a5      	strh	r5, [r4, #12]
 800be3a:	e7cd      	b.n	800bdd8 <__smakebuf_r+0x18>
 800be3c:	0800bbcd 	.word	0x0800bbcd

0800be40 <_malloc_usable_size_r>:
 800be40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be44:	1f18      	subs	r0, r3, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	bfbc      	itt	lt
 800be4a:	580b      	ldrlt	r3, [r1, r0]
 800be4c:	18c0      	addlt	r0, r0, r3
 800be4e:	4770      	bx	lr

0800be50 <_raise_r>:
 800be50:	291f      	cmp	r1, #31
 800be52:	b538      	push	{r3, r4, r5, lr}
 800be54:	4604      	mov	r4, r0
 800be56:	460d      	mov	r5, r1
 800be58:	d904      	bls.n	800be64 <_raise_r+0x14>
 800be5a:	2316      	movs	r3, #22
 800be5c:	6003      	str	r3, [r0, #0]
 800be5e:	f04f 30ff 	mov.w	r0, #4294967295
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be66:	b112      	cbz	r2, 800be6e <_raise_r+0x1e>
 800be68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be6c:	b94b      	cbnz	r3, 800be82 <_raise_r+0x32>
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 f830 	bl	800bed4 <_getpid_r>
 800be74:	462a      	mov	r2, r5
 800be76:	4601      	mov	r1, r0
 800be78:	4620      	mov	r0, r4
 800be7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be7e:	f000 b817 	b.w	800beb0 <_kill_r>
 800be82:	2b01      	cmp	r3, #1
 800be84:	d00a      	beq.n	800be9c <_raise_r+0x4c>
 800be86:	1c59      	adds	r1, r3, #1
 800be88:	d103      	bne.n	800be92 <_raise_r+0x42>
 800be8a:	2316      	movs	r3, #22
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	2001      	movs	r0, #1
 800be90:	e7e7      	b.n	800be62 <_raise_r+0x12>
 800be92:	2400      	movs	r4, #0
 800be94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be98:	4628      	mov	r0, r5
 800be9a:	4798      	blx	r3
 800be9c:	2000      	movs	r0, #0
 800be9e:	e7e0      	b.n	800be62 <_raise_r+0x12>

0800bea0 <raise>:
 800bea0:	4b02      	ldr	r3, [pc, #8]	; (800beac <raise+0xc>)
 800bea2:	4601      	mov	r1, r0
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	f7ff bfd3 	b.w	800be50 <_raise_r>
 800beaa:	bf00      	nop
 800beac:	20000010 	.word	0x20000010

0800beb0 <_kill_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d07      	ldr	r5, [pc, #28]	; (800bed0 <_kill_r+0x20>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	4611      	mov	r1, r2
 800bebc:	602b      	str	r3, [r5, #0]
 800bebe:	f7f6 f903 	bl	80020c8 <_kill>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	d102      	bne.n	800becc <_kill_r+0x1c>
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	b103      	cbz	r3, 800becc <_kill_r+0x1c>
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	bd38      	pop	{r3, r4, r5, pc}
 800bece:	bf00      	nop
 800bed0:	20000a94 	.word	0x20000a94

0800bed4 <_getpid_r>:
 800bed4:	f7f6 b8f0 	b.w	80020b8 <_getpid>

0800bed8 <__sread>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	460c      	mov	r4, r1
 800bedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee0:	f000 f894 	bl	800c00c <_read_r>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	bfab      	itete	ge
 800bee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beea:	89a3      	ldrhlt	r3, [r4, #12]
 800beec:	181b      	addge	r3, r3, r0
 800beee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bef2:	bfac      	ite	ge
 800bef4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bef6:	81a3      	strhlt	r3, [r4, #12]
 800bef8:	bd10      	pop	{r4, pc}

0800befa <__swrite>:
 800befa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	461f      	mov	r7, r3
 800bf00:	898b      	ldrh	r3, [r1, #12]
 800bf02:	05db      	lsls	r3, r3, #23
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	4616      	mov	r6, r2
 800bf0a:	d505      	bpl.n	800bf18 <__swrite+0x1e>
 800bf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf10:	2302      	movs	r3, #2
 800bf12:	2200      	movs	r2, #0
 800bf14:	f000 f868 	bl	800bfe8 <_lseek_r>
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	4632      	mov	r2, r6
 800bf26:	463b      	mov	r3, r7
 800bf28:	4628      	mov	r0, r5
 800bf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2e:	f000 b817 	b.w	800bf60 <_write_r>

0800bf32 <__sseek>:
 800bf32:	b510      	push	{r4, lr}
 800bf34:	460c      	mov	r4, r1
 800bf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf3a:	f000 f855 	bl	800bfe8 <_lseek_r>
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	bf15      	itete	ne
 800bf44:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf4e:	81a3      	strheq	r3, [r4, #12]
 800bf50:	bf18      	it	ne
 800bf52:	81a3      	strhne	r3, [r4, #12]
 800bf54:	bd10      	pop	{r4, pc}

0800bf56 <__sclose>:
 800bf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5a:	f000 b813 	b.w	800bf84 <_close_r>
	...

0800bf60 <_write_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d07      	ldr	r5, [pc, #28]	; (800bf80 <_write_r+0x20>)
 800bf64:	4604      	mov	r4, r0
 800bf66:	4608      	mov	r0, r1
 800bf68:	4611      	mov	r1, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	602a      	str	r2, [r5, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f7f6 f8e1 	bl	8002136 <_write>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_write_r+0x1e>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_write_r+0x1e>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20000a94 	.word	0x20000a94

0800bf84 <_close_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d06      	ldr	r5, [pc, #24]	; (800bfa0 <_close_r+0x1c>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	602b      	str	r3, [r5, #0]
 800bf90:	f7f6 f8ed 	bl	800216e <_close>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_close_r+0x1a>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_close_r+0x1a>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20000a94 	.word	0x20000a94

0800bfa4 <_fstat_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d07      	ldr	r5, [pc, #28]	; (800bfc4 <_fstat_r+0x20>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	4611      	mov	r1, r2
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	f7f6 f8e8 	bl	8002186 <_fstat>
 800bfb6:	1c43      	adds	r3, r0, #1
 800bfb8:	d102      	bne.n	800bfc0 <_fstat_r+0x1c>
 800bfba:	682b      	ldr	r3, [r5, #0]
 800bfbc:	b103      	cbz	r3, 800bfc0 <_fstat_r+0x1c>
 800bfbe:	6023      	str	r3, [r4, #0]
 800bfc0:	bd38      	pop	{r3, r4, r5, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000a94 	.word	0x20000a94

0800bfc8 <_isatty_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4d06      	ldr	r5, [pc, #24]	; (800bfe4 <_isatty_r+0x1c>)
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4604      	mov	r4, r0
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	602b      	str	r3, [r5, #0]
 800bfd4:	f7f6 f8e7 	bl	80021a6 <_isatty>
 800bfd8:	1c43      	adds	r3, r0, #1
 800bfda:	d102      	bne.n	800bfe2 <_isatty_r+0x1a>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	b103      	cbz	r3, 800bfe2 <_isatty_r+0x1a>
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	bd38      	pop	{r3, r4, r5, pc}
 800bfe4:	20000a94 	.word	0x20000a94

0800bfe8 <_lseek_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4d07      	ldr	r5, [pc, #28]	; (800c008 <_lseek_r+0x20>)
 800bfec:	4604      	mov	r4, r0
 800bfee:	4608      	mov	r0, r1
 800bff0:	4611      	mov	r1, r2
 800bff2:	2200      	movs	r2, #0
 800bff4:	602a      	str	r2, [r5, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	f7f6 f8e0 	bl	80021bc <_lseek>
 800bffc:	1c43      	adds	r3, r0, #1
 800bffe:	d102      	bne.n	800c006 <_lseek_r+0x1e>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	b103      	cbz	r3, 800c006 <_lseek_r+0x1e>
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	20000a94 	.word	0x20000a94

0800c00c <_read_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d07      	ldr	r5, [pc, #28]	; (800c02c <_read_r+0x20>)
 800c010:	4604      	mov	r4, r0
 800c012:	4608      	mov	r0, r1
 800c014:	4611      	mov	r1, r2
 800c016:	2200      	movs	r2, #0
 800c018:	602a      	str	r2, [r5, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	f7f6 f86e 	bl	80020fc <_read>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_read_r+0x1e>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	b103      	cbz	r3, 800c02a <_read_r+0x1e>
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	20000a94 	.word	0x20000a94

0800c030 <_init>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr

0800c03c <_fini>:
 800c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03e:	bf00      	nop
 800c040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c042:	bc08      	pop	{r3}
 800c044:	469e      	mov	lr, r3
 800c046:	4770      	bx	lr
